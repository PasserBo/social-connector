{"version":3,"sources":["assets/images/pages/calendar-illustration.png","views/apps/book/Calendar.js","views/apps/book/SidebarLeft.js","views/apps/book/AddEventSidebar.js","views/apps/book/index.js","@core/components/avatar/index.js"],"names":["ToastComponent","title","icon","color","className","size","Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction","memo","filters","label","SidebarLeft","updateFilter","updateAllFilters","block","onClick","id","type","checked","selectedCalendars","onChange","e","target","for","map","filter","classnames","includes","src","illustration","alt","AddEventSidebar","open","addEvent","removeEvent","refetchEvents","selectedEvent","control","setError","setValue","getValues","handleSubmit","formState","errors","useForm","defaultValues","url","setUrl","useState","desc","setDesc","guests","setGuests","allDay","setAllDay","location","setLocation","endPicker","setEndPicker","Date","startPicker","setStartPicker","calendarLabel","setCalendarLabel","value","guestsOptions","avatar","img1","handleUpdateEvent","eventToUpdate","display","undefined","description","propsToUpdate","extendedPropsToUpdate","updatedEventData","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","handleDeleteEvent","eventId","remove","error","Trash","EventActions","isObjEmpty","outline","CloseBtn","isOpen","toggle","onOpened","resolveLabel","onClosed","contentClassName","modalClassName","close","tag","options","wheelPropagation","onSubmit","data","obj","handleAddEvent","name","render","field","placeholder","invalid","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","required","enableTime","dateFormat","isMulti","rows","Billboards","Screens","Office","Panorama","Malls","CalendarComponent","useDispatch","useSelector","state","book","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","fetchEvents","show","Avatar","forwardRef","img","status","badgeUp","content","Tag","initials","imgWidth","badgeText","imgHeight","badgeColor","imgClassName","contentStyles","rest","style","str","results","split","forEach","push","join","getInitials","pill","height","width","defaultProps"],"mappings":"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","file":"static/js/34.6aed2d78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";","// ** React Import\r\nimport { useEffect, useRef, memo, Fragment } from 'react'\r\n\r\n// ** Full Calendar & it's Plugins\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport listPlugin from '@fullcalendar/list'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { toast } from 'react-toastify'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport { Menu, Check } from 'react-feather'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Calendar = props => {\r\n  // ** Refs\r\n  const calendarRef = useRef(null)\r\n\r\n  // ** Props\r\n  const {\r\n    store,\r\n    isRtl,\r\n    dispatch,\r\n    calendarsColor,\r\n    calendarApi,\r\n    setCalendarApi,\r\n    handleAddEventSidebar,\r\n    blankEvent,\r\n    toggleSidebar,\r\n    selectEvent,\r\n    updateEvent\r\n  } = props\r\n\r\n  // ** UseEffect checks for CalendarAPI Update\r\n  useEffect(() => {\r\n    if (calendarApi === null) {\r\n      setCalendarApi(calendarRef.current.getApi())\r\n    }\r\n  }, [calendarApi])\r\n\r\n  // ** calendarOptions(Props)\r\n  const calendarOptions = {\r\n    events: store.events.length ? store.events : [],\r\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\r\n    initialView: 'dayGridMonth',\r\n    headerToolbar: {\r\n      start: 'sidebarToggle, prev,next, title',\r\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\r\n    },\r\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\r\n    editable: true,\r\n\r\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\r\n    eventResizableFromStart: true,\r\n\r\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\r\n    dragScroll: true,\r\n\r\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\r\n    dayMaxEvents: 2,\r\n\r\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\r\n    navLinks: true,\r\n\r\n    eventClassNames({ event: calendarEvent }) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\r\n\r\n      return [\r\n        // Background Color\r\n        `bg-light-${colorName}`\r\n      ]\r\n    },\r\n\r\n    eventClick({ event: clickedEvent }) {\r\n      dispatch(selectEvent(clickedEvent))\r\n      handleAddEventSidebar()\r\n\r\n      // * Only grab required field otherwise it goes in infinity loop\r\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\r\n      // event.value = grabEventDataFromEventApi(clickedEvent)\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      // isAddNewEventSidebarActive.value = true\r\n    },\r\n\r\n    customButtons: {\r\n      sidebarToggle: {\r\n        text: <Menu className='d-xl-none d-block' />,\r\n        click() {\r\n          toggleSidebar(true)\r\n        }\r\n      }\r\n    },\r\n\r\n    dateClick(info) {\r\n      const ev = blankEvent\r\n      ev.start = info.date\r\n      ev.end = info.date\r\n      dispatch(selectEvent(ev))\r\n      handleAddEventSidebar()\r\n    },\r\n\r\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\r\n    eventDrop({ event: droppedEvent }) {\r\n      dispatch(updateEvent(droppedEvent))\r\n      toast.success(<ToastComponent title='Ad Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\r\n    eventResize({ event: resizedEvent }) {\r\n      dispatch(updateEvent(resizedEvent))\r\n      toast.success(<ToastComponent title='Ad Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    ref: calendarRef,\r\n\r\n    // Get direction from app state (store)\r\n    direction: isRtl ? 'rtl' : 'ltr'\r\n  }\r\n\r\n  return (\r\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\r\n      <CardBody className='pb-0'>\r\n        <FullCalendar {...calendarOptions} />{' '}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(Calendar)\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardBody, Button, Input, Label } from 'reactstrap'\r\n\r\n// ** illustration import\r\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\r\n\r\n// ** Filters Checkbox Array\r\nconst filters = [\r\n  { label: 'Billboards.btc', color: 'Billboards', className: 'form-check-danger mb-1' },\r\n  { label: 'Times2.btc', color: 'success', className: 'form-check-info' },\r\n  { label: 'Screens.btc', color: 'primary', className: 'form-check-primary mb-1' },\r\n  { label: 'Agency.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'Advertising.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'Direct Mail.btc', color: 'info', className: 'form-check-info' },\r\n  { label: 'Panorama.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'Office.btc', color: 'primary', className: 'form-check-warning mb-1' },\r\n  { label: 'Malls.btc', color: 'success', className: 'form-check-success mb-1' },\r\n  { label: 'Say.btc', color: 'success', className: 'form-check-primary mb-1' },\r\n  { label: 'Stadium.btc', color: 'info', className: 'form-check-info' },\r\n  { label: 'Gyms.btc', color: 'info', className: 'form-check-info' },\r\n  { label: 'Classifieds.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'CPA.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'Desktop.btc', color: 'primary', className: 'form-check-info' },\r\n  { label: 'Uncensored.btc', color: 'info', className: 'form-check-info' },\r\n  { label: 'KidSafe.btc', color: 'success', className: 'form-check-info' },\r\n  { label: 'HighSchool.btc', color: 'success', className: 'form-check-info' }\r\n]\r\n\r\nconst SidebarLeft = props => {\r\n  // ** Props\r\n  const { handleAddEventSidebar, toggleSidebar, updateFilter, updateAllFilters, store, dispatch } = props\r\n\r\n  // ** Function to handle Add Event Click\r\n  const handleAddEventClick = () => {\r\n    toggleSidebar(false)\r\n    handleAddEventSidebar()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sidebar-wrapper'>\r\n        <CardBody className='card-body d-flex justify-content-center my-sm-0 mb-3'>\r\n          <Button color='primary' block onClick={handleAddEventClick}>\r\n            <span className='align-middle'>Book Ad</span>\r\n          </Button>\r\n        </CardBody>\r\n        <CardBody>\r\n          <h5 className='section-label mb-1'>\r\n            <span className='align-middle'>Filter</span>\r\n          </h5>\r\n          <div className='form-check mb-1'>\r\n            <Input\r\n              id='view-all'\r\n              type='checkbox'\r\n              label='View All'\r\n              className='select-all'\r\n              checked={store.selectedCalendars.length === filters.length}\r\n              onChange={e => dispatch(updateAllFilters(e.target.checked))}\r\n            />\r\n            <Label className='form-check-label' for='view-all'>\r\n              View All\r\n            </Label>\r\n          </div>\r\n          <div className='calendar-events-filter'>\r\n            {filters.length &&\r\n              filters.map(filter => {\r\n                return (\r\n                  <div\r\n                    key={`${filter.label}-key`}\r\n                    className={classnames('form-check', {\r\n                      [filter.className]: filter.className\r\n                    })}\r\n                  >\r\n                    <Input\r\n                      type='checkbox'\r\n                      key={filter.label}\r\n                      label={filter.label}\r\n                      className='input-filter'\r\n                      id={`${filter.label}-event`}\r\n                      checked={store.selectedCalendars.includes(filter.label)}\r\n                      onChange={() => {\r\n                        dispatch(updateFilter(filter.label))\r\n                      }}\r\n                    />\r\n                    <Label className='form-check-label' for={`${filter.label}-event`}>\r\n                      {filter.label}\r\n                    </Label>\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n        </CardBody>\r\n      </div>\r\n      <div className='mt-auto'>\r\n        <img className='img-fluid' src={illustration} alt='illustration' />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default SidebarLeft\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { toast } from 'react-toastify'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport { X, Check } from 'react-feather'\r\nimport Select, { components } from 'react-select'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, Label, Input, Form } from 'reactstrap'\r\n\r\n// ** Utils\r\nimport { selectThemeColors, isObjEmpty } from '@utils'\r\n\r\n// ** Avatar Images\r\nimport img1 from '@src/assets/images/avatars/1-small.png'\r\n\r\n// ** Styles Imports\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst AddEventSidebar = props => {\r\n  // ** Props\r\n  const {\r\n    open,\r\n    store,\r\n    dispatch,\r\n    addEvent,\r\n    calendarApi,\r\n    selectEvent,\r\n    updateEvent,\r\n    removeEvent,\r\n    refetchEvents,\r\n    calendarsColor,\r\n    handleAddEventSidebar\r\n  } = props\r\n\r\n  // ** Vars & Hooks\r\n  const selectedEvent = store.selectedEvent,\r\n    {\r\n      control,\r\n      setError,\r\n      setValue,\r\n      getValues,\r\n      handleSubmit,\r\n      formState: { errors }\r\n    } = useForm({\r\n      defaultValues: { title: '' }\r\n    })\r\n\r\n  // ** States\r\n  const [url, setUrl] = useState('')\r\n  const [desc, setDesc] = useState('')\r\n  const [guests, setGuests] = useState({})\r\n  const [allDay, setAllDay] = useState(false)\r\n  const [location, setLocation] = useState('')\r\n  const [endPicker, setEndPicker] = useState(new Date())\r\n  const [startPicker, setStartPicker] = useState(new Date())\r\n  const [calendarLabel, setCalendarLabel] = useState([{ value: 'Billboards', label: 'Billboards.btc', color: 'primary' }])\r\n\r\n  // ** Select Options\r\n  const options = [\r\n    { value: 'Billboards', label: 'Billboards.btc', color: 'success', className: 'form-check-danger mb-1' },\r\n    { value: 'Times Sq', label: 'Times2.btc', color: 'success', className: 'form-check-info' },\r\n    { value: 'Screens', label: 'Screens.btc', color: 'primary', className: 'form-check-primary mb-1' },\r\n    { value: 'Agency', label: 'Agency.btc', color: 'primary', className: 'form-check-info' },\r\n    { value: 'Advertising', label: 'Advertising.btc', color: 'primary', className: 'form-check-info' },\r\n    { value: 'Direct Mail', label: 'Direct Mail.btc', color: 'info', className: 'form-check-info' },\r\n    { value: 'Panorama', label: 'Panorama.btc', color: 'primary', className: 'form-check-info' },\r\n    { value: 'Office', label: 'Office.btc', color: 'primary', className: 'form-check-warning mb-1' },\r\n    { value: 'Malls', label: 'Malls.btc', color: 'success', className: 'form-check-success mb-1' },\r\n    { value: 'Say', label: 'Say.btc', color: 'success', className: 'form-check-primary mb-1' },\r\n    { value: 'Stadium', label: 'Stadium.btc', color: 'info', className: 'form-check-info' },\r\n    { value: 'Gyms', label: 'Gyms.btc', color: 'info', className: 'form-check-info' },\r\n    { value: 'Classifieds', label: 'Classifieds.btc', color: 'primary', className: 'form-check-info' }\r\n  ]\r\n\r\n  const guestsOptions = [\r\n    { value: 'USA', label: 'USA', avatar: img1 },\r\n    { value: 'CAN', label: 'Canada', avatar: img1 },\r\n    { value: 'Global', label: 'Global', avatar: img1 }\r\n  ]\r\n\r\n  // ** Custom Select components\r\n  const OptionComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <span className={`bullet bullet-${data.color} bullet-sm me-50`}></span>\r\n        {data.label}\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  const GuestsComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <div className='d-flex flex-wrap align-items-center'>\r\n          <div>{data.label}</div>\r\n        </div>\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  // ** Adds New Ad\r\n  const handleAddEvent = () => {\r\n    const obj = {\r\n      title: getValues('title'),\r\n      start: startPicker,\r\n      end: endPicker,\r\n      allDay,\r\n      display: 'block',\r\n      extendedProps: {\r\n        calendar: calendarLabel[0].label,\r\n        url: url.length ? url : undefined,\r\n        guests: guests.length ? guests : undefined,\r\n        location: location.length ? location : undefined,\r\n        desc: desc.length ? desc : undefined\r\n      }\r\n    }\r\n    dispatch(addEvent(obj))\r\n    refetchEvents()\r\n    handleAddEventSidebar()\r\n    toast.success(<ToastComponent title='Ad Booked - Ready to Publish' color='success' icon={<Check />} />, {\r\n      icon: false,\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeButton: false\r\n    })\r\n  }\r\n\r\n  // ** Reset Input Values on Close\r\n  const handleResetInputValues = () => {\r\n    dispatch(selectEvent({}))\r\n    setValue('title', '')\r\n    setAllDay(false)\r\n    setUrl('')\r\n    setLocation('')\r\n    setDesc('')\r\n    setGuests({})\r\n    setCalendarLabel([{ value: 'Billboards', label: 'Billboards.btc', color: 'primary' }])\r\n    setStartPicker(new Date())\r\n    setEndPicker(new Date())\r\n  }\r\n\r\n  // ** Set sidebar fields\r\n  const handleSelectedEvent = () => {\r\n    if (!isObjEmpty(selectedEvent)) {\r\n      const calendar = selectedEvent.extendedProps.calendar\r\n\r\n      const resolveLabel = () => {\r\n        if (calendar.length) {\r\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\r\n        } else {\r\n          return { value: 'Billboards', label: 'Billboards.btc', color: 'primary' }\r\n        }\r\n      }\r\n      setValue('title', selectedEvent.title || getValues('title'))\r\n      setAllDay(selectedEvent.allDay || allDay)\r\n      setUrl(selectedEvent.url || url)\r\n      setLocation(selectedEvent.extendedProps.location || location)\r\n      setDesc(selectedEvent.extendedProps.description || desc)\r\n      setGuests(selectedEvent.extendedProps.guests || guests)\r\n      setStartPicker(new Date(selectedEvent.start))\r\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\r\n      setCalendarLabel([resolveLabel()])\r\n    }\r\n  }\r\n\r\n  // ** (UI) updateEventInCalendar\r\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\r\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\r\n\r\n    // ** Set ad properties except date related\r\n    for (let index = 0; index < propsToUpdate.length; index++) {\r\n      const propName = propsToUpdate[index]\r\n      existingEvent.setProp(propName, updatedEventData[propName])\r\n    }\r\n\r\n    // ** Set date related props\r\n    existingEvent.setDates(new Date(updatedEventData.start), new Date(updatedEventData.end), {\r\n      allDay: updatedEventData.allDay\r\n    })\r\n\r\n    // ** Set ad's extendedProps\r\n     for (let index = 0; index < extendedPropsToUpdate.length; index++) {\r\n      const propName = extendedPropsToUpdate[index]\r\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\r\n    }\r\n  }\r\n\r\n  // ** Updates Ads in Store\r\n  const handleUpdateEvent = () => {\r\n    if (getValues('title').length) {\r\n      const eventToUpdate = {\r\n        id: selectedEvent.id,\r\n        title: getValues('title'),\r\n        allDay,\r\n        start: startPicker,\r\n        end: endPicker,\r\n        url,\r\n        display: allDay === false ? 'block' : undefined,\r\n        extendedProps: {\r\n          location,\r\n          description: desc,\r\n          guests,\r\n          calendar: calendarLabel[0].label\r\n        }\r\n      }\r\n\r\n      const propsToUpdate = ['id', 'title', 'url']\r\n      const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\r\n      dispatch(updateEvent(eventToUpdate))\r\n      updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\r\n\r\n      handleAddEventSidebar()\r\n      toast.success(<ToastComponent title='Ad Updated' color='success' icon={<Check />} />, {\r\n        icon: false,\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    } else {\r\n      setError('title', {\r\n        type: 'manual'\r\n      })\r\n    }\r\n  }\r\n\r\n  // ** (UI) removeEventInCalendar\r\n  const removeEventInCalendar = eventId => {\r\n    calendarApi.getEventById(eventId).remove()\r\n  }\r\n\r\n  const handleDeleteEvent = () => {\r\n    dispatch(removeEvent(selectedEvent.id))\r\n    removeEventInCalendar(selectedEvent.id)\r\n    handleAddEventSidebar()\r\n    toast.error(<ToastComponent title='Ad Removed' color='danger' icon={<Trash />} />, {\r\n      icon: false,\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeButton: false\r\n    })\r\n  }\r\n\r\n  // ** Event Action buttons\r\n  const EventActions = () => {\r\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n      return (\r\n        <Fragment>\r\n          <Button className='me-1' type='submit' color='primary'>\r\n            Add\r\n          </Button>\r\n          <Button color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\r\n            Cancel\r\n          </Button>\r\n        </Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <Button className='me-1' color='primary' onClick={handleUpdateEvent}>\r\n            Update\r\n          </Button>\r\n          <Button color='danger' onClick={handleDeleteEvent} outline>\r\n            Delete\r\n          </Button>\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  // ** Close BTN\r\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      className='sidebar-lg'\r\n      toggle={handleAddEventSidebar}\r\n      onOpened={handleSelectedEvent}\r\n      onClosed={handleResetInputValues}\r\n      contentClassName='p-0 overflow-hidden'\r\n      modalClassName='modal-slide-in event-sidebar'\r\n    >\r\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\r\n        <h5 className='modal-title'>\r\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Book'} Ad\r\n        </h5>\r\n      </ModalHeader>\r\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\r\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\r\n          <Form\r\n            onSubmit={handleSubmit(data => {\r\n              if (data.title.length) {\r\n                if (isObjEmpty(errors)) {\r\n                  if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n                    handleAddEvent()\r\n                  } else {\r\n                    handleUpdateEvent()\r\n                  }\r\n                  handleAddEventSidebar()\r\n                }\r\n              } else {\r\n                setError('title', {\r\n                  type: 'manual'\r\n                })\r\n              }\r\n            })}\r\n          >\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='title'>\r\n                Title <span className='text-danger'>*</span>\r\n              </Label>\r\n              <Controller\r\n                name='title'\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input id='title' placeholder='Title' invalid={errors.title && true} {...field} />\r\n                )}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='label'>\r\n                Distribution Network\r\n              </Label>\r\n              <Select\r\n                id='label'\r\n                value={calendarLabel}\r\n                options={options}\r\n                theme={selectThemeColors}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                isClearable={false}\r\n                onChange={data => setCalendarLabel([data])}\r\n                components={{\r\n                  Option: OptionComponent\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='startDate'>\r\n                Start Date\r\n              </Label>\r\n              <Flatpickr\r\n                required\r\n                id='startDate'\r\n                name='startDate'\r\n                className='form-control'\r\n                onChange={date => setStartPicker(date[0])}\r\n                value={startPicker}\r\n                options={{\r\n                  enableTime: allDay === false,\r\n                  dateFormat: 'Y-m-d H:i'\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='endDate'>\r\n                End Date\r\n              </Label>\r\n              <Flatpickr\r\n                required\r\n                id='endDate'\r\n                // tag={Flatpickr}\r\n                name='endDate'\r\n                className='form-control'\r\n                onChange={date => setEndPicker(date[0])}\r\n                value={endPicker}\r\n                options={{\r\n                  enableTime: allDay === false,\r\n                  dateFormat: 'Y-m-d H:i'\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='form-switch mb-1'>\r\n              <Input\r\n                id='allDay'\r\n                type='switch'\r\n                className='me-1'\r\n                checked={allDay}\r\n                name='customSwitch'\r\n                onChange={e => setAllDay(e.target.checked)}\r\n              />\r\n              <Label className='form-label' for='allDay'>\r\n                All Day\r\n              </Label>\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='eventURL'>\r\n                URL for the Art (PNG, JPG, SVG, HTML)\r\n                (TIFF only available for Agency Networks)\r\n              </Label>\r\n              <Input\r\n                type='url'\r\n                id='eventURL'\r\n                value={url}\r\n                onChange={e => setUrl(e.target.value)}\r\n                placeholder='https://www.bitfari.org'\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='guests'>\r\n                Choose a Location\r\n              </Label>\r\n              <Select\r\n                isMulti\r\n                id='guests'\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                isClearable={false}\r\n                options={guestsOptions}\r\n                theme={selectThemeColors}\r\n                value={guests.length ? [...guests] : null}\r\n                onChange={data => setGuests([...data])}\r\n                components={{\r\n                  Option: GuestsComponent\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='location'>\r\n                Keywords\r\n              </Label>\r\n              <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='' />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='description'>\r\n                Ad Copy\r\n              </Label>\r\n              <Input\r\n                type='textarea'\r\n                name='text'\r\n                id='description'\r\n                rows='3'\r\n                value={desc}\r\n                onChange={e => setDesc(e.target.value)}\r\n                placeholder='Place your Copy here'\r\n              />\r\n            </div>\r\n            <div className='d-flex mb-1'>\r\n              <EventActions />\r\n            </div>\r\n          </Form>\r\n        </ModalBody>\r\n      </PerfectScrollbar>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddEventSidebar","// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Calendar App Component Imports\r\nimport Calendar from './Calendar'\r\nimport SidebarLeft from './SidebarLeft'\r\nimport AddEventSidebar from './AddEventSidebar'\r\n\r\n// ** Custom HooksappCalendar\r\nimport { useRTL } from '@hooks/useRTL'\r\n\r\n// ** Store & Actions\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchEvents, selectEvent, updateEvent, updateFilter, updateAllFilters, addEvent, removeEvent } from './store'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-book.scss'\r\n\r\n// ** CalendarColors\r\nconst calendarsColor = {\r\n  Billboards: 'primary',\r\n  Screens: 'success',\r\n  Office: 'danger',\r\n  Panorama: 'warning',\r\n  Malls: 'info'\r\n}\r\n\r\nconst CalendarComponent = () => {\r\n  // ** Variables\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.book)\r\n\r\n  // ** states\r\n  const [calendarApi, setCalendarApi] = useState(null)\r\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false)\r\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(false)\r\n\r\n  // ** Hooks\r\n  const [isRtl] = useRTL()\r\n\r\n  // ** AddEventSidebar Toggle Function\r\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\r\n\r\n  // ** LeftSidebar Toggle Function\r\n  const toggleSidebar = val => setLeftSidebarOpen(val)\r\n\r\n  // ** Blank Event Object\r\n  const blankEvent = {\r\n    title: '',\r\n    start: '',\r\n    end: '',\r\n    allDay: false,\r\n    url: '',\r\n    extendedProps: {\r\n      calendar: '',\r\n      guests: [],\r\n      location: '',\r\n      description: ''\r\n    }\r\n  }\r\n\r\n  // ** refetchEvents\r\n  const refetchEvents = () => {\r\n    if (calendarApi !== null) {\r\n      calendarApi.refetchEvents()\r\n    }\r\n  }\r\n\r\n  // ** Fetch Events On Mount\r\n  useEffect(() => {\r\n    dispatch(fetchEvents(store.selectedCalendars))\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='app-calendar overflow-hidden border'>\r\n        <Row className='g-0'>\r\n          <Col\r\n            id='app-calendar-sidebar'\r\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\r\n              show: leftSidebarOpen\r\n            })}\r\n          >\r\n            <SidebarLeft\r\n              store={store}\r\n              dispatch={dispatch}\r\n              updateFilter={updateFilter}\r\n              toggleSidebar={toggleSidebar}\r\n              updateAllFilters={updateAllFilters}\r\n              handleAddEventSidebar={handleAddEventSidebar}\r\n            />\r\n          </Col>\r\n          <Col className='position-relative'>\r\n            <Calendar\r\n              isRtl={isRtl}\r\n              store={store}\r\n              dispatch={dispatch}\r\n              blankEvent={blankEvent}\r\n              calendarApi={calendarApi}\r\n              selectEvent={selectEvent}\r\n              updateEvent={updateEvent}\r\n              toggleSidebar={toggleSidebar}\r\n              calendarsColor={calendarsColor}\r\n              setCalendarApi={setCalendarApi}\r\n              handleAddEventSidebar={handleAddEventSidebar}\r\n            />\r\n          </Col>\r\n          <div\r\n            className={classnames('body-content-overlay', {\r\n              show: leftSidebarOpen === true\r\n            })}\r\n            onClick={() => toggleSidebar(false)}\r\n          ></div>\r\n        </Row>\r\n      </div>\r\n      <AddEventSidebar\r\n        store={store}\r\n        dispatch={dispatch}\r\n        addEvent={addEvent}\r\n        open={addSidebarOpen}\r\n        selectEvent={selectEvent}\r\n        updateEvent={updateEvent}\r\n        removeEvent={removeEvent}\r\n        calendarApi={calendarApi}\r\n        refetchEvents={refetchEvents}\r\n        calendarsColor={calendarsColor}\r\n        handleAddEventSidebar={handleAddEventSidebar}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default CalendarComponent","// ** React Imports\r\nimport { forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst Avatar = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    img,\r\n    size,\r\n    icon,\r\n    color,\r\n    status,\r\n    badgeUp,\r\n    content,\r\n    tag: Tag,\r\n    initials,\r\n    imgWidth,\r\n    className,\r\n    badgeText,\r\n    imgHeight,\r\n    badgeColor,\r\n    imgClassName,\r\n    contentStyles,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** Function to extract initials from content\r\n  const getInitials = str => {\r\n    const results = []\r\n    const wordArray = str.split(' ')\r\n    wordArray.forEach(e => {\r\n      results.push(e[0])\r\n    })\r\n    return results.join('')\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames('avatar', {\r\n        [className]: className,\r\n        [`bg-${color}`]: color,\r\n        [`avatar-${size}`]: size\r\n      })}\r\n      ref={ref}\r\n      {...rest}\r\n    >\r\n      {img === false || img === undefined ? (\r\n        <span\r\n          className={classnames('avatar-content', {\r\n            'position-relative': badgeUp\r\n          })}\r\n          style={contentStyles}\r\n        >\r\n          {initials ? getInitials(content) : content}\r\n\r\n          {icon ? icon : null}\r\n          {badgeUp ? (\r\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\r\n              {badgeText ? badgeText : '0'}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n      ) : (\r\n        <img\r\n          className={classnames({\r\n            [imgClassName]: imgClassName\r\n          })}\r\n          src={img}\r\n          alt='avatarImg'\r\n          height={imgHeight && !size ? imgHeight : 32}\r\n          width={imgWidth && !size ? imgWidth : 32}\r\n        />\r\n      )}\r\n      {status ? (\r\n        <span\r\n          className={classnames({\r\n            [`avatar-status-${status}`]: status,\r\n            [`avatar-status-${size}`]: size\r\n          })}\r\n        ></span>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n})\r\n\r\nexport default Avatar\r\n\r\n// ** PropTypes\r\nAvatar.propTypes = {\r\n  icon: Proptypes.node,\r\n  src: Proptypes.string,\r\n  badgeUp: Proptypes.bool,\r\n  content: Proptypes.string,\r\n  badgeText: Proptypes.string,\r\n  className: Proptypes.string,\r\n  imgClassName: Proptypes.string,\r\n  contentStyles: Proptypes.object,\r\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\r\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\r\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\r\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  badgeColor: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  color: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  initials(props) {\r\n    if (props['initials'] && props['content'] === undefined) {\r\n      return new Error('content prop is required with initials prop.')\r\n    }\r\n    if (props['initials'] && typeof props['content'] !== 'string') {\r\n      return new Error('content prop must be a string.')\r\n    }\r\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\r\n      return new Error('initials must be a boolean!')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nAvatar.defaultProps = {\r\n  tag: 'div'\r\n}\r\n"],"sourceRoot":""}