{"version":3,"sources":["views/forms/wizard/steps-with-validation/Address.js","views/forms/wizard/steps-with-validation/PersonalInfo.js","views/forms/wizard/steps-with-validation/AccountDetails.js","views/forms/wizard/WizardHorizontal.js","views/forms/wizard/index.js","@core/components/breadcrumbs/index.js","@core/components/wizard/index.js"],"names":["Address","stepper","type","useForm","register","errors","handleSubmit","trigger","className","Form","onSubmit","isObjEmpty","next","Row","FormGroup","tag","Col","md","Label","for","Input","id","name","placeholder","innerRef","required","classnames","Button","Ripple","color","size","PersonalInfo","onClick","previous","AccountDetails","SignupSchema","yup","shape","email","oneOf","resolver","yupResolver","outline","disabled","WizardHorizontal","useState","setStepper","ref","useRef","steps","title","subtitle","content","instance","el","Wizard","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","to","active","forwardRef","separator","options","activeIndex","setActiveIndex","useEffect","Stepper","current","addEventListener","event","detail","indexStep","map","step","index","length","crossed","icon","defaultProps"],"mappings":"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","file":"static/js/139.ae31ff9b.chunk.js","sourcesContent":["import { Fragment } from 'react'\r\nimport classnames from 'classnames'\r\nimport { isObjEmpty } from '@utils'\r\nimport { useForm } from 'react-hook-form'\r\nimport { ArrowLeft, ArrowRight } from 'react-feather'\r\nimport { Label, FormGroup, Row, Col, Button, Form, Input } from 'reactstrap'\r\n\r\nconst Address = ({ stepper, type }) => {\r\n  const { register, errors, handleSubmit, trigger } = useForm()\r\n\r\n  const onSubmit = () => {\r\n    trigger()\r\n    if (isObjEmpty(errors)) {\r\n      stepper.next()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='content-header'>\r\n        <h5 className='mb-0'>Address</h5>\r\n        <small>Enter the Screen Physical Address</small>\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`address-${type}`}>\r\n              Address\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              id={`address-${type}`}\r\n              name={`address-${type}`}\r\n              placeholder='123 Street, City, Zip Code'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`address-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`landmark-${type}`}>\r\n              Closest Landmark\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              name={`landmark-${type}`}\r\n              id={`landmark-${type}`}\r\n              placeholder='Name a nearby landmark if any'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`landmark-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`pincode-${type}`}>\r\n              Pincode\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              name={`pincode-${type}`}\r\n              id={`pincode-${type}`}\r\n              placeholder='type a six digit pincode and save it on a note'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`pincode-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`city-${type}`}>\r\n              City\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              name={`city-${type}`}\r\n              id={`city-${type}`}\r\n              placeholder='New York'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`city-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <div className='d-flex justify-content-between'>\r\n          <Button.Ripple color='primary' className='btn-prev'>\r\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\r\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\r\n          </Button.Ripple>\r\n          <Button.Ripple type='submit' color='primary' className='btn-next'>\r\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\r\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\r\n          </Button.Ripple>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Address\r\n","import { Fragment } from 'react'\r\nimport Select from 'react-select'\r\nimport classnames from 'classnames'\r\nimport { useForm } from 'react-hook-form'\r\nimport { ArrowLeft, ArrowRight } from 'react-feather'\r\nimport { selectThemeColors, isObjEmpty } from '@utils'\r\nimport { Label, FormGroup, Row, Col, Button, Form, Input } from 'reactstrap'\r\n\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\n\r\nconst PersonalInfo = ({ stepper, type }) => {\r\n  const { register, errors, handleSubmit, trigger } = useForm()\r\n\r\n  const onSubmit = () => {\r\n    trigger()\r\n    if (isObjEmpty(errors)) {\r\n      stepper.next()\r\n    }\r\n  }\r\n\r\n  const countryOptions = [\r\n    { value: 'UK', label: 'UK' },\r\n    { value: 'USA', label: 'USA' },\r\n    { value: 'Spain', label: 'Spain' },\r\n    { value: 'Canada', label: 'Canada' },\r\n    { value: 'Italy', label: 'Italy' },\r\n    { value: 'Australia', label: 'Australia' }\r\n  ]\r\n\r\n  const languageOptions = [\r\n    { value: 'English', label: 'English' },\r\n    { value: 'French', label: 'French' },\r\n    { value: 'Spanish', label: 'Spanish' },\r\n    { value: 'Italian', label: 'Italian' },\r\n    { value: 'Japanese', label: 'Japanese' }\r\n  ]\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='content-header'>\r\n        <h5 className='mb-0'>Payment Info</h5>\r\n        <small>Enter Your Business Info.</small>\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`first-name-${type}`}>\r\n              STX Address\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              name={`first-name-${type}`}\r\n              id={`first-name-${type}`}\r\n              placeholder='SP31234567890...'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`first-name-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`last-name-${type}`}>\r\n              Screen SerialNumber\r\n            </Label>\r\n            <Input\r\n              type='text'\r\n              name={`last-name-${type}`}\r\n              id={`last-name-${type}`}\r\n              placeholder='12345'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`last-name-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <div className='d-flex justify-content-between'>\r\n          <Button.Ripple color='primary' className='btn-prev' onClick={() => stepper.previous()}>\r\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\r\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\r\n          </Button.Ripple>\r\n          <Button.Ripple type='submit' color='primary' className='btn-next'>\r\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\r\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\r\n          </Button.Ripple>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PersonalInfo\r\n","import * as yup from 'yup'\r\nimport { Fragment } from 'react'\r\nimport classnames from 'classnames'\r\nimport { isObjEmpty } from '@utils'\r\nimport { useForm } from 'react-hook-form'\r\nimport { ArrowLeft, ArrowRight } from 'react-feather'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Form, Label, Input, FormGroup, Row, Col, Button } from 'reactstrap'\r\n\r\nconst AccountDetails = ({ stepper, type }) => {\r\n  const SignupSchema = yup.object().shape({\r\n    [`username-${type}`]: yup.string().required(),\r\n    [`email-${type}`]: yup.string().email().required(),\r\n    [`password-val-${type}`]: yup.string().required(),\r\n    'confirm-password-val': yup\r\n      .string()\r\n      .required()\r\n      .oneOf([yup.ref(`password-val-${type}`), null], 'Passwords must match')\r\n  })\r\n\r\n  const { register, errors, handleSubmit, trigger } = useForm({\r\n    resolver: yupResolver(SignupSchema)\r\n  })\r\n\r\n  const onSubmit = () => {\r\n    trigger()\r\n    if (isObjEmpty(errors)) {\r\n      stepper.next()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='content-header'>\r\n        <h5 className='mb-0'>Screen Details</h5>\r\n        <small className='text-muted'>Enter Your Account Details.</small>\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`username-${type}`}>\r\n              Username\r\n            </Label>\r\n            <Input\r\n              name={`username-${type}`}\r\n              id={`username-${type}`}\r\n              placeholder='johndoe'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`username-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`email-${type}`}>\r\n              Email\r\n            </Label>\r\n            <Input\r\n              type='email'\r\n              name={`email-${type}`}\r\n              id={`email-${type}`}\r\n              placeholder='yourbusiness@email.com'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`email-${type}`] })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <Row>\r\n          <div className='form-group form-password-toggle col-md-6'>\r\n            <Label className='form-label' for={`password-val-${type}`}>\r\n              Password\r\n            </Label>\r\n            <Input\r\n              type='password'\r\n              name={`password-val-${type}`}\r\n              id={`password-val-${type}`}\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors[`password-val-${type}`] })}\r\n            />\r\n          </div>\r\n          <div className='form-group form-password-toggle col-md-6'>\r\n            <Label className='form-label' for='confirm-password-val'>\r\n              Confirm Password\r\n            </Label>\r\n            <Input\r\n              type='password'\r\n              name='confirm-password-val'\r\n              id='confirm-password-val'\r\n              innerRef={register({ required: true })}\r\n              className={classnames({ 'is-invalid': errors['confirm-password-val'] })}\r\n            />\r\n          </div>\r\n        </Row>\r\n        <div className='d-flex justify-content-between'>\r\n          <Button.Ripple color='secondary' className='btn-prev' outline disabled>\r\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\r\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\r\n          </Button.Ripple>\r\n          <Button.Ripple type='submit' color='primary' className='btn-next'>\r\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\r\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\r\n          </Button.Ripple>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AccountDetails\r\n","import { useRef, useState } from 'react'\r\nimport Wizard from '@components/wizard'\r\nimport { ArrowRight } from 'react-feather'\r\nimport Address from './steps-with-validation/Address'\r\nimport PersonalInfo from './steps-with-validation/PersonalInfo'\r\nimport AccountDetails from './steps-with-validation/AccountDetails'\r\n\r\nconst WizardHorizontal = () => {\r\n  const [stepper, setStepper] = useState(null)\r\n  const ref = useRef(null)\r\n\r\n  const steps = [\r\n    {\r\n      id: 'account-details',\r\n      title: 'Screen Details',\r\n      subtitle: 'Register Your Screen.',\r\n      content: <AccountDetails stepper={stepper} type='wizard-horizontal' />\r\n    },\r\n    {\r\n      id: 'personal-info',\r\n      title: 'Payment Info',\r\n      subtitle: 'Add Wallet Address',\r\n      content: <PersonalInfo stepper={stepper} type='wizard-horizontal' />\r\n    },\r\n    {\r\n      id: 'step-address',\r\n      title: 'Location',\r\n      subtitle: 'Add Screen Location',\r\n      content: <Address stepper={stepper} type='wizard-horizontal' />\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <div className='horizontal-wizard'>\r\n      <Wizard instance={el => setStepper(el)} ref={ref} steps={steps} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WizardHorizontal\r\n","import { Fragment } from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport WizardModern from './WizardModern'\r\nimport WizardVertical from './WizardVertical'\r\nimport WizardHorizontal from './WizardHorizontal'\r\nimport WizardModernVertical from './WizardModernVertical'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\nconst Wizard = () => {\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='New Screen' breadCrumbParent='Form' breadCrumbActive='New Screen' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <WizardHorizontal />\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Wizard\r\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem tag='li' className='text-primary'>\n                  {breadCrumbParent}\n                </BreadcrumbItem>\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\n        <div className='form-group breadcrum-right dropdown'>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n","// ** React Imports\nimport { useEffect, useState, Fragment, forwardRef } from 'react'\n\n// ** Third Party Components\nimport Stepper from 'bs-stepper'\nimport classnames from 'classnames'\nimport { PropTypes } from 'prop-types'\nimport { ChevronRight } from 'react-feather'\n\n// ** Styles\nimport 'bs-stepper/dist/css/bs-stepper.min.css'\nimport '../../../@core/scss/base/plugins/forms/form-wizard.scss'\n\nconst Wizard = forwardRef((props, ref) => {\n  // ** Props\n  const { type, className, steps, separator, options, instance } = props\n\n  // ** State\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  // ** Vars\n  let stepper = null\n\n  // ** Step change listener on mount\n  useEffect(() => {\n    stepper = new Stepper(ref.current, options)\n\n    ref.current.addEventListener('shown.bs-stepper', function (event) {\n      setActiveIndex(event.detail.indexStep)\n    })\n\n    if (instance) {\n      instance(stepper)\n    }\n  }, [])\n\n  // ** Renders Wizard Header\n  const renderHeader = () => {\n    return steps.map((step, index) => {\n      return (\n        <Fragment key={step.id}>\n          {index !== 0 && index !== steps.length ? <div className='line'>{separator}</div> : null}\n          <div\n            className={classnames('step', {\n              crossed: activeIndex > index,\n              active: index === activeIndex\n            })}\n            data-target={`#${step.id}`}\n          >\n            <button type='button' className='step-trigger'>\n              <span className='bs-stepper-box'>{step.icon ? step.icon : index + 1}</span>\n              <span className='bs-stepper-label'>\n                <span className='bs-stepper-title'>{step.title}</span>\n                {step.subtitle ? <span className='bs-stepper-subtitle'>{step.subtitle}</span> : null}\n              </span>\n            </button>\n          </div>\n        </Fragment>\n      )\n    })\n  }\n\n  // ** Renders Wizard Content\n  const renderContent = () => {\n    return steps.map((step, index) => {\n      return (\n        <div\n          className={classnames('content', {\n            'active dstepper-block': activeIndex === index\n          })}\n          id={step.id}\n          key={step.id}\n        >\n          {step.content}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={classnames('bs-stepper', {\n        [className]: className,\n        vertical: type === 'vertical',\n        'vertical wizard-modern': type === 'modern-vertical',\n        'wizard-modern': type === 'modern-horizontal'\n      })}\n    >\n      <div className='bs-stepper-header'>{renderHeader()}</div>\n      <div className='bs-stepper-content'>{renderContent()}</div>\n    </div>\n  )\n})\n\nexport default Wizard\n\n// ** Default Props\nWizard.defaultProps = {\n  type: 'horizontal',\n  separator: <ChevronRight size={17} />,\n  options: {}\n}\n\n// ** PropTypes\nWizard.propTypes = {\n  type: PropTypes.string,\n  instance: PropTypes.func,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  separator: PropTypes.element,\n  steps: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      subtitle: PropTypes.string,\n      icon: PropTypes.any,\n      content: PropTypes.any.isRequired\n    })\n  ).isRequired\n}\n"],"sourceRoot":""}