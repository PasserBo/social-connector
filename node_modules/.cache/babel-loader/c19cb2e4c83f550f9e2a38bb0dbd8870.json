{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default from 'react';\nimport { Box } from '../box/index.esm.js';\nimport Highlight from 'prism-react-renderer';\nimport { Flex } from '../flex/index.esm.js';\nimport { startPad } from '../utils/index.esm.js';\nimport '../hooks/use-controllable.esm.js';\nimport '../hooks/use-previous.esm.js';\nimport '../hooks/use-disclosure.esm.js';\nimport '../hooks/use-latest-ref.esm.js';\nimport '../hooks/use-event-listener.esm.js';\nimport '../hooks/use-force-update.esm.js';\nimport '../hooks/use-id.esm.js';\nimport '../hooks/use-merge-refs.esm.js';\nimport '../hooks/use-safe-layout-effect.esm.js';\nimport '../hooks/use-timeout.esm.js';\nimport { useTheme } from '../hooks/use-theme.esm.js';\nimport '../hooks/use-color-mode.esm.js';\nimport { theme } from './prism-theme.esm.js';\nvar lineNumberWidth = 60;\n\nvar getLineNumber = function getLineNumber(n, length) {\n  return startPad(n + 1, length.toString().length);\n};\n\nvar Tokens = function Tokens(_ref) {\n  var tokens = _ref.tokens,\n      getTokenProps = _ref.getTokenProps,\n      showLineNumbers = _ref.showLineNumbers,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"tokens\", \"getTokenProps\", \"showLineNumbers\"]);\n\n  var bsTheme = useTheme();\n  var pl = \"calc(\" + (showLineNumbers ? lineNumberWidth : '0') + \"px + \" + (bsTheme.sizes['base'] || '16px') + \")\";\n  return React__default.createElement(Box, Object.assign({\n    pl: pl,\n    pr: \"base\",\n    position: \"relative\",\n    zIndex: 2\n  }, rest), tokens.map(function (token, key) {\n    return React__default.createElement(Box, Object.assign({\n      py: \"2px\",\n      display: \"inline-block\"\n    }, getTokenProps({\n      token: token,\n      key: key\n    })));\n  }));\n};\n\nvar LineNumber = function LineNumber(_ref2) {\n  var number = _ref2.number,\n      length = _ref2.length,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"number\", \"length\"]);\n\n  return React__default.createElement(Flex, Object.assign({\n    textAlign: \"right\",\n    pr: \"base\",\n    pl: \"base\",\n    width: lineNumberWidth,\n    borderRight: \"1px solid\",\n    borderRightColor: \"inherit\",\n    color: \"ink.400\",\n    flexShrink: 0,\n    style: {\n      userSelect: 'none'\n    },\n    position: \"absolute\",\n    left: 0,\n    height: \"100%\",\n    align: \"baseline\",\n    justify: \"center\",\n    zIndex: 1\n  }, rest), getLineNumber(number, length));\n};\n\nvar Line = function Line(_ref3) {\n  var tokens = _ref3.tokens,\n      getTokenProps = _ref3.getTokenProps,\n      index = _ref3.index,\n      length = _ref3.length,\n      showLineNumbers = _ref3.showLineNumbers,\n      hideLineHover = _ref3.hideLineHover,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"tokens\", \"getTokenProps\", \"index\", \"length\", \"showLineNumbers\", \"hideLineHover\"]);\n\n  return React__default.createElement(Flex, Object.assign({\n    height: \"loose\",\n    align: \"baseline\",\n    borderColor: \"ink.900\",\n    _hover: hideLineHover ? undefined : {\n      bg: ['unset', 'unset', 'ink.900'],\n      borderColor: ['ink.900', 'ink.900', 'ink.600']\n    },\n    position: \"relative\"\n  }, rest), showLineNumbers ? React__default.createElement(LineNumber, {\n    number: index,\n    length: length\n  }) : null, React__default.createElement(Tokens, {\n    showLineNumbers: showLineNumbers,\n    getTokenProps: getTokenProps,\n    tokens: tokens\n  }));\n};\n\nvar Lines = function Lines(_ref4) {\n  var lines = _ref4.tokens,\n      getLineProps = _ref4.getLineProps,\n      getTokenProps = _ref4.getTokenProps,\n      className = _ref4.className,\n      showLineNumbers = _ref4.showLineNumbers,\n      hideLineHover = _ref4.hideLineHover;\n  return React__default.createElement(Box, {\n    display: \"block\",\n    className: className\n  }, React__default.createElement(Box, {\n    display: \"block\",\n    style: {\n      fontFamily: 'Fira Code'\n    }\n  }, lines.map(function (tokens, i) {\n    return React__default.createElement(Line, Object.assign({\n      index: i,\n      tokens: tokens,\n      getTokenProps: getTokenProps,\n      length: lines.length + 1,\n      showLineNumbers: showLineNumbers,\n      hideLineHover: hideLineHover || lines.length < 3\n    }, getLineProps({\n      line: tokens,\n      key: i\n    })));\n  })));\n};\n\nvar Highlighter = /*#__PURE__*/React__default.memo(function (_ref5) {\n  var code = _ref5.code,\n      _ref5$language = _ref5.language,\n      language = _ref5$language === void 0 ? 'clarity' : _ref5$language,\n      showLineNumbers = _ref5.showLineNumbers,\n      hideLineHover = _ref5.hideLineHover,\n      Prism = _ref5.Prism;\n  return React__default.createElement(Highlight, {\n    theme: theme,\n    code: code,\n    language: language,\n    Prism: Prism\n  }, function (props) {\n    return React__default.createElement(Lines, Object.assign({\n      showLineNumbers: showLineNumbers,\n      hideLineHover: hideLineHover\n    }, props));\n  });\n});\nHighlighter.displayName = 'Highlighter';\nexport { Highlighter };","map":{"version":3,"sources":["../../src/highlighter/index.tsx"],"names":["lineNumberWidth","getLineNumber","startPad","n","length","Tokens","tokens","getTokenProps","showLineNumbers","rest","bsTheme","useTheme","pl","pr","position","zIndex","py","display","token","key","LineNumber","number","React","textAlign","width","borderRight","borderRightColor","color","flexShrink","style","userSelect","left","height","align","justify","Line","index","hideLineHover","borderColor","_hover","bg","Lines","lines","getLineProps","className","fontFamily","i","line","Highlighter","code","language","Prism","theme"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Highlight from 'prism-react-renderer';\nimport { Box } from '../box';\nimport { Flex } from '../flex';\nimport { startPad } from '../utils';\nimport { useTheme } from '../hooks';\n\nimport { GrammaticalToken, GetGrammaticalTokenProps, RenderProps, Language } from './types';\nimport { theme } from './prism-theme';\nimport './clarity';\n\nexport * from './types';\n\nconst lineNumberWidth = 60;\nconst getLineNumber = (n: number, length: number) => startPad(n + 1, length.toString().length);\n\nconst Tokens = ({\n  tokens,\n  getTokenProps,\n  showLineNumbers,\n  ...rest\n}: {\n  tokens: GrammaticalToken[];\n  getTokenProps: GetGrammaticalTokenProps;\n  showLineNumbers?: boolean;\n}) => {\n  const bsTheme = useTheme();\n  const pl = `calc(${showLineNumbers ? lineNumberWidth : '0'}px + ${\n    (bsTheme as any).sizes['base'] || '16px'\n  })`;\n\n  return (\n    <Box pl={pl} pr=\"base\" position=\"relative\" zIndex={2} {...rest}>\n      {tokens.map((token, key) => (\n        <Box py=\"2px\" display=\"inline-block\" {...getTokenProps({ token, key })} />\n      ))}\n    </Box>\n  );\n};\nconst LineNumber = ({ number, length, ...rest }: { number: number; length: number }) => (\n  <Flex\n    textAlign=\"right\"\n    pr=\"base\"\n    pl=\"base\"\n    width={lineNumberWidth}\n    borderRight=\"1px solid\"\n    borderRightColor=\"inherit\"\n    color=\"ink.400\"\n    flexShrink={0}\n    style={{ userSelect: 'none' }}\n    position=\"absolute\"\n    left={0}\n    height=\"100%\"\n    align=\"baseline\"\n    justify=\"center\"\n    zIndex={1}\n    {...rest}\n  >\n    {getLineNumber(number, length)}\n  </Flex>\n);\n\nconst Line = ({\n  tokens,\n  getTokenProps,\n  index,\n  length,\n  showLineNumbers,\n  hideLineHover,\n  ...rest\n}: {\n  tokens: GrammaticalToken[];\n  index: number;\n  length: number;\n  getTokenProps: GetGrammaticalTokenProps;\n  showLineNumbers?: boolean;\n  hideLineHover?: boolean;\n}) => {\n  return (\n    <Flex\n      height=\"loose\"\n      align=\"baseline\"\n      borderColor=\"ink.900\"\n      _hover={\n        hideLineHover\n          ? undefined\n          : { bg: ['unset', 'unset', 'ink.900'], borderColor: ['ink.900', 'ink.900', 'ink.600'] }\n      }\n      position=\"relative\"\n      {...rest}\n    >\n      {showLineNumbers ? <LineNumber number={index} length={length} /> : null}\n      <Tokens showLineNumbers={showLineNumbers} getTokenProps={getTokenProps} tokens={tokens} />\n    </Flex>\n  );\n};\n\nconst Lines = ({\n  tokens: lines,\n  getLineProps,\n  getTokenProps,\n  className,\n  showLineNumbers,\n  hideLineHover,\n}: { showLineNumbers?: boolean; hideLineHover?: boolean } & RenderProps) => {\n  return (\n    <Box display=\"block\" className={className}>\n      <Box display=\"block\" style={{ fontFamily: 'Fira Code' }}>\n        {lines.map((tokens, i) => (\n          <Line\n            index={i}\n            tokens={tokens}\n            getTokenProps={getTokenProps}\n            length={lines.length + 1}\n            showLineNumbers={showLineNumbers}\n            hideLineHover={hideLineHover || lines.length < 3}\n            {...getLineProps({ line: tokens, key: i })}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\ntype PrismToken = {\n  type: string;\n  content: (PrismToken | string)[] | string;\n};\ntype PrismGrammar = {\n  [key: string]: any;\n};\ntype LanguageDict = { [lang in Language]: PrismGrammar };\ntype PrismLib = {\n  languages: LanguageDict;\n  tokenize: (code: string, grammar: PrismGrammar, language: Language) => PrismToken[] | string[];\n  highlight: (code: string, grammar: PrismGrammar, language: Language) => string;\n};\n\nexport interface HighlighterProps {\n  code: string;\n  language?: Language;\n  showLineNumbers?: boolean;\n  hideLineHover?: boolean;\n  Prism: PrismLib;\n}\n\nexport const Highlighter = React.memo(\n  ({ code, language = 'clarity', showLineNumbers, hideLineHover, Prism }: HighlighterProps) => {\n    return (\n      <Highlight theme={theme} code={code} language={language as any} Prism={Prism as any}>\n        {props => (\n          <Lines showLineNumbers={showLineNumbers} hideLineHover={hideLineHover} {...props} />\n        )}\n      </Highlight>\n    );\n  }\n);\n\nHighlighter.displayName = 'Highlighter';\n"]},"metadata":{},"sourceType":"module"}