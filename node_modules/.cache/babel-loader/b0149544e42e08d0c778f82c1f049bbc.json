{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar bufferutils_1 = require('./bufferutils');\n\nvar bcrypto = require('./crypto');\n\nvar bscript = require('./script');\n\nvar script_1 = require('./script');\n\nvar types = require('./types');\n\nvar typeforce = require('typeforce');\n\nvar varuint = require('varuint-bitcoin');\n\nfunction varSliceSize(someScript) {\n  var length = someScript.length;\n  return varuint.encodingLength(length) + length;\n}\n\nfunction vectorSize(someVector) {\n  var length = someVector.length;\n  return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n    return sum + varSliceSize(witness);\n  }, 0);\n}\n\nvar EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nvar EMPTY_WITNESS = [];\nvar ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\nvar ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex');\nvar VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nvar BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX\n};\n\nfunction isOutput(out) {\n  return out.value !== undefined;\n}\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n\n    this.version = 1;\n    this.locktime = 0;\n    this.ins = [];\n    this.outs = [];\n  }\n\n  _createClass(Transaction, [{\n    key: \"isCoinbase\",\n    value: function isCoinbase() {\n      return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(hash, index, sequence, scriptSig) {\n      typeforce(types.tuple(types.Hash256bit, types.UInt32, types.maybe(types.UInt32), types.maybe(types.Buffer)), arguments);\n\n      if (types.Null(sequence)) {\n        sequence = Transaction.DEFAULT_SEQUENCE;\n      } // Add the input and return the input's index\n\n\n      return this.ins.push({\n        hash: hash,\n        index: index,\n        script: scriptSig || EMPTY_SCRIPT,\n        sequence: sequence,\n        witness: EMPTY_WITNESS\n      }) - 1;\n    }\n  }, {\n    key: \"addOutput\",\n    value: function addOutput(scriptPubKey, value) {\n      typeforce(types.tuple(types.Buffer, types.Satoshi), arguments); // Add the output and return the output's index\n\n      return this.outs.push({\n        script: scriptPubKey,\n        value: value\n      }) - 1;\n    }\n  }, {\n    key: \"hasWitnesses\",\n    value: function hasWitnesses() {\n      return this.ins.some(function (x) {\n        return x.witness.length !== 0;\n      });\n    }\n  }, {\n    key: \"weight\",\n    value: function weight() {\n      var base = this.byteLength(false);\n      var total = this.byteLength(true);\n      return base * 3 + total;\n    }\n  }, {\n    key: \"virtualSize\",\n    value: function virtualSize() {\n      return Math.ceil(this.weight() / 4);\n    }\n  }, {\n    key: \"byteLength\",\n    value: function byteLength() {\n      var _ALLOW_WITNESS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n\n      return (hasWitnesses ? 10 : 8) + varuint.encodingLength(this.ins.length) + varuint.encodingLength(this.outs.length) + this.ins.reduce(function (sum, input) {\n        return sum + 40 + varSliceSize(input.script);\n      }, 0) + this.outs.reduce(function (sum, output) {\n        return sum + 8 + varSliceSize(output.script);\n      }, 0) + (hasWitnesses ? this.ins.reduce(function (sum, input) {\n        return sum + vectorSize(input.witness);\n      }, 0) : 0);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var newTx = new Transaction();\n      newTx.version = this.version;\n      newTx.locktime = this.locktime;\n      newTx.ins = this.ins.map(function (txIn) {\n        return {\n          hash: txIn.hash,\n          index: txIn.index,\n          script: txIn.script,\n          sequence: txIn.sequence,\n          witness: txIn.witness\n        };\n      });\n      newTx.outs = this.outs.map(function (txOut) {\n        return {\n          script: txOut.script,\n          value: txOut.value\n        };\n      });\n      return newTx;\n    }\n    /**\n     * Hash transaction for signing a specific input.\n     *\n     * Bitcoin uses a different hash for each signed transaction input.\n     * This method copies the transaction, makes the necessary changes based on the\n     * hashType, and then hashes the result.\n     * This hash can then be used to sign the provided transaction input.\n     */\n\n  }, {\n    key: \"hashForSignature\",\n    value: function hashForSignature(inIndex, prevOutScript, hashType) {\n      typeforce(types.tuple(types.UInt32, types.Buffer,\n      /* types.UInt8 */\n      types.Number), arguments); // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n\n      if (inIndex >= this.ins.length) return ONE; // ignore OP_CODESEPARATOR\n\n      var ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n        return x !== script_1.OPS.OP_CODESEPARATOR;\n      }));\n      var txTmp = this.clone(); // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n\n      if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n        txTmp.outs = []; // ignore sequence numbers (except at inIndex)\n\n        txTmp.ins.forEach(function (input, i) {\n          if (i === inIndex) return;\n          input.sequence = 0;\n        }); // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n      } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n        // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n        if (inIndex >= this.outs.length) return ONE; // truncate outputs after\n\n        txTmp.outs.length = inIndex + 1; // \"blank\" outputs before\n\n        for (var i = 0; i < inIndex; i++) {\n          txTmp.outs[i] = BLANK_OUTPUT;\n        } // ignore sequence numbers (except at inIndex)\n\n\n        txTmp.ins.forEach(function (input, y) {\n          if (y === inIndex) return;\n          input.sequence = 0;\n        });\n      } // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n\n\n      if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n        txTmp.ins = [txTmp.ins[inIndex]];\n        txTmp.ins[0].script = ourScript; // SIGHASH_ALL: only ignore input scripts\n      } else {\n        // \"blank\" others input scripts\n        txTmp.ins.forEach(function (input) {\n          input.script = EMPTY_SCRIPT;\n        });\n        txTmp.ins[inIndex].script = ourScript;\n      } // serialize and hash\n\n\n      var buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);\n      buffer.writeInt32LE(hashType, buffer.length - 4);\n\n      txTmp.__toBuffer(buffer, 0, false);\n\n      return bcrypto.hash256(buffer);\n    }\n  }, {\n    key: \"hashForWitnessV0\",\n    value: function hashForWitnessV0(inIndex, prevOutScript, value, hashType) {\n      typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n      var tbuffer = Buffer.from([]);\n      var bufferWriter;\n      var hashOutputs = ZERO;\n      var hashPrevouts = ZERO;\n      var hashSequence = ZERO;\n\n      if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n        tbuffer = Buffer.allocUnsafe(36 * this.ins.length);\n        bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n        this.ins.forEach(function (txIn) {\n          bufferWriter.writeSlice(txIn.hash);\n          bufferWriter.writeUInt32(txIn.index);\n        });\n        hashPrevouts = bcrypto.hash256(tbuffer);\n      }\n\n      if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n        tbuffer = Buffer.allocUnsafe(4 * this.ins.length);\n        bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n        this.ins.forEach(function (txIn) {\n          bufferWriter.writeUInt32(txIn.sequence);\n        });\n        hashSequence = bcrypto.hash256(tbuffer);\n      }\n\n      if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n        var txOutsSize = this.outs.reduce(function (sum, output) {\n          return sum + 8 + varSliceSize(output.script);\n        }, 0);\n        tbuffer = Buffer.allocUnsafe(txOutsSize);\n        bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n        this.outs.forEach(function (out) {\n          bufferWriter.writeUInt64(out.value);\n          bufferWriter.writeVarSlice(out.script);\n        });\n        hashOutputs = bcrypto.hash256(tbuffer);\n      } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n        var output = this.outs[inIndex];\n        tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));\n        bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n        bufferWriter.writeUInt64(output.value);\n        bufferWriter.writeVarSlice(output.script);\n        hashOutputs = bcrypto.hash256(tbuffer);\n      }\n\n      tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      var input = this.ins[inIndex];\n      bufferWriter.writeUInt32(this.version);\n      bufferWriter.writeSlice(hashPrevouts);\n      bufferWriter.writeSlice(hashSequence);\n      bufferWriter.writeSlice(input.hash);\n      bufferWriter.writeUInt32(input.index);\n      bufferWriter.writeVarSlice(prevOutScript);\n      bufferWriter.writeUInt64(value);\n      bufferWriter.writeUInt32(input.sequence);\n      bufferWriter.writeSlice(hashOutputs);\n      bufferWriter.writeUInt32(this.locktime);\n      bufferWriter.writeUInt32(hashType);\n      return bcrypto.hash256(tbuffer);\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash(forWitness) {\n      // wtxid for coinbase is always 32 bytes of 0x00\n      if (forWitness && this.isCoinbase()) return Buffer.alloc(32, 0);\n      return bcrypto.hash256(this.__toBuffer(undefined, undefined, forWitness));\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      // transaction hash's are displayed in reverse order\n      return bufferutils_1.reverseBuffer(this.getHash(false)).toString('hex');\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer(buffer, initialOffset) {\n      return this.__toBuffer(buffer, initialOffset, true);\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return this.toBuffer(undefined, undefined).toString('hex');\n    }\n  }, {\n    key: \"setInputScript\",\n    value: function setInputScript(index, scriptSig) {\n      typeforce(types.tuple(types.Number, types.Buffer), arguments);\n      this.ins[index].script = scriptSig;\n    }\n  }, {\n    key: \"setWitness\",\n    value: function setWitness(index, witness) {\n      typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n      this.ins[index].witness = witness;\n    }\n  }, {\n    key: \"__toBuffer\",\n    value: function __toBuffer(buffer, initialOffset) {\n      var _ALLOW_WITNESS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!buffer) buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));\n      var bufferWriter = new bufferutils_1.BufferWriter(buffer, initialOffset || 0);\n      bufferWriter.writeInt32(this.version);\n\n      var hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n\n      if (hasWitnesses) {\n        bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n        bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n      }\n\n      bufferWriter.writeVarInt(this.ins.length);\n      this.ins.forEach(function (txIn) {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n        bufferWriter.writeVarSlice(txIn.script);\n        bufferWriter.writeUInt32(txIn.sequence);\n      });\n      bufferWriter.writeVarInt(this.outs.length);\n      this.outs.forEach(function (txOut) {\n        if (isOutput(txOut)) {\n          bufferWriter.writeUInt64(txOut.value);\n        } else {\n          bufferWriter.writeSlice(txOut.valueBuffer);\n        }\n\n        bufferWriter.writeVarSlice(txOut.script);\n      });\n\n      if (hasWitnesses) {\n        this.ins.forEach(function (input) {\n          bufferWriter.writeVector(input.witness);\n        });\n      }\n\n      bufferWriter.writeUInt32(this.locktime); // avoid slicing unless necessary\n\n      if (initialOffset !== undefined) return buffer.slice(initialOffset, bufferWriter.offset);\n      return buffer;\n    }\n  }], [{\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer, _NO_STRICT) {\n      var bufferReader = new bufferutils_1.BufferReader(buffer);\n      var tx = new Transaction();\n      tx.version = bufferReader.readInt32();\n      var marker = bufferReader.readUInt8();\n      var flag = bufferReader.readUInt8();\n      var hasWitnesses = false;\n\n      if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG) {\n        hasWitnesses = true;\n      } else {\n        bufferReader.offset -= 2;\n      }\n\n      var vinLen = bufferReader.readVarInt();\n\n      for (var i = 0; i < vinLen; ++i) {\n        tx.ins.push({\n          hash: bufferReader.readSlice(32),\n          index: bufferReader.readUInt32(),\n          script: bufferReader.readVarSlice(),\n          sequence: bufferReader.readUInt32(),\n          witness: EMPTY_WITNESS\n        });\n      }\n\n      var voutLen = bufferReader.readVarInt();\n\n      for (var _i = 0; _i < voutLen; ++_i) {\n        tx.outs.push({\n          value: bufferReader.readUInt64(),\n          script: bufferReader.readVarSlice()\n        });\n      }\n\n      if (hasWitnesses) {\n        for (var _i2 = 0; _i2 < vinLen; ++_i2) {\n          tx.ins[_i2].witness = bufferReader.readVector();\n        } // was this pointless?\n\n\n        if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data');\n      }\n\n      tx.locktime = bufferReader.readUInt32();\n      if (_NO_STRICT) return tx;\n      if (bufferReader.offset !== buffer.length) throw new Error('Transaction has unexpected data');\n      return tx;\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      return Transaction.fromBuffer(Buffer.from(hex, 'hex'), false);\n    }\n  }, {\n    key: \"isCoinbaseHash\",\n    value: function isCoinbaseHash(buffer) {\n      typeforce(types.Hash256bit, buffer);\n\n      for (var i = 0; i < 32; ++i) {\n        if (buffer[i] !== 0) return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\nexports.Transaction = Transaction;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/bitcoinjs-lib/src/transaction.js"],"names":["Object","defineProperty","exports","value","bufferutils_1","require","bcrypto","bscript","script_1","types","typeforce","varuint","varSliceSize","someScript","length","encodingLength","vectorSize","someVector","reduce","sum","witness","EMPTY_SCRIPT","Buffer","allocUnsafe","EMPTY_WITNESS","ZERO","from","ONE","VALUE_UINT64_MAX","BLANK_OUTPUT","script","valueBuffer","isOutput","out","undefined","Transaction","version","locktime","ins","outs","isCoinbaseHash","hash","index","sequence","scriptSig","tuple","Hash256bit","UInt32","maybe","arguments","Null","DEFAULT_SEQUENCE","push","scriptPubKey","Satoshi","some","x","base","byteLength","total","Math","ceil","weight","_ALLOW_WITNESS","hasWitnesses","input","output","newTx","map","txIn","txOut","inIndex","prevOutScript","hashType","Number","ourScript","compile","decompile","filter","OPS","OP_CODESEPARATOR","txTmp","clone","SIGHASH_NONE","forEach","i","SIGHASH_SINGLE","y","SIGHASH_ANYONECANPAY","buffer","writeInt32LE","__toBuffer","hash256","tbuffer","bufferWriter","hashOutputs","hashPrevouts","hashSequence","BufferWriter","writeSlice","writeUInt32","txOutsSize","writeUInt64","writeVarSlice","forWitness","isCoinbase","alloc","reverseBuffer","getHash","toString","initialOffset","toBuffer","writeInt32","writeUInt8","ADVANCED_TRANSACTION_MARKER","ADVANCED_TRANSACTION_FLAG","writeVarInt","writeVector","slice","offset","_NO_STRICT","bufferReader","BufferReader","tx","readInt32","marker","readUInt8","flag","vinLen","readVarInt","readSlice","readUInt32","readVarSlice","voutLen","readUInt64","readVector","Error","hex","fromBuffer","SIGHASH_ALL"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bufferutils_1 = require('./bufferutils');\nconst bcrypto = require('./crypto');\nconst bscript = require('./script');\nconst script_1 = require('./script');\nconst types = require('./types');\nconst typeforce = require('typeforce');\nconst varuint = require('varuint-bitcoin');\nfunction varSliceSize(someScript) {\n  const length = someScript.length;\n  return varuint.encodingLength(length) + length;\n}\nfunction vectorSize(someVector) {\n  const length = someVector.length;\n  return (\n    varuint.encodingLength(length) +\n    someVector.reduce((sum, witness) => {\n      return sum + varSliceSize(witness);\n    }, 0)\n  );\n}\nconst EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nconst EMPTY_WITNESS = [];\nconst ZERO = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'hex',\n);\nconst ONE = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000001',\n  'hex',\n);\nconst VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nconst BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX,\n};\nfunction isOutput(out) {\n  return out.value !== undefined;\n}\nclass Transaction {\n  constructor() {\n    this.version = 1;\n    this.locktime = 0;\n    this.ins = [];\n    this.outs = [];\n  }\n  static fromBuffer(buffer, _NO_STRICT) {\n    const bufferReader = new bufferutils_1.BufferReader(buffer);\n    const tx = new Transaction();\n    tx.version = bufferReader.readInt32();\n    const marker = bufferReader.readUInt8();\n    const flag = bufferReader.readUInt8();\n    let hasWitnesses = false;\n    if (\n      marker === Transaction.ADVANCED_TRANSACTION_MARKER &&\n      flag === Transaction.ADVANCED_TRANSACTION_FLAG\n    ) {\n      hasWitnesses = true;\n    } else {\n      bufferReader.offset -= 2;\n    }\n    const vinLen = bufferReader.readVarInt();\n    for (let i = 0; i < vinLen; ++i) {\n      tx.ins.push({\n        hash: bufferReader.readSlice(32),\n        index: bufferReader.readUInt32(),\n        script: bufferReader.readVarSlice(),\n        sequence: bufferReader.readUInt32(),\n        witness: EMPTY_WITNESS,\n      });\n    }\n    const voutLen = bufferReader.readVarInt();\n    for (let i = 0; i < voutLen; ++i) {\n      tx.outs.push({\n        value: bufferReader.readUInt64(),\n        script: bufferReader.readVarSlice(),\n      });\n    }\n    if (hasWitnesses) {\n      for (let i = 0; i < vinLen; ++i) {\n        tx.ins[i].witness = bufferReader.readVector();\n      }\n      // was this pointless?\n      if (!tx.hasWitnesses())\n        throw new Error('Transaction has superfluous witness data');\n    }\n    tx.locktime = bufferReader.readUInt32();\n    if (_NO_STRICT) return tx;\n    if (bufferReader.offset !== buffer.length)\n      throw new Error('Transaction has unexpected data');\n    return tx;\n  }\n  static fromHex(hex) {\n    return Transaction.fromBuffer(Buffer.from(hex, 'hex'), false);\n  }\n  static isCoinbaseHash(buffer) {\n    typeforce(types.Hash256bit, buffer);\n    for (let i = 0; i < 32; ++i) {\n      if (buffer[i] !== 0) return false;\n    }\n    return true;\n  }\n  isCoinbase() {\n    return (\n      this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash)\n    );\n  }\n  addInput(hash, index, sequence, scriptSig) {\n    typeforce(\n      types.tuple(\n        types.Hash256bit,\n        types.UInt32,\n        types.maybe(types.UInt32),\n        types.maybe(types.Buffer),\n      ),\n      arguments,\n    );\n    if (types.Null(sequence)) {\n      sequence = Transaction.DEFAULT_SEQUENCE;\n    }\n    // Add the input and return the input's index\n    return (\n      this.ins.push({\n        hash,\n        index,\n        script: scriptSig || EMPTY_SCRIPT,\n        sequence: sequence,\n        witness: EMPTY_WITNESS,\n      }) - 1\n    );\n  }\n  addOutput(scriptPubKey, value) {\n    typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);\n    // Add the output and return the output's index\n    return (\n      this.outs.push({\n        script: scriptPubKey,\n        value,\n      }) - 1\n    );\n  }\n  hasWitnesses() {\n    return this.ins.some(x => {\n      return x.witness.length !== 0;\n    });\n  }\n  weight() {\n    const base = this.byteLength(false);\n    const total = this.byteLength(true);\n    return base * 3 + total;\n  }\n  virtualSize() {\n    return Math.ceil(this.weight() / 4);\n  }\n  byteLength(_ALLOW_WITNESS = true) {\n    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n    return (\n      (hasWitnesses ? 10 : 8) +\n      varuint.encodingLength(this.ins.length) +\n      varuint.encodingLength(this.outs.length) +\n      this.ins.reduce((sum, input) => {\n        return sum + 40 + varSliceSize(input.script);\n      }, 0) +\n      this.outs.reduce((sum, output) => {\n        return sum + 8 + varSliceSize(output.script);\n      }, 0) +\n      (hasWitnesses\n        ? this.ins.reduce((sum, input) => {\n            return sum + vectorSize(input.witness);\n          }, 0)\n        : 0)\n    );\n  }\n  clone() {\n    const newTx = new Transaction();\n    newTx.version = this.version;\n    newTx.locktime = this.locktime;\n    newTx.ins = this.ins.map(txIn => {\n      return {\n        hash: txIn.hash,\n        index: txIn.index,\n        script: txIn.script,\n        sequence: txIn.sequence,\n        witness: txIn.witness,\n      };\n    });\n    newTx.outs = this.outs.map(txOut => {\n      return {\n        script: txOut.script,\n        value: txOut.value,\n      };\n    });\n    return newTx;\n  }\n  /**\n   * Hash transaction for signing a specific input.\n   *\n   * Bitcoin uses a different hash for each signed transaction input.\n   * This method copies the transaction, makes the necessary changes based on the\n   * hashType, and then hashes the result.\n   * This hash can then be used to sign the provided transaction input.\n   */\n  hashForSignature(inIndex, prevOutScript, hashType) {\n    typeforce(\n      types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number),\n      arguments,\n    );\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n    if (inIndex >= this.ins.length) return ONE;\n    // ignore OP_CODESEPARATOR\n    const ourScript = bscript.compile(\n      bscript.decompile(prevOutScript).filter(x => {\n        return x !== script_1.OPS.OP_CODESEPARATOR;\n      }),\n    );\n    const txTmp = this.clone();\n    // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n    if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n      txTmp.outs = [];\n      // ignore sequence numbers (except at inIndex)\n      txTmp.ins.forEach((input, i) => {\n        if (i === inIndex) return;\n        input.sequence = 0;\n      });\n      // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n    } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n      // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n      if (inIndex >= this.outs.length) return ONE;\n      // truncate outputs after\n      txTmp.outs.length = inIndex + 1;\n      // \"blank\" outputs before\n      for (let i = 0; i < inIndex; i++) {\n        txTmp.outs[i] = BLANK_OUTPUT;\n      }\n      // ignore sequence numbers (except at inIndex)\n      txTmp.ins.forEach((input, y) => {\n        if (y === inIndex) return;\n        input.sequence = 0;\n      });\n    }\n    // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n      txTmp.ins = [txTmp.ins[inIndex]];\n      txTmp.ins[0].script = ourScript;\n      // SIGHASH_ALL: only ignore input scripts\n    } else {\n      // \"blank\" others input scripts\n      txTmp.ins.forEach(input => {\n        input.script = EMPTY_SCRIPT;\n      });\n      txTmp.ins[inIndex].script = ourScript;\n    }\n    // serialize and hash\n    const buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);\n    buffer.writeInt32LE(hashType, buffer.length - 4);\n    txTmp.__toBuffer(buffer, 0, false);\n    return bcrypto.hash256(buffer);\n  }\n  hashForWitnessV0(inIndex, prevOutScript, value, hashType) {\n    typeforce(\n      types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32),\n      arguments,\n    );\n    let tbuffer = Buffer.from([]);\n    let bufferWriter;\n    let hashOutputs = ZERO;\n    let hashPrevouts = ZERO;\n    let hashSequence = ZERO;\n    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n      tbuffer = Buffer.allocUnsafe(36 * this.ins.length);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.ins.forEach(txIn => {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n      });\n      hashPrevouts = bcrypto.hash256(tbuffer);\n    }\n    if (\n      !(hashType & Transaction.SIGHASH_ANYONECANPAY) &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_NONE\n    ) {\n      tbuffer = Buffer.allocUnsafe(4 * this.ins.length);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.ins.forEach(txIn => {\n        bufferWriter.writeUInt32(txIn.sequence);\n      });\n      hashSequence = bcrypto.hash256(tbuffer);\n    }\n    if (\n      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_NONE\n    ) {\n      const txOutsSize = this.outs.reduce((sum, output) => {\n        return sum + 8 + varSliceSize(output.script);\n      }, 0);\n      tbuffer = Buffer.allocUnsafe(txOutsSize);\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      this.outs.forEach(out => {\n        bufferWriter.writeUInt64(out.value);\n        bufferWriter.writeVarSlice(out.script);\n      });\n      hashOutputs = bcrypto.hash256(tbuffer);\n    } else if (\n      (hashType & 0x1f) === Transaction.SIGHASH_SINGLE &&\n      inIndex < this.outs.length\n    ) {\n      const output = this.outs[inIndex];\n      tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));\n      bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n      bufferWriter.writeUInt64(output.value);\n      bufferWriter.writeVarSlice(output.script);\n      hashOutputs = bcrypto.hash256(tbuffer);\n    }\n    tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));\n    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);\n    const input = this.ins[inIndex];\n    bufferWriter.writeUInt32(this.version);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(input.hash);\n    bufferWriter.writeUInt32(input.index);\n    bufferWriter.writeVarSlice(prevOutScript);\n    bufferWriter.writeUInt64(value);\n    bufferWriter.writeUInt32(input.sequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(hashType);\n    return bcrypto.hash256(tbuffer);\n  }\n  getHash(forWitness) {\n    // wtxid for coinbase is always 32 bytes of 0x00\n    if (forWitness && this.isCoinbase()) return Buffer.alloc(32, 0);\n    return bcrypto.hash256(this.__toBuffer(undefined, undefined, forWitness));\n  }\n  getId() {\n    // transaction hash's are displayed in reverse order\n    return bufferutils_1.reverseBuffer(this.getHash(false)).toString('hex');\n  }\n  toBuffer(buffer, initialOffset) {\n    return this.__toBuffer(buffer, initialOffset, true);\n  }\n  toHex() {\n    return this.toBuffer(undefined, undefined).toString('hex');\n  }\n  setInputScript(index, scriptSig) {\n    typeforce(types.tuple(types.Number, types.Buffer), arguments);\n    this.ins[index].script = scriptSig;\n  }\n  setWitness(index, witness) {\n    typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n    this.ins[index].witness = witness;\n  }\n  __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {\n    if (!buffer) buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));\n    const bufferWriter = new bufferutils_1.BufferWriter(\n      buffer,\n      initialOffset || 0,\n    );\n    bufferWriter.writeInt32(this.version);\n    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();\n    if (hasWitnesses) {\n      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n    }\n    bufferWriter.writeVarInt(this.ins.length);\n    this.ins.forEach(txIn => {\n      bufferWriter.writeSlice(txIn.hash);\n      bufferWriter.writeUInt32(txIn.index);\n      bufferWriter.writeVarSlice(txIn.script);\n      bufferWriter.writeUInt32(txIn.sequence);\n    });\n    bufferWriter.writeVarInt(this.outs.length);\n    this.outs.forEach(txOut => {\n      if (isOutput(txOut)) {\n        bufferWriter.writeUInt64(txOut.value);\n      } else {\n        bufferWriter.writeSlice(txOut.valueBuffer);\n      }\n      bufferWriter.writeVarSlice(txOut.script);\n    });\n    if (hasWitnesses) {\n      this.ins.forEach(input => {\n        bufferWriter.writeVector(input.witness);\n      });\n    }\n    bufferWriter.writeUInt32(this.locktime);\n    // avoid slicing unless necessary\n    if (initialOffset !== undefined)\n      return buffer.slice(initialOffset, bufferWriter.offset);\n    return buffer;\n  }\n}\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\nexports.Transaction = Transaction;\n"]},"metadata":{},"sourceType":"script"}