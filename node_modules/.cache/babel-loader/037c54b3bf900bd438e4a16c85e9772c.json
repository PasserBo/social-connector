{"ast":null,"code":"import _createClass from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _asyncToGenerator from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Buffer } from '@stacks/common';\nimport { validateMnemonic, mnemonicToEntropy, entropyToMnemonic } from 'bip39';\nimport { randomBytes } from './cryptoRandom';\nimport { createSha2Hash } from './sha2Hash';\nimport { createHmacSha256 } from './hmacSha256';\nimport { createCipher } from './aesCipher';\nimport { createPbkdf2 } from './pbkdf2';\nexport function encryptMnemonic(_x, _x2, _x3) {\n  return _encryptMnemonic.apply(this, arguments);\n}\n\nfunction _encryptMnemonic() {\n  _encryptMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(phrase, password, opts) {\n    var mnemonicEntropy, plaintextNormalized, pbkdf2, salt, keysAndIV, encKey, macKey, iv, cipher, cipherText, hmacPayload, hmacSha256, hmacDigest, payload;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            mnemonicEntropy = mnemonicToEntropy(phrase);\n            _context.next = 9;\n            break;\n\n          case 4:\n            _context.prev = 4;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Invalid mnemonic phrase provided');\n            console.error(_context.t0);\n            throw new Error('Not a valid bip39 mnemonic');\n\n          case 9:\n            plaintextNormalized = Buffer.from(mnemonicEntropy, 'hex');\n            _context.next = 12;\n            return createPbkdf2();\n\n          case 12:\n            pbkdf2 = _context.sent;\n\n            if (opts && opts.getRandomBytes) {\n              salt = opts.getRandomBytes(16);\n            } else {\n              salt = randomBytes(16);\n            }\n\n            _context.next = 16;\n            return pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n\n          case 16:\n            keysAndIV = _context.sent;\n            encKey = keysAndIV.slice(0, 16);\n            macKey = keysAndIV.slice(16, 32);\n            iv = keysAndIV.slice(32, 48);\n            _context.next = 22;\n            return createCipher();\n\n          case 22:\n            cipher = _context.sent;\n            _context.next = 25;\n            return cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);\n\n          case 25:\n            cipherText = _context.sent;\n            hmacPayload = Buffer.concat([salt, cipherText]);\n            _context.next = 29;\n            return createHmacSha256();\n\n          case 29:\n            hmacSha256 = _context.sent;\n            _context.next = 32;\n            return hmacSha256.digest(macKey, hmacPayload);\n\n          case 32:\n            hmacDigest = _context.sent;\n            payload = Buffer.concat([salt, hmacDigest, cipherText]);\n            return _context.abrupt(\"return\", payload);\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 4]]);\n  }));\n  return _encryptMnemonic.apply(this, arguments);\n}\n\nvar PasswordError = /*#__PURE__*/function (_Error) {\n  _inherits(PasswordError, _Error);\n\n  var _super = _createSuper(PasswordError);\n\n  function PasswordError() {\n    _classCallCheck(this, PasswordError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(PasswordError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction decryptMnemonicBuffer(_x4, _x5) {\n  return _decryptMnemonicBuffer.apply(this, arguments);\n}\n\nfunction _decryptMnemonicBuffer() {\n  _decryptMnemonicBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dataBuffer, password) {\n    var salt, hmacSig, cipherText, hmacPayload, pbkdf2, keysAndIV, encKey, macKey, iv, decipher, decryptedResult, hmacSha256, hmacDigest, sha2Hash, hmacSigHash, hmacDigestHash, mnemonic;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            salt = dataBuffer.slice(0, 16);\n            hmacSig = dataBuffer.slice(16, 48);\n            cipherText = dataBuffer.slice(48);\n            hmacPayload = Buffer.concat([salt, cipherText]);\n            _context2.next = 6;\n            return createPbkdf2();\n\n          case 6:\n            pbkdf2 = _context2.sent;\n            _context2.next = 9;\n            return pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n\n          case 9:\n            keysAndIV = _context2.sent;\n            encKey = keysAndIV.slice(0, 16);\n            macKey = keysAndIV.slice(16, 32);\n            iv = keysAndIV.slice(32, 48);\n            _context2.next = 15;\n            return createCipher();\n\n          case 15:\n            decipher = _context2.sent;\n            _context2.next = 18;\n            return decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);\n\n          case 18:\n            decryptedResult = _context2.sent;\n            _context2.next = 21;\n            return createHmacSha256();\n\n          case 21:\n            hmacSha256 = _context2.sent;\n            _context2.next = 24;\n            return hmacSha256.digest(macKey, hmacPayload);\n\n          case 24:\n            hmacDigest = _context2.sent;\n            _context2.next = 27;\n            return createSha2Hash();\n\n          case 27:\n            sha2Hash = _context2.sent;\n            _context2.next = 30;\n            return sha2Hash.digest(hmacSig);\n\n          case 30:\n            hmacSigHash = _context2.sent;\n            _context2.next = 33;\n            return sha2Hash.digest(hmacDigest);\n\n          case 33:\n            hmacDigestHash = _context2.sent;\n\n            if (hmacSigHash.equals(hmacDigestHash)) {\n              _context2.next = 36;\n              break;\n            }\n\n            throw new PasswordError('Wrong password (HMAC mismatch)');\n\n          case 36:\n            _context2.prev = 36;\n            mnemonic = entropyToMnemonic(decryptedResult);\n            _context2.next = 45;\n            break;\n\n          case 40:\n            _context2.prev = 40;\n            _context2.t0 = _context2[\"catch\"](36);\n            console.error('Error thrown by `entropyToMnemonic`');\n            console.error(_context2.t0);\n            throw new PasswordError('Wrong password (invalid plaintext)');\n\n          case 45:\n            if (validateMnemonic(mnemonic)) {\n              _context2.next = 47;\n              break;\n            }\n\n            throw new PasswordError('Wrong password (invalid plaintext)');\n\n          case 47:\n            return _context2.abrupt(\"return\", mnemonic);\n\n          case 48:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[36, 40]]);\n  }));\n  return _decryptMnemonicBuffer.apply(this, arguments);\n}\n\nfunction decryptLegacy(dataBuffer, password, triplesecDecrypt) {\n  return new Promise(function (resolve, reject) {\n    if (!triplesecDecrypt) {\n      reject(new Error('The `triplesec.decrypt` function must be provided'));\n    }\n\n    triplesecDecrypt({\n      key: Buffer.from(password),\n      data: dataBuffer\n    }, function (err, plaintextBuffer) {\n      if (!err) {\n        resolve(plaintextBuffer);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nexport function decryptMnemonic(_x6, _x7, _x8) {\n  return _decryptMnemonic.apply(this, arguments);\n}\n\nfunction _decryptMnemonic() {\n  _decryptMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, password, triplesecDecrypt) {\n    var dataBuffer, _data;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');\n            _context3.prev = 1;\n            _context3.next = 4;\n            return decryptMnemonicBuffer(dataBuffer, password);\n\n          case 4:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n\n            if (!(_context3.t0 instanceof PasswordError)) {\n              _context3.next = 11;\n              break;\n            }\n\n            throw _context3.t0;\n\n          case 11:\n            _context3.next = 13;\n            return decryptLegacy(dataBuffer, password, triplesecDecrypt);\n\n          case 13:\n            _data = _context3.sent;\n            return _context3.abrupt(\"return\", _data.toString());\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 7]]);\n  }));\n  return _decryptMnemonic.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { validateMnemonic, mnemonicToEntropy, entropyToMnemonic } from 'bip39';\nimport { randomBytes } from './cryptoRandom';\nimport { createSha2Hash } from './sha2Hash';\nimport { createHmacSha256 } from './hmacSha256';\nimport { createCipher } from './aesCipher';\nimport { createPbkdf2 } from './pbkdf2';\nexport async function encryptMnemonic(phrase, password, opts) {\n    let mnemonicEntropy;\n    try {\n        mnemonicEntropy = mnemonicToEntropy(phrase);\n    }\n    catch (error) {\n        console.error('Invalid mnemonic phrase provided');\n        console.error(error);\n        throw new Error('Not a valid bip39 mnemonic');\n    }\n    const plaintextNormalized = Buffer.from(mnemonicEntropy, 'hex');\n    const pbkdf2 = await createPbkdf2();\n    let salt;\n    if (opts && opts.getRandomBytes) {\n        salt = opts.getRandomBytes(16);\n    }\n    else {\n        salt = randomBytes(16);\n    }\n    const keysAndIV = await pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n    const encKey = keysAndIV.slice(0, 16);\n    const macKey = keysAndIV.slice(16, 32);\n    const iv = keysAndIV.slice(32, 48);\n    const cipher = await createCipher();\n    const cipherText = await cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);\n    const hmacPayload = Buffer.concat([salt, cipherText]);\n    const hmacSha256 = await createHmacSha256();\n    const hmacDigest = await hmacSha256.digest(macKey, hmacPayload);\n    const payload = Buffer.concat([salt, hmacDigest, cipherText]);\n    return payload;\n}\nclass PasswordError extends Error {\n}\nasync function decryptMnemonicBuffer(dataBuffer, password) {\n    const salt = dataBuffer.slice(0, 16);\n    const hmacSig = dataBuffer.slice(16, 48);\n    const cipherText = dataBuffer.slice(48);\n    const hmacPayload = Buffer.concat([salt, cipherText]);\n    const pbkdf2 = await createPbkdf2();\n    const keysAndIV = await pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n    const encKey = keysAndIV.slice(0, 16);\n    const macKey = keysAndIV.slice(16, 32);\n    const iv = keysAndIV.slice(32, 48);\n    const decipher = await createCipher();\n    const decryptedResult = await decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);\n    const hmacSha256 = await createHmacSha256();\n    const hmacDigest = await hmacSha256.digest(macKey, hmacPayload);\n    const sha2Hash = await createSha2Hash();\n    const hmacSigHash = await sha2Hash.digest(hmacSig);\n    const hmacDigestHash = await sha2Hash.digest(hmacDigest);\n    if (!hmacSigHash.equals(hmacDigestHash)) {\n        throw new PasswordError('Wrong password (HMAC mismatch)');\n    }\n    let mnemonic;\n    try {\n        mnemonic = entropyToMnemonic(decryptedResult);\n    }\n    catch (error) {\n        console.error('Error thrown by `entropyToMnemonic`');\n        console.error(error);\n        throw new PasswordError('Wrong password (invalid plaintext)');\n    }\n    if (!validateMnemonic(mnemonic)) {\n        throw new PasswordError('Wrong password (invalid plaintext)');\n    }\n    return mnemonic;\n}\nfunction decryptLegacy(dataBuffer, password, triplesecDecrypt) {\n    return new Promise((resolve, reject) => {\n        if (!triplesecDecrypt) {\n            reject(new Error('The `triplesec.decrypt` function must be provided'));\n        }\n        triplesecDecrypt({\n            key: Buffer.from(password),\n            data: dataBuffer,\n        }, (err, plaintextBuffer) => {\n            if (!err) {\n                resolve(plaintextBuffer);\n            }\n            else {\n                reject(err);\n            }\n        });\n    });\n}\nexport async function decryptMnemonic(data, password, triplesecDecrypt) {\n    const dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');\n    try {\n        return await decryptMnemonicBuffer(dataBuffer, password);\n    }\n    catch (err) {\n        if (err instanceof PasswordError) {\n            throw err;\n        }\n        const data = await decryptLegacy(dataBuffer, password, triplesecDecrypt);\n        return data.toString();\n    }\n}\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"module"}