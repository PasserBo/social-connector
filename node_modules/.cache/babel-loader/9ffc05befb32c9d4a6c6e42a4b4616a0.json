{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, taggedTemplateLiteralLoose as _taggedTemplateLiteralLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { forwardRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Box } from '../box/index.esm.js';\nimport { VisuallyHidden } from '../visually-hidden/index.esm.js';\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  animation: \", \" \", \" linear infinite;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar spin = /*#__PURE__*/keyframes([\"0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}\"]);\nvar StyledBox = /*#__PURE__*/styled(Box)( /*#__PURE__*/_templateObject(), spin, function (props) {\n  return props.speed;\n});\n\nvar getSize = function getSize(size) {\n  switch (size) {\n    case 'xs':\n      return '0.75rem';\n\n    case 'sm':\n      return '1rem';\n\n    case 'md':\n      return '1.5rem';\n\n    case 'lg':\n      return '2rem';\n\n    case 'xl':\n      return '3rem';\n\n    default:\n      return size;\n  }\n};\n\nvar Spinner = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'md' : _ref$size,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'Loading...' : _ref$label,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? '2px' : _ref$thickness,\n      _ref$speed = _ref.speed,\n      speed = _ref$speed === void 0 ? '0.85s' : _ref$speed,\n      color = _ref.color,\n      _ref$emptyColor = _ref.emptyColor,\n      emptyColor = _ref$emptyColor === void 0 ? 'transparent' : _ref$emptyColor,\n      props = _objectWithoutPropertiesLoose(_ref, [\"size\", \"label\", \"thickness\", \"speed\", \"color\", \"emptyColor\"]);\n\n  var _size = getSize(size);\n\n  return React__default.createElement(StyledBox, Object.assign({\n    ref: ref,\n    display: \"inline-block\",\n    borderWidth: thickness,\n    borderColor: \"currentColor\",\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    borderRadius: \"100%\",\n    speed: speed,\n    color: color,\n    size: _size\n  }, props), label && React__default.createElement(VisuallyHidden, null, label));\n});\nSpinner.displayName = 'Spinner';\nexport { Spinner };","map":{"version":3,"sources":["../../src/spinner/index.tsx"],"names":["spin","keyframes","StyledBox","styled","props","getSize","Spinner","forwardRef","size","label","thickness","speed","color","emptyColor","_size","React","ref","display","borderWidth","borderColor","borderBottomColor","borderLeftColor","borderRadius"],"mappings":";;;;;;;;;;;;;;;;AAMA,IAAMA,IAAI,GAAA,aAAGC,SAAH,CAAA,CAAV,4DAAU,CAAA,CAAV;AASA,IAAMC,SAAS,GAAA,aAAGC,MAAM,CAAT,GAAS,CAANA,EAAH,aAAA,eAAA,EAAGA,EAAH,IAAGA,EACK,UAAA,KAAA,EAAA;AAAA,SAAyBC,KAAK,CAA9B,KAAA;AADvB,CAAkBD,CAAlB;;AAIA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAA;AACd,UAAA,IAAA;AACE,SAAA,IAAA;AACE,aAAA,SAAA;;AACF,SAAA,IAAA;AACE,aAAA,MAAA;;AACF,SAAA,IAAA;AACE,aAAA,QAAA;;AACF,SAAA,IAAA;AACE,aAAA,MAAA;;AACF,SAAA,IAAA;AACE,aAAA,MAAA;;AACF;AACE,aAAA,IAAA;AAZJ;AADF,CAAA;;IAsBMC,OAAO,GAAA,aAAGC,UAAU,CACxB,UAAA,IAAA,EAAA,GAAA,EAAA;uBAEIC,I;MAAAA,IAAAA,GAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAO,IAAPA,GAAO,S;wBACPC,K;MAAAA,KAAAA,GAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAQ,YAARA,GAAQ,U;4BACRC,S;MAAAA,SAAAA,GAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAY,KAAZA,GAAY,c;wBACZC,K;MAAAA,KAAAA,GAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAQ,OAARA,GAAQ,U;MACRC,KAAAA,GAAAA,IAAAA,CAAAA,K;6BACAC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,aAAbA,GAAa,e;MACVT,KAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,YAAAA,CAAAA,C;;AAIL,MAAMU,KAAK,GAAGT,OAAO,CAArB,IAAqB,CAArB;;AAEA,SACEU,cAAAA,CAAAA,aAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACEC,IAAAA,GAAG,EAAEA,GADPD;AAEEE,IAAAA,OAAO,EAAC,cAFVF;AAGEG,IAAAA,WAAW,EAAER,SAHfK;AAIEI,IAAAA,WAAW,EAAC,cAJdJ;AAKEK,IAAAA,iBAAiB,EAAEP,UALrBE;AAMEM,IAAAA,eAAe,EAAER,UANnBE;AAOEO,IAAAA,YAAY,EAAC,MAPfP;AAQEJ,IAAAA,KAAK,EAAEA,KARTI;AASEH,IAAAA,KAAK,EAAEA,KATTG;AAUEP,IAAAA,IAAI,EAAEM;AAVRC,GAAAA,EAAAA,KAAAA,CAAAA,EAaGN,KAAK,IAAIM,cAAAA,CAAAA,aAAAA,CAAAA,cAAAA,EAAAA,IAAAA,EAdd,KAccA,CAbZA,CADF;AAfsB,CAAA,C;AAmC1BT,OAAO,CAAPA,WAAAA,GAAAA,SAAAA","sourcesContent":["import React, { forwardRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Box } from '../box';\nimport { VisuallyHidden } from '../visually-hidden';\nimport { SpinnerProps, SpinnerSize } from './types';\n\nconst spin = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst StyledBox = styled(Box)`\n  animation: ${spin} ${(props: SpinnerProps) => props.speed} linear infinite;\n`;\n\nconst getSize = (size: SpinnerSize): string => {\n  switch (size) {\n    case 'xs':\n      return '0.75rem';\n    case 'sm':\n      return '1rem';\n    case 'md':\n      return '1.5rem';\n    case 'lg':\n      return '2rem';\n    case 'xl':\n      return '3rem';\n    default:\n      return size;\n  }\n};\n\n/**\n * Spinner is used for indicating a loading state of a component or page.\n *\n * RECOMMENDED: Add `aria-busy=\"true\"` to the component that triggered the loading state while the spinner is shown.\n */\nconst Spinner = forwardRef<any, SpinnerProps>(\n  (\n    {\n      size = 'md',\n      label = 'Loading...',\n      thickness = '2px',\n      speed = '0.85s',\n      color,\n      emptyColor = 'transparent',\n      ...props\n    },\n    ref\n  ) => {\n    const _size = getSize(size);\n\n    return (\n      <StyledBox\n        ref={ref}\n        display=\"inline-block\"\n        borderWidth={thickness}\n        borderColor=\"currentColor\"\n        borderBottomColor={emptyColor}\n        borderLeftColor={emptyColor}\n        borderRadius=\"100%\"\n        speed={speed}\n        color={color}\n        size={_size}\n        {...props}\n      >\n        {label && <VisuallyHidden>{label}</VisuallyHidden>}\n      </StyledBox>\n    );\n  }\n);\n\nSpinner.displayName = 'Spinner';\n\nexport { Spinner };\n"]},"metadata":{},"sourceType":"module"}