{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport { userSession } from './auth';\nimport { Storage } from '@stacks/storage';\nconst storage = new Storage({\n  userSession\n});\nconst TASKS_FILENAME = 'tasks.json';\n/**\n * @typedef {Object} Task\n * @property {boolean} complete\n * @property {string} value\n * @property {string} id\n */\n// @type {Task[]}\n\nexport const defaultTasks = [{\n  complete: false,\n  value: '',\n  id: uuid()\n}];\n/**\n * Save tasks to Gaia\n * @param {UserSession} userSession\n * @param {Todo[]} tasks\n * @param {boolean} isPublic\n */\n\nexport const saveTasks = async (userSession, tasks, isPublic) => {\n  await storage.putFile(TASKS_FILENAME, JSON.stringify({\n    tasks,\n    isPublic\n  }), {\n    encrypt: !isPublic,\n    dangerouslyIgnoreEtag: true\n  });\n};\n/**\n * Fetch tasks for a specific user. Omit the `username` argument to fetch the current user's tasks.\n *\n * If no tasks are found, and no username is provided, then the default tasks are returned.\n * If tasks are found, we check to see if they are public.\n * @param {import(\"@stacks/auth\").UserSession} userSession\n * @param {string} username - the username to fetch tasks for. Omit this argument or set it to an empty string\n * to fetch the current user's tasks.\n * @returns {{ tasks: Task[] | null, public: boolean }}\n */\n\nexport const fetchTasks = async (userSession, username) => {\n  try {\n    /** @type {string} raw JSON stored in Gaia */\n    const tasksJSON = await storage.getFile(TASKS_FILENAME, {\n      decrypt: false,\n      username: username || undefined\n    });\n\n    if (tasksJSON) {\n      const json = JSON.parse(tasksJSON);\n\n      if (json.isPublic) {\n        return {\n          tasks: json.tasks,\n          public: true\n        };\n      } else {\n        if (!username) {\n          const decrypted = JSON.parse(await userSession.decryptContent(tasksJSON));\n          return {\n            tasks: decrypted.tasks,\n            public: false\n          };\n        }\n      }\n    } else {\n      return {\n        tasks: username ? null : defaultTasks,\n        public: false\n      };\n    }\n  } catch (error) {\n    if (username) {\n      return {\n        tasks: null\n      };\n    } else {\n      return {\n        tasks: defaultTasks\n      };\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/storage.js"],"names":["v4","uuid","userSession","Storage","storage","TASKS_FILENAME","defaultTasks","complete","value","id","saveTasks","tasks","isPublic","putFile","JSON","stringify","encrypt","dangerouslyIgnoreEtag","fetchTasks","username","tasksJSON","getFile","decrypt","undefined","json","parse","public","decrypted","decryptContent","error"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,CAAY;AAAED,EAAAA;AAAF,CAAZ,CAAhB;AACA,MAAMG,cAAc,GAAG,YAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAC1B;AACEC,EAAAA,QAAQ,EAAE,KADZ;AAEEC,EAAAA,KAAK,EAAE,EAFT;AAGEC,EAAAA,EAAE,EAAER,IAAI;AAHV,CAD0B,CAArB;AAQP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,SAAS,GAAG,OAAOR,WAAP,EAAoBS,KAApB,EAA2BC,QAA3B,KAAwC;AAC/D,QAAMR,OAAO,CAACS,OAAR,CAAgBR,cAAhB,EAAgCS,IAAI,CAACC,SAAL,CAAe;AAAEJ,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAhC,EAAqE;AACzEI,IAAAA,OAAO,EAAE,CAACJ,QAD+D;AAEzEK,IAAAA,qBAAqB,EAAE;AAFkD,GAArE,CAAN;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,OAAOhB,WAAP,EAAoBiB,QAApB,KAAiC;AACzD,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,MAAMhB,OAAO,CAACiB,OAAR,CAAgBhB,cAAhB,EAAgC;AACtDiB,MAAAA,OAAO,EAAE,KAD6C;AAEtDH,MAAAA,QAAQ,EAAEA,QAAQ,IAAII;AAFgC,KAAhC,CAAxB;;AAIA,QAAIH,SAAJ,EAAe;AACb,YAAMI,IAAI,GAAGV,IAAI,CAACW,KAAL,CAAWL,SAAX,CAAb;;AACA,UAAII,IAAI,CAACZ,QAAT,EAAmB;AACjB,eAAO;AACLD,UAAAA,KAAK,EAAEa,IAAI,CAACb,KADP;AAELe,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,YAAI,CAACP,QAAL,EAAe;AACb,gBAAMQ,SAAS,GAAGb,IAAI,CAACW,KAAL,CAAW,MAAMvB,WAAW,CAAC0B,cAAZ,CAA2BR,SAA3B,CAAjB,CAAlB;AACA,iBAAO;AACLT,YAAAA,KAAK,EAAEgB,SAAS,CAAChB,KADZ;AAELe,YAAAA,MAAM,EAAE;AAFH,WAAP;AAID;AACF;AACF,KAhBD,MAgBO;AACL,aAAO;AACLf,QAAAA,KAAK,EAAEQ,QAAQ,GAAG,IAAH,GAAUb,YADpB;AAELoB,QAAAA,MAAM,EAAE;AAFH,OAAP;AAID;AACF,GA5BD,CA4BE,OAAOG,KAAP,EAAc;AACd,QAAIV,QAAJ,EAAc;AACZ,aAAO;AACLR,QAAAA,KAAK,EAAE;AADF,OAAP;AAGD,KAJD,MAIO;AACL,aAAO;AACLA,QAAAA,KAAK,EAAEL;AADF,OAAP;AAGD;AACF;AACF,CAxCM","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { userSession } from './auth';\nimport { Storage } from '@stacks/storage';\n\nconst storage = new Storage({ userSession });\nconst TASKS_FILENAME = 'tasks.json';\n\n/**\n * @typedef {Object} Task\n * @property {boolean} complete\n * @property {string} value\n * @property {string} id\n */\n\n// @type {Task[]}\nexport const defaultTasks = [\n  {\n    complete: false,\n    value: '',\n    id: uuid(),\n  },\n];\n\n/**\n * Save tasks to Gaia\n * @param {UserSession} userSession\n * @param {Todo[]} tasks\n * @param {boolean} isPublic\n */\nexport const saveTasks = async (userSession, tasks, isPublic) => {\n  await storage.putFile(TASKS_FILENAME, JSON.stringify({ tasks, isPublic }), {\n    encrypt: !isPublic,\n    dangerouslyIgnoreEtag: true,\n  });\n};\n\n/**\n * Fetch tasks for a specific user. Omit the `username` argument to fetch the current user's tasks.\n *\n * If no tasks are found, and no username is provided, then the default tasks are returned.\n * If tasks are found, we check to see if they are public.\n * @param {import(\"@stacks/auth\").UserSession} userSession\n * @param {string} username - the username to fetch tasks for. Omit this argument or set it to an empty string\n * to fetch the current user's tasks.\n * @returns {{ tasks: Task[] | null, public: boolean }}\n */\nexport const fetchTasks = async (userSession, username) => {\n  try {\n    /** @type {string} raw JSON stored in Gaia */\n    const tasksJSON = await storage.getFile(TASKS_FILENAME, {\n      decrypt: false,\n      username: username || undefined,\n    });\n    if (tasksJSON) {\n      const json = JSON.parse(tasksJSON);\n      if (json.isPublic) {\n        return {\n          tasks: json.tasks,\n          public: true,\n        };\n      } else {\n        if (!username) {\n          const decrypted = JSON.parse(await userSession.decryptContent(tasksJSON));\n          return {\n            tasks: decrypted.tasks,\n            public: false,\n          };\n        }\n      }\n    } else {\n      return {\n        tasks: username ? null : defaultTasks,\n        public: false,\n      };\n    }\n  } catch (error) {\n    if (username) {\n      return {\n        tasks: null,\n      };\n    } else {\n      return {\n        tasks: defaultTasks,\n      };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}