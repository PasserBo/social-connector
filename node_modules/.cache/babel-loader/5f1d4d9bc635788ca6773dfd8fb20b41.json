{"ast":null,"code":"// ** React Imports\nimport{Fragment,useState,useEffect}from'react';import{useParams}from'react-router-dom';// ** Third Party Components\nimport classnames from'classnames';// ** Focus App Components\nimport Tasks from'./Tasks';import Sidebar from'./Sidebar';import TaskSidebar from'./TaskSidebar';// ** Store & Actions\nimport{useDispatch,useSelector}from'react-redux';import{getTasks,updateTask,selectTask,addTask,deleteTask,reOrderTasks}from'./store';// ** Styles\nimport'@styles/react/apps/app-focus.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const FOCUS=()=>{// ** States\nconst[sort,setSort]=useState('');const[query,setQuery]=useState('');const[mainSidebar,setMainSidebar]=useState(false);const[openTaskSidebar,setOpenTaskSidebar]=useState(false);// ** Store Vars\nconst dispatch=useDispatch();const store=useSelector(state=>state.todo);// ** URL Params\nconst paramsURL=useParams();const params={filter:paramsURL.filter||'',q:query||'',sortBy:sort||'',tag:paramsURL.tag||''};// ** Function to handle Left sidebar & Task sidebar\nconst handleMainSidebar=()=>setMainSidebar(!mainSidebar);const handleTaskSidebar=()=>setOpenTaskSidebar(!openTaskSidebar);// ** Get Tasks on mount & based on dependency change\nuseEffect(()=>{dispatch(getTasks({filter:paramsURL.filter||'',q:query||'',sortBy:sort||'',tag:paramsURL.tag||''}));},[store.tasks.length,paramsURL.filter,paramsURL.tag,query,sort]);return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Sidebar,{store:store,params:params,getTasks:getTasks,dispatch:dispatch,mainSidebar:mainSidebar,urlFilter:paramsURL.filter,setMainSidebar:setMainSidebar,handleTaskSidebar:handleTaskSidebar}),/*#__PURE__*/_jsx(\"div\",{className:\"content-right\",children:/*#__PURE__*/_jsx(\"div\",{className:\"content-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"content-body\",children:[/*#__PURE__*/_jsx(\"div\",{className:classnames('body-content-overlay',{show:mainSidebar===true}),onClick:handleMainSidebar}),store?/*#__PURE__*/_jsx(Tasks,{store:store,tasks:store.tasks,sort:sort,query:query,params:params,setSort:setSort,setQuery:setQuery,dispatch:dispatch,getTasks:getTasks,paramsURL:paramsURL,updateTask:updateTask,selectTask:selectTask,reOrderTasks:reOrderTasks,handleMainSidebar:handleMainSidebar,handleTaskSidebar:handleTaskSidebar}):null,/*#__PURE__*/_jsx(TaskSidebar,{store:store,params:params,addTask:addTask,dispatch:dispatch,open:openTaskSidebar,updateTask:updateTask,selectTask:selectTask,deleteTask:deleteTask,handleTaskSidebar:handleTaskSidebar})]})})})]});};export default FOCUS;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/views/apps/focus/index.js"],"names":["Fragment","useState","useEffect","useParams","classnames","Tasks","Sidebar","TaskSidebar","useDispatch","useSelector","getTasks","updateTask","selectTask","addTask","deleteTask","reOrderTasks","FOCUS","sort","setSort","query","setQuery","mainSidebar","setMainSidebar","openTaskSidebar","setOpenTaskSidebar","dispatch","store","state","todo","paramsURL","params","filter","q","sortBy","tag","handleMainSidebar","handleTaskSidebar","tasks","length","show"],"mappings":"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","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Focus App Components\r\nimport Tasks from './Tasks'\r\nimport Sidebar from './Sidebar'\r\nimport TaskSidebar from './TaskSidebar'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getTasks, updateTask, selectTask, addTask, deleteTask, reOrderTasks } from './store'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-focus.scss'\r\n\r\nconst FOCUS = () => {\r\n  // ** States\r\n  const [sort, setSort] = useState('')\r\n  const [query, setQuery] = useState('')\r\n  const [mainSidebar, setMainSidebar] = useState(false)\r\n  const [openTaskSidebar, setOpenTaskSidebar] = useState(false)\r\n\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.todo)\r\n\r\n  // ** URL Params\r\n  const paramsURL = useParams()\r\n  const params = {\r\n    filter: paramsURL.filter || '',\r\n    q: query || '',\r\n    sortBy: sort || '',\r\n    tag: paramsURL.tag || ''\r\n  }\r\n\r\n  // ** Function to handle Left sidebar & Task sidebar\r\n  const handleMainSidebar = () => setMainSidebar(!mainSidebar)\r\n  const handleTaskSidebar = () => setOpenTaskSidebar(!openTaskSidebar)\r\n\r\n  // ** Get Tasks on mount & based on dependency change\r\n  useEffect(() => {\r\n    dispatch(\r\n      getTasks({\r\n        filter: paramsURL.filter || '',\r\n        q: query || '',\r\n        sortBy: sort || '',\r\n        tag: paramsURL.tag || ''\r\n      })\r\n    )\r\n  }, [store.tasks.length, paramsURL.filter, paramsURL.tag, query, sort])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar\r\n        store={store}\r\n        params={params}\r\n        getTasks={getTasks}\r\n        dispatch={dispatch}\r\n        mainSidebar={mainSidebar}\r\n        urlFilter={paramsURL.filter}\r\n        setMainSidebar={setMainSidebar}\r\n        handleTaskSidebar={handleTaskSidebar}\r\n      />\r\n      <div className='content-right'>\r\n        <div className='content-wrapper'>\r\n          <div className='content-body'>\r\n            <div\r\n              className={classnames('body-content-overlay', {\r\n                show: mainSidebar === true\r\n              })}\r\n              onClick={handleMainSidebar}\r\n            ></div>\r\n\r\n            {store ? (\r\n              <Tasks\r\n                store={store}\r\n                tasks={store.tasks}\r\n                sort={sort}\r\n                query={query}\r\n                params={params}\r\n                setSort={setSort}\r\n                setQuery={setQuery}\r\n                dispatch={dispatch}\r\n                getTasks={getTasks}\r\n                paramsURL={paramsURL}\r\n                updateTask={updateTask}\r\n                selectTask={selectTask}\r\n                reOrderTasks={reOrderTasks}\r\n                handleMainSidebar={handleMainSidebar}\r\n                handleTaskSidebar={handleTaskSidebar}\r\n              />\r\n            ) : null}\r\n\r\n            <TaskSidebar\r\n              store={store}\r\n              params={params}\r\n              addTask={addTask}\r\n              dispatch={dispatch}\r\n              open={openTaskSidebar}\r\n              updateTask={updateTask}\r\n              selectTask={selectTask}\r\n              deleteTask={deleteTask}\r\n              handleTaskSidebar={handleTaskSidebar}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default FOCUS\r\n"]},"metadata":{},"sourceType":"module"}