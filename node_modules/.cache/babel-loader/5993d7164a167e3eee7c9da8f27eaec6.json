{"ast":null,"code":"import { useState, useCallback, createElement, Fragment } from 'react';\nimport { isBrowser, __DEV__, createContext } from '../utils/index.esm.js';\nimport '../hooks/use-controllable.esm.js';\nimport '../hooks/use-previous.esm.js';\nimport '../hooks/use-disclosure.esm.js';\nimport '../hooks/use-latest-ref.esm.js';\nimport '../hooks/use-event-listener.esm.js';\nimport '../hooks/use-force-update.esm.js';\nimport '../hooks/use-id.esm.js';\nimport '../hooks/use-merge-refs.esm.js';\nimport { useSafeLayoutEffect } from '../hooks/use-safe-layout-effect.esm.js';\nimport '../hooks/use-timeout.esm.js';\nimport '../hooks/use-theme.esm.js';\nimport '../hooks/use-color-mode.esm.js';\nimport { createPortal } from 'react-dom';\nimport { usePortalManager } from './manager.esm.js';\n\nvar _createContext = /*#__PURE__*/createContext({\n  strict: false\n}),\n    PortalCtxProvider = _createContext[0],\n    usePortalContext = _createContext[1];\n\nfunction Portal(props) {\n  var onMount = props.onMount,\n      onUnmount = props.onUnmount,\n      children = props.children,\n      containerProp = props.container;\n\n  var _React$useState = useState(function () {\n    if (isBrowser) {\n      var div = document.createElement('div');\n      div.className = 'portal';\n      return div;\n    }\n\n    return null;\n  }),\n      portal = _React$useState[0];\n\n  var parentPortal = usePortalContext();\n  var manager = usePortalManager();\n  var append = useCallback(function (container) {\n    if (!portal || !container) return;\n    container.appendChild(portal);\n  }, [portal]);\n  useSafeLayoutEffect(function () {\n    var _ref, _ref2;\n\n    var mountNode = containerProp === null || containerProp === void 0 ? void 0 : containerProp();\n    var container = (_ref = (_ref2 = mountNode !== null && mountNode !== void 0 ? mountNode : parentPortal) !== null && _ref2 !== void 0 ? _ref2 : manager === null || manager === void 0 ? void 0 : manager.node) !== null && _ref !== void 0 ? _ref : document.body;\n    append(container);\n    onMount === null || onMount === void 0 ? void 0 : onMount();\n    return function () {\n      onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();\n      if (!portal) return;\n\n      if (container === null || container === void 0 ? void 0 : container.contains(portal)) {\n        container === null || container === void 0 ? void 0 : container.removeChild(portal);\n      }\n    };\n  }, [containerProp, portal, parentPortal, onMount, onUnmount, manager && manager.node, append]);\n  var finalChildren = (manager === null || manager === void 0 ? void 0 : manager.zIndex) ? createElement(\"div\", {\n    className: \"portal-zIndex\",\n    style: {\n      zIndex: manager.zIndex\n    }\n  }, children) : children;\n\n  if (!portal) {\n    return createElement(Fragment, null, finalChildren);\n  }\n\n  return createPortal(createElement(PortalCtxProvider, {\n    value: portal\n  }, finalChildren), portal);\n}\n\nif (__DEV__) {\n  Portal.displayName = 'Portal';\n}\n\nexport { Portal };","map":{"version":3,"sources":["../../src/portal/index.tsx"],"names":["PortalCtxProvider","usePortalContext","createContext","strict","Portal","props","onMount","onUnmount","children","container","containerProp","portal","div","document","parentPortal","manager","usePortalManager","append","useSafeLayoutEffect","mountNode","finalChildren","className","style","zIndex","React","createPortal","value"],"mappings":"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","sourcesContent":["import { createContext, isBrowser, __DEV__ } from '../utils';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { usePortalManager } from './manager';\nimport { useSafeLayoutEffect } from '../hooks';\n\ntype PortalContext = HTMLDivElement | null;\n\nconst [PortalCtxProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n});\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void;\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void;\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  container?: () => HTMLElement;\n  /**\n   * The content or node you'll like to portal\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n */\nexport function Portal(props: PortalProps) {\n  const { onMount, onUnmount, children, container: containerProp } = props;\n\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n  const [portal] = React.useState(() => {\n    if (isBrowser) {\n      const div = document.createElement('div');\n      div.className = 'portal';\n      return div;\n    }\n    // for ssr\n    return null;\n  });\n\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n  const parentPortal = usePortalContext();\n\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n  const manager = usePortalManager();\n\n  const append = React.useCallback(\n    (container: HTMLElement | null) => {\n      // if user specified a mount node, do nothing.\n      if (!portal || !container) return;\n\n      // else, simply append component to the portal node\n      container.appendChild(portal);\n    },\n    [portal]\n  );\n\n  useSafeLayoutEffect(() => {\n    // get the custom container from the container prop\n    const mountNode = containerProp?.();\n\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it's not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n    const container = mountNode ?? parentPortal ?? manager?.node ?? document.body;\n\n    /**\n     * Append portal node to the computed container\n     */\n    append(container);\n\n    onMount?.();\n\n    return () => {\n      onUnmount?.();\n\n      if (!portal) return;\n\n      if (container?.contains(portal)) {\n        container?.removeChild(portal);\n      }\n    };\n  }, [containerProp, portal, parentPortal, onMount, onUnmount, manager && manager.node, append]);\n\n  const finalChildren = manager?.zIndex ? (\n    <div className=\"portal-zIndex\" style={{ zIndex: manager.zIndex }}>\n      {children}\n    </div>\n  ) : (\n    children\n  );\n\n  if (!portal) {\n    return <React.Fragment>{finalChildren}</React.Fragment>;\n  }\n\n  return createPortal(\n    <PortalCtxProvider value={portal}>{finalChildren}</PortalCtxProvider>,\n    portal\n  );\n}\n\nif (__DEV__) {\n  Portal.displayName = 'Portal';\n}\n"]},"metadata":{},"sourceType":"module"}