{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar combiner_1 = require('./combiner');\n\nvar parser_1 = require('./parser');\n\nvar typeFields_1 = require('./typeFields');\n\nvar utils_1 = require('./utils');\n\nvar Psbt = /*#__PURE__*/function () {\n  function Psbt(tx) {\n    _classCallCheck(this, Psbt);\n\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx\n    };\n  }\n\n  _createClass(Psbt, [{\n    key: \"toBase64\",\n    value: function toBase64() {\n      var buffer = this.toBuffer();\n      return buffer.toString('base64');\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      var buffer = this.toBuffer();\n      return buffer.toString('hex');\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return parser_1.psbtToBuffer(this);\n    }\n  }, {\n    key: \"updateGlobal\",\n    value: function updateGlobal(updateData) {\n      utils_1.updateGlobal(updateData, this.globalMap);\n      return this;\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(inputIndex, updateData) {\n      var input = utils_1.checkForInput(this.inputs, inputIndex);\n      utils_1.updateInput(updateData, input);\n      return this;\n    }\n  }, {\n    key: \"updateOutput\",\n    value: function updateOutput(outputIndex, updateData) {\n      var output = utils_1.checkForOutput(this.outputs, outputIndex);\n      utils_1.updateOutput(updateData, output);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToGlobal\",\n    value: function addUnknownKeyValToGlobal(keyVal) {\n      utils_1.checkHasKey(keyVal, this.globalMap.unknownKeyVals, utils_1.getEnumLength(typeFields_1.GlobalTypes));\n      if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n      this.globalMap.unknownKeyVals.push(keyVal);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToInput\",\n    value: function addUnknownKeyValToInput(inputIndex, keyVal) {\n      var input = utils_1.checkForInput(this.inputs, inputIndex);\n      utils_1.checkHasKey(keyVal, input.unknownKeyVals, utils_1.getEnumLength(typeFields_1.InputTypes));\n      if (!input.unknownKeyVals) input.unknownKeyVals = [];\n      input.unknownKeyVals.push(keyVal);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToOutput\",\n    value: function addUnknownKeyValToOutput(outputIndex, keyVal) {\n      var output = utils_1.checkForOutput(this.outputs, outputIndex);\n      utils_1.checkHasKey(keyVal, output.unknownKeyVals, utils_1.getEnumLength(typeFields_1.OutputTypes));\n      if (!output.unknownKeyVals) output.unknownKeyVals = [];\n      output.unknownKeyVals.push(keyVal);\n      return this;\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(inputData) {\n      var _this = this;\n\n      this.globalMap.unsignedTx.addInput(inputData);\n      this.inputs.push({\n        unknownKeyVals: []\n      });\n      var addKeyVals = inputData.unknownKeyVals || [];\n      var inputIndex = this.inputs.length - 1;\n\n      if (!Array.isArray(addKeyVals)) {\n        throw new Error('unknownKeyVals must be an Array');\n      }\n\n      addKeyVals.forEach(function (keyVal) {\n        return _this.addUnknownKeyValToInput(inputIndex, keyVal);\n      });\n      utils_1.addInputAttributes(this.inputs, inputData);\n      return this;\n    }\n  }, {\n    key: \"addOutput\",\n    value: function addOutput(outputData) {\n      var _this2 = this;\n\n      this.globalMap.unsignedTx.addOutput(outputData);\n      this.outputs.push({\n        unknownKeyVals: []\n      });\n      var addKeyVals = outputData.unknownKeyVals || [];\n      var outputIndex = this.outputs.length - 1;\n\n      if (!Array.isArray(addKeyVals)) {\n        throw new Error('unknownKeyVals must be an Array');\n      }\n\n      addKeyVals.forEach(function (keyVal) {\n        return _this2.addUnknownKeyValToInput(outputIndex, keyVal);\n      });\n      utils_1.addOutputAttributes(this.outputs, outputData);\n      return this;\n    }\n  }, {\n    key: \"clearFinalizedInput\",\n    value: function clearFinalizedInput(inputIndex) {\n      var input = utils_1.checkForInput(this.inputs, inputIndex);\n      utils_1.inputCheckUncleanFinalized(inputIndex, input);\n\n      for (var _i = 0, _Object$keys = Object.keys(input); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n\n        if (!['witnessUtxo', 'nonWitnessUtxo', 'finalScriptSig', 'finalScriptWitness', 'unknownKeyVals'].includes(key)) {\n          // @ts-ignore\n          delete input[key];\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"combine\",\n    value: function combine() {\n      for (var _len = arguments.length, those = new Array(_len), _key = 0; _key < _len; _key++) {\n        those[_key] = arguments[_key];\n      }\n\n      // Combine this with those.\n      // Return self for chaining.\n      var result = combiner_1.combine([this].concat(those));\n      Object.assign(this, result);\n      return this;\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction() {\n      return this.globalMap.unsignedTx.toBuffer();\n    }\n  }], [{\n    key: \"fromBase64\",\n    value: function fromBase64(data, txFromBuffer) {\n      var buffer = Buffer.from(data, 'base64');\n      return this.fromBuffer(buffer, txFromBuffer);\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(data, txFromBuffer) {\n      var buffer = Buffer.from(data, 'hex');\n      return this.fromBuffer(buffer, txFromBuffer);\n    }\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer, txFromBuffer) {\n      var results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n      var psbt = new this(results.globalMap.unsignedTx);\n      Object.assign(psbt, results);\n      return psbt;\n    }\n  }]);\n\n  return Psbt;\n}();\n\nexports.Psbt = Psbt;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/bip174/src/lib/psbt.js"],"names":["Object","defineProperty","exports","value","combiner_1","require","parser_1","typeFields_1","utils_1","Psbt","tx","inputs","outputs","globalMap","unsignedTx","buffer","toBuffer","toString","psbtToBuffer","updateData","updateGlobal","inputIndex","input","checkForInput","updateInput","outputIndex","output","checkForOutput","updateOutput","keyVal","checkHasKey","unknownKeyVals","getEnumLength","GlobalTypes","push","InputTypes","OutputTypes","inputData","addInput","addKeyVals","length","Array","isArray","Error","forEach","addUnknownKeyValToInput","addInputAttributes","outputData","addOutput","addOutputAttributes","inputCheckUncleanFinalized","keys","key","includes","those","result","combine","concat","assign","data","txFromBuffer","Buffer","from","fromBuffer","results","psbtFromBuffer","psbt"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst combiner_1 = require('./combiner');\nconst parser_1 = require('./parser');\nconst typeFields_1 = require('./typeFields');\nconst utils_1 = require('./utils');\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx,\n    };\n  }\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(\n      keyVal,\n      this.globalMap.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.GlobalTypes),\n    );\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      input.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.InputTypes),\n    );\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      output.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.OutputTypes),\n    );\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(inputIndex, keyVal),\n    );\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(outputIndex, keyVal),\n    );\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n    for (const key of Object.keys(input)) {\n      if (\n        ![\n          'witnessUtxo',\n          'nonWitnessUtxo',\n          'finalScriptSig',\n          'finalScriptWitness',\n          'unknownKeyVals',\n        ].includes(key)\n      ) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n    return this;\n  }\n  combine(...those) {\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n}\nexports.Psbt = Psbt;\n"]},"metadata":{},"sourceType":"script"}