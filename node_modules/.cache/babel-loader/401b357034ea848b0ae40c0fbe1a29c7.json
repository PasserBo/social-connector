{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { Children, cloneElement } from 'react';\nimport { Box } from '../box/index.esm.js';\nimport '../hooks/use-controllable.esm.js';\nimport '../hooks/use-previous.esm.js';\nimport '../hooks/use-disclosure.esm.js';\nimport '../hooks/use-latest-ref.esm.js';\nimport '../hooks/use-event-listener.esm.js';\nimport '../hooks/use-force-update.esm.js';\nimport '../hooks/use-id.esm.js';\nimport '../hooks/use-merge-refs.esm.js';\nimport '../hooks/use-safe-layout-effect.esm.js';\nimport '../hooks/use-timeout.esm.js';\nimport { useTheme } from '../hooks/use-theme.esm.js';\nimport '../hooks/use-color-mode.esm.js';\nimport { inputSizes } from '../input/styles.esm.js';\nimport { InputLeftElement, InputRightElement } from '../input-element/index.esm.js';\nimport { Input } from '../input/index.esm.js';\n\nvar InputGroup = function InputGroup(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'default' : _ref$size,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"size\"]);\n\n  var _useTheme = useTheme(),\n      sizes = _useTheme.sizes;\n\n  var height = inputSizes[size] && inputSizes[size].height;\n  var pl = null;\n  var pr = null;\n  return React__default.createElement(Box, Object.assign({\n    display: \"flex\",\n    position: \"relative\"\n  }, props), Children.map(children, function (child) {\n    if (!React__default.isValidElement(child)) {\n      return null;\n    }\n\n    if (child.type === InputLeftElement) {\n      pl = sizes[height];\n    }\n\n    if (child.type === InputRightElement) {\n      pr = sizes[height];\n    }\n\n    if (child.type === Input) {\n      return cloneElement(child, {\n        width: '100%',\n        pl: child.props.pl || pl,\n        pr: child.props.pr || pr\n      });\n    }\n\n    return cloneElement(child, {\n      size: size\n    });\n  }));\n};\n\nexport { InputGroup };","map":{"version":3,"sources":["../../src/input-group/index.tsx"],"names":["InputGroup","children","size","props","sizes","useTheme","height","inputSizes","pl","pr","display","position","React","child","cloneElement","width"],"mappings":";;;;;;;;;;;;;;;;;;;IAQMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAA;MAAGC,QAAAA,GAAAA,IAAAA,CAAAA,Q;uBAAUC,I;MAAAA,IAAAA,GAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAO,SAAPA,GAAO,S;MAAcC,KAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAAAA,CAAAA,C;;kBACjCE,QAAQ,E;MAAlBD,KAAAA,GAAAA,SAAAA,CAAAA,K;;AACR,MAAME,MAAM,GAAGC,UAAU,CAAVA,IAAU,CAAVA,IAAoBA,UAAU,CAAVA,IAAU,CAAVA,CAAnC,MAAA;AACA,MAAIC,EAAE,GAAN,IAAA;AACA,MAAIC,EAAE,GAAN,IAAA;AACA,SACE,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAKC,IAAAA,OAAO,EAAC,MAAb;AAAoBC,IAAAA,QAAQ,EAAC;AAA7B,GAAA,EAAA,KAAA,CAAA,EACG,QAAQ,CAAR,GAAA,CAAA,QAAA,EAAuB,UAAA,KAAA,EAAK;AAC3B,QAAI,CAACC,cAAK,CAALA,cAAAA,CAAL,KAAKA,CAAL,EAAkC;AAChC,aAAA,IAAA;AACD;;AAED,QAAIC,KAAK,CAALA,IAAAA,KAAJ,gBAAA,EAAqC;AAGnCL,MAAAA,EAAE,GAAGJ,KAAK,CAAVI,MAAU,CAAVA;AACD;;AACD,QAAIK,KAAK,CAALA,IAAAA,KAAJ,iBAAA,EAAsC;AAGpCJ,MAAAA,EAAE,GAAGL,KAAK,CAAVK,MAAU,CAAVA;AACD;;AACD,QAAII,KAAK,CAALA,IAAAA,KAAJ,KAAA,EAA0B;AACxB,aAAOC,YAAY,CAAA,KAAA,EAAQ;AACzBC,QAAAA,KAAK,EADoB,MAAA;AAEzBP,QAAAA,EAAE,EAAEK,KAAK,CAALA,KAAAA,CAAAA,EAAAA,IAFqB,EAAA;AAGzBJ,QAAAA,EAAE,EAAEI,KAAK,CAALA,KAAAA,CAAAA,EAAAA,IAAkBJ;AAHG,OAAR,CAAnB;AAKD;;AACD,WAAOK,YAAY,CAAA,KAAA,EAAQ;AAAEZ,MAAAA,IAAI,EAAJA;AAAF,KAAR,CAAnB;AAxBN,GAEK,CADH,CADF;AA4BD,C","sourcesContent":["import React, { Children, cloneElement } from 'react';\nimport { Box } from '../box';\nimport { Input } from '../input';\nimport { inputSizes } from '../input/styles';\nimport { InputLeftElement, InputRightElement } from '../input-element';\nimport { useTheme } from '../hooks';\nimport { InputGroupProps } from './types';\n\nconst InputGroup = ({ children, size = 'default', ...props }: InputGroupProps) => {\n  const { sizes } = useTheme();\n  const height = inputSizes[size] && inputSizes[size].height;\n  let pl: string | null = null;\n  let pr: string | null = null;\n  return (\n    <Box display=\"flex\" position=\"relative\" {...props}>\n      {Children.map(children, child => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (child.type === InputLeftElement) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          // @ts-ignore\n          pl = sizes[height];\n        }\n        if (child.type === InputRightElement) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          // @ts-ignore\n          pr = sizes[height];\n        }\n        if (child.type === Input) {\n          return cloneElement(child, {\n            width: '100%',\n            pl: child.props.pl || pl,\n            pr: child.props.pr || pr,\n          });\n        }\n        return cloneElement(child, { size });\n      })}\n    </Box>\n  );\n};\n\nexport { InputGroup };\n"]},"metadata":{},"sourceType":"module"}