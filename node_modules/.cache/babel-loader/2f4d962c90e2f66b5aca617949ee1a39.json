{"ast":null,"code":"import mock from '../mock';\n/*eslint-disable */\n\nconst previousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000);\nconst dayBeforePreviousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000 * 2);\nconst data = {\n  profileUser: {\n    id: 11,\n    avatar: require('@src/assets/images/portrait/small/avatar-s-8.jpg').default,\n    fullName: 'InstaFriend - Blackboy',\n    role: 'Tour Guide',\n    about: 'Hi! Blackboy here. I can help you with place navigation, location tips and tricks and screen validation. Just tell me what you need and boom! Tour charge: 10 STX, Location Video charge: 5 STX.',\n    status: 'online',\n    settings: {\n      isTwoStepAuthVerificationEnabled: true,\n      isNotificationsOn: false\n    }\n  },\n  contacts: [{\n    id: 1,\n    fullName: 'FlowerPower',\n    role: 'Auditor',\n    about: 'Bitfari Auditor, ready to take pictures of your ads running so you can double check foot traffic at any hour of the day. Location Video charge: 7 STX.',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-2.jpg').default,\n    status: 'offline'\n  }, {\n    id: 2,\n    fullName: 'VirtualNeighbor',\n    role: 'Local Friend',\n    about: 'For 5 STX you get 15 mins to ask me anything about the place. General inquiries also welcome. Glad to help!',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-1.jpg').default,\n    status: 'busy'\n  }],\n  chats: [{\n    id: 1,\n    userId: 1,\n    unseenMsgs: 0,\n    chat: [{\n      message: 'Hi, this is an InstaFriend Preview 👍',\n      time: 'Mon Aug 20 2021 07:45:00 GMT+0000 (GMT)',\n      senderId: 11\n    }, {\n      message: 'Bitfari users gather here to talk about the place!',\n      time: 'Mon Aug 20 2021 07:45:15 GMT+0000 (GMT)',\n      senderId: 2\n    }, {\n      message: 'They can book tours, gain location insights and even see their ads running in realtime via InstaFriend',\n      time: 'Mon Aug 20 2021 07:46:10 GMT+0000 (GMT)',\n      senderId: 11\n    }, {\n      message: 'InstaFriend goes live with the Parra release!!',\n      time: 'Mon Dec 11 2018 07:45:15 GMT+0000 (GMT)',\n      senderId: 2\n    }]\n  }]\n};\n/*eslint-enable */\n// ------------------------------------------------\n// GET: Return Chats Contacts and Contacts\n// ------------------------------------------------\n\nmock.onGet('/apps/chat/chats-and-contacts').reply(() => {\n  const chatsContacts = data.chats.map(chat => {\n    const contact = data.contacts.find(c => c.id === chat.userId);\n    contact.chat = {\n      id: chat.id,\n      unseenMsgs: chat.unseenMsgs,\n      lastMessage: chat.chat[chat.chat.length - 1]\n    };\n    return contact;\n  });\n  const profileUserData = {\n    id: data.profileUser.id,\n    avatar: data.profileUser.avatar,\n    fullName: data.profileUser.fullName,\n    status: data.profileUser.status\n  };\n  return [200, {\n    chatsContacts,\n    contacts: data.contacts,\n    profileUser: profileUserData\n  }];\n}); // ------------------------------------------------\n// GET: Return User Profile\n// ------------------------------------------------\n\nmock.onGet('/apps/chat/users/profile-user').reply(() => [200, data.profileUser]); // ------------------------------------------------\n// GET: Return Single Chat\n// ------------------------------------------------\n\nmock.onGet('/apps/chat/get-chat').reply(config => {\n  // Get event id from URL\n  let userId = config.id; //  Convert Id to number\n\n  userId = Number(userId);\n  const chat = data.chats.find(c => c.id === userId);\n  if (chat) chat.unseenMsgs = 0;\n  const contact = data.contacts.find(c => c.id === userId);\n  if (contact.chat) contact.chat.unseenMsgs = 0;\n  return [200, {\n    chat,\n    contact\n  }];\n}); // ------------------------------------------------\n// POST: Add new chat message\n// ------------------------------------------------\n\nmock.onPost('/apps/chat/send-msg').reply(config => {\n  // Get event from post data\n  const {\n    obj\n  } = JSON.parse(config.data);\n  let activeChat = data.chats.find(chat => chat.userId === obj.contact.id);\n  const newMessageData = {\n    message: obj.message,\n    time: new Date(),\n    senderId: 11\n  }; // If there's new chat for user create one\n\n  let isNewChat = false;\n\n  if (activeChat === undefined) {\n    isNewChat = true; // const { length } = data.chats\n    // const lastId = data.chats[length - 1].id\n\n    data.chats.push({\n      id: obj.contact.id,\n      userId: obj.contact.id,\n      unseenMsgs: 0,\n      chat: [newMessageData]\n    });\n    activeChat = data.chats[data.chats.length - 1];\n  } else {\n    activeChat.chat.push(newMessageData);\n  }\n\n  const response = {\n    newMessageData,\n    id: obj.contact.id\n  };\n  if (isNewChat) response.chat = activeChat;\n  return [201, {\n    response\n  }];\n});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/@fake-db/apps/chat.js"],"names":["mock","previousDay","Date","getTime","dayBeforePreviousDay","data","profileUser","id","avatar","require","default","fullName","role","about","status","settings","isTwoStepAuthVerificationEnabled","isNotificationsOn","contacts","chats","userId","unseenMsgs","chat","message","time","senderId","onGet","reply","chatsContacts","map","contact","find","c","lastMessage","length","profileUserData","config","Number","onPost","obj","JSON","parse","activeChat","newMessageData","isNewChat","undefined","push","response"],"mappings":"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","sourcesContent":["import mock from '../mock'\r\n/*eslint-disable */\r\nconst previousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000)\r\nconst dayBeforePreviousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000 * 2)\r\n\r\nconst data = {\r\n  profileUser: {\r\n    id: 11,\r\n    avatar: require('@src/assets/images/portrait/small/avatar-s-8.jpg').default,\r\n    fullName: 'InstaFriend - Blackboy',\r\n    role: 'Tour Guide',\r\n    about:\r\n      'Hi! Blackboy here. I can help you with place navigation, location tips and tricks and screen validation. Just tell me what you need and boom! Tour charge: 10 STX, Location Video charge: 5 STX.',\r\n    status: 'online',\r\n    settings: {\r\n      isTwoStepAuthVerificationEnabled: true,\r\n      isNotificationsOn: false\r\n    }\r\n  },\r\n  contacts: [\r\n    {\r\n      id: 1,\r\n      fullName: 'FlowerPower',\r\n      role: 'Auditor',\r\n      about: 'Bitfari Auditor, ready to take pictures of your ads running so you can double check foot traffic at any hour of the day. Location Video charge: 7 STX.',\r\n\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-2.jpg').default,\r\n      status: 'offline'\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'VirtualNeighbor',\r\n      role: 'Local Friend',\r\n      about:\r\n        'For 5 STX you get 15 mins to ask me anything about the place. General inquiries also welcome. Glad to help!',\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-1.jpg').default,\r\n      status: 'busy'\r\n    }\r\n  ],\r\n  chats: [\r\n    {\r\n      id: 1,\r\n      userId: 1,\r\n      unseenMsgs: 0,\r\n      chat: [\r\n        {\r\n          message: 'Hi, this is an InstaFriend Preview 👍',\r\n          time: 'Mon Aug 20 2021 07:45:00 GMT+0000 (GMT)',\r\n          senderId: 11\r\n        },\r\n        {\r\n          message: 'Bitfari users gather here to talk about the place!',\r\n          time: 'Mon Aug 20 2021 07:45:15 GMT+0000 (GMT)',\r\n          senderId: 2\r\n        },\r\n        {\r\n          message: 'They can book tours, gain location insights and even see their ads running in realtime via InstaFriend',\r\n          time: 'Mon Aug 20 2021 07:46:10 GMT+0000 (GMT)',\r\n          senderId: 11\r\n        },\r\n        {\r\n          message: 'InstaFriend goes live with the Parra release!!',\r\n          time: 'Mon Dec 11 2018 07:45:15 GMT+0000 (GMT)',\r\n          senderId: 2\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n/*eslint-enable */\r\n// ------------------------------------------------\r\n// GET: Return Chats Contacts and Contacts\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/chats-and-contacts').reply(() => {\r\n  const chatsContacts = data.chats.map(chat => {\r\n    const contact = data.contacts.find(c => c.id === chat.userId)\r\n    contact.chat = { id: chat.id, unseenMsgs: chat.unseenMsgs, lastMessage: chat.chat[chat.chat.length - 1] }\r\n    return contact\r\n  })\r\n  const profileUserData = {\r\n    id: data.profileUser.id,\r\n    avatar: data.profileUser.avatar,\r\n    fullName: data.profileUser.fullName,\r\n    status: data.profileUser.status\r\n  }\r\n  return [200, { chatsContacts, contacts: data.contacts, profileUser: profileUserData }]\r\n})\r\n\r\n// ------------------------------------------------\r\n// GET: Return User Profile\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/users/profile-user').reply(() => [200, data.profileUser])\r\n\r\n// ------------------------------------------------\r\n// GET: Return Single Chat\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/get-chat').reply(config => {\r\n  // Get event id from URL\r\n\r\n  let userId = config.id\r\n\r\n  //  Convert Id to number\r\n  userId = Number(userId)\r\n\r\n  const chat = data.chats.find(c => c.id === userId)\r\n  if (chat) chat.unseenMsgs = 0\r\n  const contact = data.contacts.find(c => c.id === userId)\r\n  if (contact.chat) contact.chat.unseenMsgs = 0\r\n  return [200, { chat, contact }]\r\n})\r\n\r\n// ------------------------------------------------\r\n// POST: Add new chat message\r\n// ------------------------------------------------\r\nmock.onPost('/apps/chat/send-msg').reply(config => {\r\n  // Get event from post data\r\n  const { obj } = JSON.parse(config.data)\r\n\r\n  let activeChat = data.chats.find(chat => chat.userId === obj.contact.id)\r\n\r\n  const newMessageData = {\r\n    message: obj.message,\r\n    time: new Date(),\r\n    senderId: 11\r\n  }\r\n  // If there's new chat for user create one\r\n  let isNewChat = false\r\n  if (activeChat === undefined) {\r\n    isNewChat = true\r\n\r\n    // const { length } = data.chats\r\n    // const lastId = data.chats[length - 1].id\r\n\r\n    data.chats.push({\r\n      id: obj.contact.id,\r\n      userId: obj.contact.id,\r\n      unseenMsgs: 0,\r\n      chat: [newMessageData]\r\n    })\r\n    activeChat = data.chats[data.chats.length - 1]\r\n  } else {\r\n    activeChat.chat.push(newMessageData)\r\n  }\r\n\r\n  const response = { newMessageData, id: obj.contact.id }\r\n  if (isNewChat) response.chat = activeChat\r\n\r\n  return [201, { response }]\r\n})\r\n"]},"metadata":{},"sourceType":"module"}