{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { Children, cloneElement } from 'react';\nimport { Box } from '../box/index.esm.js';\n\nvar ButtonGroup = function ButtonGroup(_ref) {\n  var size = _ref.size,\n      variantColor = _ref.variantColor,\n      variant = _ref.variant,\n      isAttached = _ref.isAttached,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"size\", \"variantColor\", \"variant\", \"isAttached\", \"spacing\", \"children\"]);\n\n  var clones = Children.map(children, function (child, index) {\n    var isFirst = index === 0;\n    var isLast = index === Children.count(children) - 1;\n\n    if (!React__default.isValidElement(child)) {\n      return null;\n    }\n\n    return cloneElement(child, _objectSpread2({\n      size: size || child.props.size,\n      variantColor: child.props.variantColor || variantColor,\n      variant: child.props.variant || variant,\n      _focus: {\n        boxShadow: 'outline',\n        zIndex: 1\n      }\n    }, !isLast && !isAttached && {\n      mr: spacing\n    }, {}, isFirst && isAttached && {\n      roundedRight: 0\n    }, {}, isLast && isAttached && {\n      roundedLeft: 0\n    }, {}, !isFirst && !isLast && isAttached && {\n      rounded: 0\n    }));\n  });\n  return React__default.createElement(Box, Object.assign({\n    display: \"inline-block\"\n  }, rest), clones);\n};\n\nButtonGroup.displayName = 'ButtonGroup';\nexport { ButtonGroup };","map":{"version":3,"sources":["../../src/button-group/index.tsx"],"names":["ButtonGroup","size","variantColor","variant","isAttached","spacing","children","rest","clones","isFirst","index","isLast","Children","React","cloneElement","child","_focus","boxShadow","zIndex","mr","roundedRight","roundedLeft","rounded","display"],"mappings":";;;;IAIMA,WAAW,GAA+B,SAA1CA,WAA0C,CAAA,IAAA,EAAA;MAC9CC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAC,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAC,OAAAA,GAAAA,IAAAA,CAAAA,O;MACAC,UAAAA,GAAAA,IAAAA,CAAAA,U;0BACAC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,CAAVA,GAAU,Y;MACVC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACGC,IAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,MAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,YAAAA,EAAAA,SAAAA,EAAAA,UAAAA,CAAAA,C;;AAEH,MAAMC,MAAM,GAAG,QAAQ,CAAR,GAAA,CAAA,QAAA,EAAuB,UAAA,KAAA,EAAA,KAAA,EAAA;AACpC,QAAMC,OAAO,GAAGC,KAAK,KAArB,CAAA;AACA,QAAMC,MAAM,GAAGD,KAAK,KAAKE,QAAQ,CAARA,KAAAA,CAAAA,QAAAA,IAAzB,CAAA;;AAEA,QAAI,CAACC,cAAK,CAALA,cAAAA,CAAL,KAAKA,CAAL,EAAkC;AAChC,aAAA,IAAA;AACD;;AAED,WAAOC,YAAY,CAAA,KAAA,EAAA,cAAA,CAAA;AACjBb,MAAAA,IAAI,EAAEA,IAAI,IAAIc,KAAK,CAALA,KAAAA,CADG,IAAA;AAEjBb,MAAAA,YAAY,EAAEa,KAAK,CAALA,KAAAA,CAAAA,YAAAA,IAFG,YAAA;AAGjBZ,MAAAA,OAAO,EAAEY,KAAK,CAALA,KAAAA,CAAAA,OAAAA,IAHQ,OAAA;AAIjBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,SAAS,EAAX,SAAA;AAAwBC,QAAAA,MAAM,EAAE;AAAhC;AAJS,KAAA,EAKb,CAAA,MAAA,IAAW,CAAX,UAAA,IAA0B;AAAEC,MAAAA,EAAE,EAAEd;AAAN,KALb,EAAA,EAAA,EAMbI,OAAO,IAAPA,UAAAA,IAAyB;AAAEW,MAAAA,YAAY,EAAE;AAAhB,KANZ,EAAA,EAAA,EAObT,MAAM,IAANA,UAAAA,IAAwB;AAAEU,MAAAA,WAAW,EAAE;AAAf,KAPX,EAAA,EAAA,EAQb,CAAA,OAAA,IAAY,CAAZ,MAAA,IAAA,UAAA,IAAqC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KARxB,CAAA,CAAnB;AARF,GAAe,CAAf;AAoBA,SACET,cAAAA,CAAAA,aAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAAKU,IAAAA,OAAO,EAAC;AAAbV,GAAAA,EAAAA,IAAAA,CAAAA,EADF,MACEA,CADF;AAKD,C;;AAEDb,WAAW,CAAXA,WAAAA,GAAAA,aAAAA","sourcesContent":["import React, { Children, cloneElement } from 'react';\nimport { Box } from '../box';\nimport { ButtonGroupProps } from './types';\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  size,\n  variantColor,\n  variant,\n  isAttached,\n  spacing = 2,\n  children,\n  ...rest\n}) => {\n  const clones = Children.map(children, (child, index) => {\n    const isFirst = index === 0;\n    const isLast = index === Children.count(children) - 1;\n\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    return cloneElement(child, {\n      size: size || child.props.size,\n      variantColor: child.props.variantColor || variantColor,\n      variant: child.props.variant || variant,\n      _focus: { boxShadow: 'outline', zIndex: 1 },\n      ...(!isLast && !isAttached && { mr: spacing }),\n      ...(isFirst && isAttached && { roundedRight: 0 }),\n      ...(isLast && isAttached && { roundedLeft: 0 }),\n      ...(!isFirst && !isLast && isAttached && { rounded: 0 }),\n    });\n  });\n\n  return (\n    <Box display=\"inline-block\" {...rest}>\n      {clones}\n    </Box>\n  );\n};\n\nButtonGroup.displayName = 'ButtonGroup';\n\nexport { ButtonGroup };\n"]},"metadata":{},"sourceType":"module"}