{"ast":null,"code":"import mock from '../mock';\nimport jwt from 'jsonwebtoken';\nconst data = {\n  users: [{\n    id: 1,\n    fullName: 'John Doe',\n    username: 'johndoe',\n    password: 'admin',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n    email: 'admin@demo.com',\n    role: 'admin',\n    ability: [{\n      action: 'manage',\n      subject: 'all'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 1\n    }\n  }]\n};\nconst email = 'admin@demo.com';\nconst username = 'johndoe';\nconst password = 'admin'; // credentials hard wired to bypass jwt auth and just keep stacks auth\n\nconst user = data.users.find(u => u.email === email && u.password === password); // ! These two secrets shall be in .env file and not in any other file\n\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n};\nmock.onPost('/jwt/login').reply(request => {\n  const {\n    email1,\n    password1\n  } = JSON.parse(request.data);\n  let error = {\n    email1: ['Something went wrong'],\n    password1: ['Something went wrong']\n  };\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const refreshToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      });\n      const userData = { ...user\n      };\n      delete userData.password;\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    };\n  }\n\n  return [400, {\n    error\n  }];\n});\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email);\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username);\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    };\n\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: 'Bitfari SC',\n        avatar: null,\n        role: 'admin',\n        ability: [{\n          action: 'manage',\n          subject: 'all'\n        }]\n      }; // Add user id\n\n      const length = data.users.length;\n      let lastIndex = 0;\n\n      if (length) {\n        lastIndex = data.users[length - 1].id;\n      }\n\n      userData.id = lastIndex + 1;\n      data.users.push(userData);\n      const accessToken = jwt.sign({\n        id: userData.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const user = Object.assign({}, userData);\n      delete user['password'];\n      const response = {\n        user,\n        accessToken\n      };\n      return [200, response];\n    } else {\n      return [200, {\n        error\n      }];\n    }\n  }\n});\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const {\n    refreshToken\n  } = JSON.parse(request.data);\n\n  try {\n    const {\n      id\n    } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret);\n    const userData = { ...data.users.find(user => user.id === id)\n    };\n    const newAccessToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const newRefreshToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    });\n    delete userData.password;\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    };\n    return [200, response];\n  } catch (e) {\n    const error = 'Invalid refresh token';\n    return [401, {\n      error\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/@local-db/jwt/index.js"],"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","user","find","u","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","email1","password1","JSON","parse","error","accessToken","sign","expiresIn","refreshToken","userData","response","e","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken"],"mappings":"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","sourcesContent":["import mock from '../mock'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst data = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      fullName: 'John Doe',\r\n      username: 'johndoe',\r\n      password: 'admin',\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\r\n      email: 'admin@demo.com',\r\n      role: 'admin',\r\n      ability: [\r\n        {\r\n          action: 'manage',\r\n          subject: 'all'\r\n        }\r\n      ],\r\n      extras: {\r\n        eCommerceCartItemsCount: 1\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nconst email = 'admin@demo.com'\r\nconst username = 'johndoe'\r\nconst password = 'admin'\r\n\r\n// credentials hard wired to bypass jwt auth and just keep stacks auth\r\nconst user = data.users.find(u => u.email === email && u.password === password)\r\n\r\n// ! These two secrets shall be in .env file and not in any other file\r\nconst jwtConfig = {\r\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\r\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\r\n  expireTime: '10m',\r\n  refreshTokenExpireTime: '10m'\r\n}\r\n\r\nmock.onPost('/jwt/login').reply(request => {\r\n\r\n  const { email1, password1 } = JSON.parse(request.data)\r\n\r\n  let error = {\r\n    email1: ['Something went wrong'],\r\n    password1: ['Something went wrong']\r\n  }\r\n\r\n\r\n  if (user) {\r\n    try {\r\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\r\n        expiresIn: jwtConfig.refreshTokenExpireTime\r\n      })\r\n\r\n      const userData = { ...user }\r\n      delete userData.password\r\n      const response = {\r\n        userData,\r\n        accessToken,\r\n        refreshToken\r\n      }\r\n\r\n      return [200, response]\r\n    } catch (e) {\r\n      error = e\r\n    }\r\n  } else {\r\n    error = {\r\n      email: ['Email or Password is Invalid']\r\n    }\r\n  }\r\n\r\n  return [400, { error }]\r\n})\r\n\r\nmock.onPost('/jwt/register').reply(request => {\r\n  if (request.data.length > 0) {\r\n\r\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\r\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\r\n    const error = {\r\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\r\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\r\n    }\r\n\r\n    if (!error.username && !error.email) {\r\n      const userData = {\r\n        email,\r\n        password,\r\n        username,\r\n        fullName: 'Bitfari SC',\r\n        avatar: null,\r\n        role: 'admin',\r\n        ability: [\r\n          {\r\n            action: 'manage',\r\n            subject: 'all'\r\n          }\r\n        ]\r\n      }\r\n\r\n      // Add user id\r\n      const length = data.users.length\r\n      let lastIndex = 0\r\n      if (length) {\r\n        lastIndex = data.users[length - 1].id\r\n      }\r\n      userData.id = lastIndex + 1\r\n\r\n      data.users.push(userData)\r\n\r\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n\r\n      const user = Object.assign({}, userData)\r\n      delete user['password']\r\n      const response = { user, accessToken }\r\n\r\n      return [200, response]\r\n    } else {\r\n      return [200, { error }]\r\n    }\r\n  }\r\n})\r\n\r\nmock.onPost('/jwt/refresh-token').reply(request => {\r\n  const { refreshToken } = JSON.parse(request.data)\r\n\r\n  try {\r\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\r\n    const userData = { ...data.users.find(user => user.id === id) }\r\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\r\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\r\n      expiresIn: jwtConfig.refreshTokenExpireTime\r\n    })\r\n\r\n    delete userData.password\r\n    const response = {\r\n      userData,\r\n      accessToken: newAccessToken,\r\n      refreshToken: newRefreshToken\r\n    }\r\n\r\n    return [200, response]\r\n  } catch (e) {\r\n    const error = 'Invalid refresh token'\r\n    return [401, { error }]\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}