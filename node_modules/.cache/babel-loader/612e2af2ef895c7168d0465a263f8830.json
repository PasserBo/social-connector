{"ast":null,"code":"import { useId as useId$1 } from '@reach/auto-id';\n\nfunction generatePrefix(prefix, id) {\n  return prefix + \"-\" + id;\n}\n\nfunction useId(idProp, prefix) {\n  var uuid = useId$1();\n  var id = idProp !== null && idProp !== void 0 ? idProp : uuid;\n  return prefix ? generatePrefix(prefix, id) : id;\n}\n\nfunction useIds(idProp) {\n  var id = useId(idProp);\n\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  return prefixes.map(function (prefix) {\n    return generatePrefix(prefix, id);\n  });\n}\n\nexport { useId, useIds };","map":{"version":3,"sources":["../../src/hooks/use-id.ts"],"names":["prefix","useId","idProp","uuid","useUID","id","generatePrefix","useIds","prefixes"],"mappings":";;AAEA,SAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAAA;AACE,SAAUA,MAAV,GAAA,GAAUA,GAAV,EAAA;AACD;;SAQeC,K,CAAMC,M,EAAiBF,M,EAAAA;AACrC,MAAMG,IAAI,GAAGC,OAAb,EAAA;AACA,MAAMC,EAAE,GAAGH,MAAH,KAAA,IAAGA,IAAAA,MAAH,KAAA,KAAA,CAAGA,GAAH,MAAGA,GAAX,IAAA;AACA,SAAOF,MAAM,GAAGM,cAAc,CAAA,MAAA,EAAjB,EAAiB,CAAjB,GAAb,EAAA;AACD;;SAiBeC,M,CAAOL,M,EAAAA;AACrB,MAAMG,EAAE,GAAGJ,KAAK,CAAhB,MAAgB,CAAhB;;oCADyCO,QAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,GAAAA,CAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GAAAA,CAAAA,C,EAAAA,IAAAA,GAAAA,C,EAAAA,IAAAA,GAAAA,I,EAAAA,IAAAA,E,EAAAA;AAAAA,IAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;;AAEzC,SAAO,QAAQ,CAAR,GAAA,CAAa,UAAA,MAAA,EAAM;AAAA,WAAIF,cAAc,CAAA,MAAA,EAAlB,EAAkB,CAAlB;AAA1B,GAAO,CAAP;AACD","sourcesContent":["import { useId as useUID } from '@reach/auto-id';\n\nfunction generatePrefix(prefix: string, id: string) {\n  return `${prefix}-${id}`;\n}\n\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\nexport function useId(idProp?: string, prefix?: string) {\n  const uuid = useUID() as string;\n  const id = idProp ?? uuid;\n  return prefix ? generatePrefix(prefix, id) : id;\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp);\n  return prefixes.map(prefix => generatePrefix(prefix, id));\n}\n"]},"metadata":{},"sourceType":"module"}