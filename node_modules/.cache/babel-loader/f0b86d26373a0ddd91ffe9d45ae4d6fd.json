{"ast":null,"code":"import mock from '../mock';\nconst data = {\n  tasks: [{\n    id: 1,\n    title: 'Buy a blender',\n    dueDate: '2020-08-20',\n    description: 'I want deals on blenders, show me new models.',\n    assignee: {\n      fullName: '',\n      avatar: ''\n    },\n    tags: ['update'],\n    isCompleted: false,\n    isDeleted: false,\n    isImportant: false\n  }, {\n    id: 2,\n    title: 'Movies',\n    dueDate: '2021-08-20',\n    description: 'Movie Trailers.',\n    assignee: {\n      fullName: '',\n      avatar: ''\n    },\n    tags: ['team', 'medium'],\n    isCompleted: false,\n    isDeleted: false,\n    isImportant: false\n  }, {\n    id: 3,\n    title: 'Amazing restaurants in Pittsburgh ❤️',\n    dueDate: '2021-08-20',\n    description: 'Find a restaurant for my aniversary!',\n    assignee: {\n      fullName: '',\n      avatar: ''\n    },\n    tags: ['high'],\n    isCompleted: false,\n    isDeleted: false,\n    isImportant: false\n  }]\n}; // ------------------------------------------------\n// GET: Return Tasks\n// ------------------------------------------------\n\nmock.onGet('/apps/todo/tasks').reply(config => {\n  // eslint-disable-next-line object-curly-newline\n  const {\n    q = '',\n    filter,\n    tag,\n    sortBy: sortByParam = 'latest'\n  } = config.params;\n  /* eslint-enable */\n  // ------------------------------------------------\n  // Get Sort by and Sort Direction\n  // ------------------------------------------------\n\n  let sortDesc = true;\n\n  const sortBy = (() => {\n    if (sortByParam === 'title-asc') {\n      sortDesc = false;\n      return 'title';\n    }\n\n    if (sortByParam === 'title-desc') return 'title';\n\n    if (sortByParam === 'assignee') {\n      sortDesc = false;\n      return 'assignee';\n    }\n\n    if (sortByParam === 'due-date') {\n      sortDesc = false;\n      return 'dueDate';\n    }\n\n    return 'id';\n  })(); // ------------------------------------------------\n  // Filtering\n  // ------------------------------------------------\n\n\n  const queryLowered = q.toLowerCase();\n\n  const hasFilter = task => {\n    if (filter === 'important') return task.isImportant && !task.isDeleted;\n    if (filter === 'completed') return task.isCompleted && !task.isDeleted;\n    if (filter === 'deleted') return task.isDeleted;\n    return !task.isDeleted;\n  };\n  /* eslint-disable */\n\n\n  const filteredData = data.tasks.filter(task => {\n    return task.title.toLowerCase().includes(queryLowered) && hasFilter(task) && (tag ? task.tags.includes(tag) : true);\n  });\n  /* eslint-enable  */\n  // ------------------------------------------------\n  // Perform sorting\n  // ------------------------------------------------\n\n  const sortTasks = key => (a, b) => {\n    let fieldA;\n    let fieldB; // If sorting is by dueDate => Convert data to date\n\n    if (key === 'dueDate') {\n      fieldA = new Date(a[key]);\n      fieldB = new Date(b[key]); // eslint-disable-next-line brace-style\n    } // If sorting is by assignee => Use `fullName` of assignee\n    else if (key === 'assignee') {\n      fieldA = a.assignee ? a.assignee.fullName : null;\n      fieldB = b.assignee ? b.assignee.fullName : null;\n    } else {\n      fieldA = a[key];\n      fieldB = b[key];\n    }\n\n    let comparison = 0;\n\n    if (fieldA === fieldB) {\n      comparison = 0;\n    } else if (fieldA === null) {\n      comparison = 1;\n    } else if (fieldB === null) {\n      comparison = -1;\n    } else if (fieldA > fieldB) {\n      comparison = 1;\n    } else if (fieldA < fieldB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  }; // Sort Data\n\n\n  const sortedData = filteredData.sort(sortTasks(sortBy));\n  if (sortDesc) sortedData.reverse();\n  return [200, sortedData];\n}); // ------------------------------------------------\n// POST: Add new task\n// ------------------------------------------------\n\nmock.onPost('/apps/todo/add-tasks').reply(config => {\n  // Get event from post data\n  const {\n    task\n  } = JSON.parse(config.data);\n  const {\n    length\n  } = data.tasks;\n  let lastIndex = 0;\n\n  if (length) {\n    lastIndex = data.tasks[length - 1].id;\n  }\n\n  task.id = lastIndex + 1;\n  data.tasks.push(task);\n  return [201, {\n    task\n  }];\n}); // ------------------------------------------------\n// POST: Update Task\n// ------------------------------------------------\n\nmock.onPost('/apps/todo/update-task').reply(config => {\n  const taskData = JSON.parse(config.data).task; // Convert Id to number\n\n  taskData.id = Number(taskData.id);\n  const task = data.tasks.find(e => e.id === Number(taskData.id));\n  Object.assign(task, taskData);\n  return [200, {\n    task\n  }];\n}); // ------------------------------------------------\n// DELETE: Remove Task\n// ------------------------------------------------\n\nmock.onDelete('/apps/todo/delete-task').reply(config => {\n  // Get task id from URL\n  let taskId = config.taskId; // Convert Id to number\n\n  taskId = Number(taskId);\n  const task = data.tasks.find(t => t.id === taskId);\n  Object.assign(task, {\n    isDeleted: true\n  });\n  return [200];\n});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/@fake-db/apps/todo.js"],"names":["mock","data","tasks","id","title","dueDate","description","assignee","fullName","avatar","tags","isCompleted","isDeleted","isImportant","onGet","reply","config","q","filter","tag","sortBy","sortByParam","params","sortDesc","queryLowered","toLowerCase","hasFilter","task","filteredData","includes","sortTasks","key","a","b","fieldA","fieldB","Date","comparison","sortedData","sort","reverse","onPost","JSON","parse","length","lastIndex","push","taskData","Number","find","e","Object","assign","onDelete","taskId","t"],"mappings":"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","sourcesContent":["import mock from '../mock'\n\nconst data = {\n  tasks: [\n    {\n      id: 1,\n      title: 'Buy a blender',\n      dueDate: '2020-08-20',\n      description:\n        'I want deals on blenders, show me new models.',\n      assignee: {\n        fullName: '',\n        avatar: ''\n      },\n      tags: ['update'],\n      isCompleted: false,\n      isDeleted: false,\n      isImportant: false\n    },\n    {\n      id: 2,\n      title: 'Movies',\n      dueDate: '2021-08-20',\n      description:\n        'Movie Trailers.',\n      assignee: {\n        fullName: '',\n        avatar: ''\n      },\n      tags: ['team', 'medium'],\n      isCompleted: false,\n      isDeleted: false,\n      isImportant: false\n    },\n    {\n      id: 3,\n      title: 'Amazing restaurants in Pittsburgh ❤️',\n      dueDate: '2021-08-20',\n      description:\n        'Find a restaurant for my aniversary!',\n      assignee: {\n        fullName: '',\n        avatar: ''\n      },\n      tags: ['high'],\n      isCompleted: false,\n      isDeleted: false,\n      isImportant: false\n    }\n  ]\n}\n\n// ------------------------------------------------\n// GET: Return Tasks\n// ------------------------------------------------\nmock.onGet('/apps/todo/tasks').reply(config => {\n  // eslint-disable-next-line object-curly-newline\n  const { q = '', filter, tag, sortBy: sortByParam = 'latest' } = config.params\n  /* eslint-enable */\n  // ------------------------------------------------\n  // Get Sort by and Sort Direction\n  // ------------------------------------------------\n  let sortDesc = true\n\n  const sortBy = (() => {\n    if (sortByParam === 'title-asc') {\n      sortDesc = false\n      return 'title'\n    }\n    if (sortByParam === 'title-desc') return 'title'\n    if (sortByParam === 'assignee') {\n      sortDesc = false\n      return 'assignee'\n    }\n    if (sortByParam === 'due-date') {\n      sortDesc = false\n      return 'dueDate'\n    }\n    return 'id'\n  })()\n\n  // ------------------------------------------------\n  // Filtering\n  // ------------------------------------------------\n  const queryLowered = q.toLowerCase()\n\n  const hasFilter = task => {\n    if (filter === 'important') return task.isImportant && !task.isDeleted\n    if (filter === 'completed') return task.isCompleted && !task.isDeleted\n    if (filter === 'deleted') return task.isDeleted\n    return !task.isDeleted\n  }\n  /* eslint-disable */\n  const filteredData = data.tasks.filter(task => {\n    return task.title.toLowerCase().includes(queryLowered) && hasFilter(task) && (tag ? task.tags.includes(tag) : true)\n  })\n  /* eslint-enable  */\n\n  // ------------------------------------------------\n  // Perform sorting\n  // ------------------------------------------------\n  const sortTasks = key => (a, b) => {\n    let fieldA\n    let fieldB\n\n    // If sorting is by dueDate => Convert data to date\n    if (key === 'dueDate') {\n      fieldA = new Date(a[key])\n      fieldB = new Date(b[key])\n      // eslint-disable-next-line brace-style\n    }\n\n    // If sorting is by assignee => Use `fullName` of assignee\n    else if (key === 'assignee') {\n      fieldA = a.assignee ? a.assignee.fullName : null\n      fieldB = b.assignee ? b.assignee.fullName : null\n    } else {\n      fieldA = a[key]\n      fieldB = b[key]\n    }\n\n    let comparison = 0\n\n    if (fieldA === fieldB) {\n      comparison = 0\n    } else if (fieldA === null) {\n      comparison = 1\n    } else if (fieldB === null) {\n      comparison = -1\n    } else if (fieldA > fieldB) {\n      comparison = 1\n    } else if (fieldA < fieldB) {\n      comparison = -1\n    }\n\n    return comparison\n  }\n\n  // Sort Data\n  const sortedData = filteredData.sort(sortTasks(sortBy))\n  if (sortDesc) sortedData.reverse()\n  return [200, sortedData]\n})\n\n// ------------------------------------------------\n// POST: Add new task\n// ------------------------------------------------\nmock.onPost('/apps/todo/add-tasks').reply(config => {\n  // Get event from post data\n  const { task } = JSON.parse(config.data)\n\n  const { length } = data.tasks\n  let lastIndex = 0\n  if (length) {\n    lastIndex = data.tasks[length - 1].id\n  }\n  task.id = lastIndex + 1\n\n  data.tasks.push(task)\n\n  return [201, { task }]\n})\n\n// ------------------------------------------------\n// POST: Update Task\n// ------------------------------------------------\nmock.onPost('/apps/todo/update-task').reply(config => {\n  const taskData = JSON.parse(config.data).task\n\n  // Convert Id to number\n  taskData.id = Number(taskData.id)\n\n  const task = data.tasks.find(e => e.id === Number(taskData.id))\n  Object.assign(task, taskData)\n\n  return [200, { task }]\n})\n\n// ------------------------------------------------\n// DELETE: Remove Task\n// ------------------------------------------------\nmock.onDelete('/apps/todo/delete-task').reply(config => {\n  // Get task id from URL\n  let taskId = config.taskId\n\n  // Convert Id to number\n  taskId = Number(taskId)\n\n  const task = data.tasks.find(t => t.id === taskId)\n  Object.assign(task, { isDeleted: true })\n  return [200]\n})\n"]},"metadata":{},"sourceType":"module"}