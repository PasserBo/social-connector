{"ast":null,"code":"// ** React Imports\nimport{Fragment,useEffect}from'react';// ** Third Party Components\nimport Prism from'prismjs';// ** Reactstrap Imports\nimport{Row,Col,CardText}from'reactstrap';// ** Custom Components\nimport Card from'@components/card-snippet';import BreadCrumbs from'@components/breadcrumbs';// ** Demo Components\nimport AlertIcon from'./AlertIcon';import AlertTitle from'./AlertTitle';import AlertColors from'./AlertColors';import AlertExample from'./AlertExample';import DefaultAlert from'./DefaultAlert';import AlertDismissable from'./AlertDismissable';import AlertUncontrolled from'./AlertUncontrolled';// ** Source Code\nimport{alertIcon,alertTitle,alertColors,defaultAlert,alertExample,alertDismissable,alertUncontrolled}from'./AlertSourceCode';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Alerts=()=>{useEffect(()=>{Prism.highlightAll();},[]);return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(BreadCrumbs,{breadCrumbTitle:\"Alerts\",breadCrumbParent:\"Components\",breadCrumbActive:\"Alerts\"}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Default\",code:defaultAlert,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"Alerts are available for any length of text, as well as an optional dismiss button. Use \",/*#__PURE__*/_jsx(\"code\",{children:\"Alert\"}),' ',\"Component & \",/*#__PURE__*/_jsx(\"code\",{children:\"color\"}),\" prop for alert with all theme colors.\"]}),/*#__PURE__*/_jsx(DefaultAlert,{})]})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Title\",code:alertTitle,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"Add a title to the alert with the \",/*#__PURE__*/_jsx(\"code\",{children:\".alert-heading\"})]}),/*#__PURE__*/_jsx(AlertTitle,{})]})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Colors\",code:alertColors,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"Use \",/*#__PURE__*/_jsx(\"code\",{children:\"color\"}),\" prop to for alert with all theme colors.\"]}),/*#__PURE__*/_jsx(AlertColors,{})]})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Dismissable Alert\",code:alertDismissable,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"Using \",/*#__PURE__*/_jsx(\"code\",{children:\"isOpen\"}),\" and \",/*#__PURE__*/_jsx(\"code\",{children:\"toggle\"}),\" you can create a dismissable alert.\"]}),/*#__PURE__*/_jsx(AlertDismissable,{})]})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Uncontrolled Alert\",code:alertUncontrolled,children:[/*#__PURE__*/_jsx(CardText,{children:\"For the most basic use-case an uncontrolled component can provide the functionality wanted without the need to manage/control the state of the component. UncontrolledAlert does not require isOpen nor toggle props to work.\"}),/*#__PURE__*/_jsx(AlertUncontrolled,{})]})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsx(Card,{title:\"Icon\",code:alertIcon,children:/*#__PURE__*/_jsx(AlertIcon,{})})}),/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Example\",code:alertExample,children:[/*#__PURE__*/_jsx(CardText,{children:\"An example would be to have an input and when a condition is met, show the alert.\"}),/*#__PURE__*/_jsx(AlertExample,{})]})})]})]});};export default Alerts;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/views/components/alerts/index.js"],"names":["Fragment","useEffect","Prism","Row","Col","CardText","Card","BreadCrumbs","AlertIcon","AlertTitle","AlertColors","AlertExample","DefaultAlert","AlertDismissable","AlertUncontrolled","alertIcon","alertTitle","alertColors","defaultAlert","alertExample","alertDismissable","alertUncontrolled","Alerts","highlightAll"],"mappings":"AAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CAEA;AACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,QAAnB,KAAmC,YAAnC,CAEA;AACA,MAAOC,CAAAA,IAAP,KAAiB,0BAAjB,CACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CAEA;AACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CAEA;AACA,OACEC,SADF,CAEEC,UAFF,CAGEC,WAHF,CAIEC,YAJF,CAKEC,YALF,CAMEC,gBANF,CAOEC,iBAPF,KAQO,mBARP,C,wFAUA,KAAMC,CAAAA,MAAM,CAAG,IAAM,CACnBrB,SAAS,CAAC,IAAM,CACdC,KAAK,CAACqB,YAAN,GACD,CAFQ,CAEN,EAFM,CAAT,CAGA,mBACE,MAAC,QAAD,yBACE,KAAC,WAAD,EAAa,eAAe,CAAC,QAA7B,CAAsC,gBAAgB,CAAC,YAAvD,CAAoE,gBAAgB,CAAC,QAArF,EADF,cAEE,MAAC,GAAD,yBACE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,SAAZ,CAAsB,IAAI,CAAEL,YAA5B,wBACE,MAAC,QAAD,oHAC0F,+BAD1F,CAC6G,GAD7G,6BAEc,+BAFd,4CADF,cAKE,KAAC,YAAD,IALF,GADF,EADF,cAUE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,OAAZ,CAAoB,IAAI,CAAEF,UAA1B,wBACE,MAAC,QAAD,8DACoC,wCADpC,GADF,cAIE,KAAC,UAAD,IAJF,GADF,EAVF,cAkBE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,QAAZ,CAAqB,IAAI,CAAEC,WAA3B,wBACE,MAAC,QAAD,gCACM,+BADN,+CADF,cAIE,KAAC,WAAD,IAJF,GADF,EAlBF,cA0BE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,mBAAZ,CAAgC,IAAI,CAAEG,gBAAtC,wBACE,MAAC,QAAD,kCACQ,gCADR,sBACgC,gCADhC,0CADF,cAIE,KAAC,gBAAD,IAJF,GADF,EA1BF,cAkCE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,oBAAZ,CAAiC,IAAI,CAAEC,iBAAvC,wBACE,KAAC,QAAD,4OADF,cAME,KAAC,iBAAD,IANF,GADF,EAlCF,cA4CE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,KAAC,IAAD,EAAM,KAAK,CAAC,MAAZ,CAAmB,IAAI,CAAEN,SAAzB,uBACE,KAAC,SAAD,IADF,EADF,EA5CF,cAiDE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,SAAZ,CAAsB,IAAI,CAAEI,YAA5B,wBACE,KAAC,QAAD,gGADF,cAEE,KAAC,YAAD,IAFF,GADF,EAjDF,GAFF,GADF,CA6DD,CAjED,CAkEA,cAAeG,CAAAA,MAAf","sourcesContent":["// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Demo Components\r\nimport AlertIcon from './AlertIcon'\r\nimport AlertTitle from './AlertTitle'\r\nimport AlertColors from './AlertColors'\r\nimport AlertExample from './AlertExample'\r\nimport DefaultAlert from './DefaultAlert'\r\nimport AlertDismissable from './AlertDismissable'\r\nimport AlertUncontrolled from './AlertUncontrolled'\r\n\r\n// ** Source Code\r\nimport {\r\n  alertIcon,\r\n  alertTitle,\r\n  alertColors,\r\n  defaultAlert,\r\n  alertExample,\r\n  alertDismissable,\r\n  alertUncontrolled\r\n} from './AlertSourceCode'\r\n\r\nconst Alerts = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='Alerts' breadCrumbParent='Components' breadCrumbActive='Alerts' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Default' code={defaultAlert}>\r\n            <CardText>\r\n              Alerts are available for any length of text, as well as an optional dismiss button. Use <code>Alert</code>{' '}\r\n              Component & <code>color</code> prop for alert with all theme colors.\r\n            </CardText>\r\n            <DefaultAlert />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Title' code={alertTitle}>\r\n            <CardText>\r\n              Add a title to the alert with the <code>.alert-heading</code>\r\n            </CardText>\r\n            <AlertTitle />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Colors' code={alertColors}>\r\n            <CardText>\r\n              Use <code>color</code> prop to for alert with all theme colors.\r\n            </CardText>\r\n            <AlertColors />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Dismissable Alert' code={alertDismissable}>\r\n            <CardText>\r\n              Using <code>isOpen</code> and <code>toggle</code> you can create a dismissable alert.\r\n            </CardText>\r\n            <AlertDismissable />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Uncontrolled Alert' code={alertUncontrolled}>\r\n            <CardText>\r\n              For the most basic use-case an uncontrolled component can provide the functionality wanted without the\r\n              need to manage/control the state of the component. UncontrolledAlert does not require isOpen nor toggle\r\n              props to work.\r\n            </CardText>\r\n            <AlertUncontrolled />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Icon' code={alertIcon}>\r\n            <AlertIcon />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Example' code={alertExample}>\r\n            <CardText>An example would be to have an input and when a condition is met, show the alert.</CardText>\r\n            <AlertExample />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Alerts\r\n"]},"metadata":{},"sourceType":"module"}