{"ast":null,"code":"import _inherits from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger, fetchPrivate } from '@stacks/common';\nvar schemaDefinition = {\n  type: 'object',\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    }\n  }\n};\nexport var Profile = /*#__PURE__*/function () {\n  function Profile() {\n    var profile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Profile);\n\n    this._profile = Object.assign({}, {\n      '@context': 'http://schema.org/'\n    }, profile);\n  }\n\n  _createClass(Profile, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({}, this._profile);\n    }\n  }, {\n    key: \"toToken\",\n    value: function toToken(privateKey) {\n      return signProfileToken(this.toJSON(), privateKey);\n    }\n  }], [{\n    key: \"validateSchema\",\n    value: function validateSchema(profile) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      schemaDefinition.strict = strict;\n      return inspector.validate(schemaDefinition, profile);\n    }\n  }, {\n    key: \"fromToken\",\n    value: function fromToken(token) {\n      var publicKeyOrAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var profile = extractProfile(token, publicKeyOrAddress);\n      return new Profile(profile);\n    }\n  }, {\n    key: \"makeZoneFile\",\n    value: function makeZoneFile(domainName, tokenFileURL) {\n      return makeProfileZoneFile(domainName, tokenFileURL);\n    }\n  }]);\n\n  return Profile;\n}();\nvar personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\nexport var Person = /*#__PURE__*/function (_Profile) {\n  _inherits(Person, _Profile);\n\n  var _super = _createSuper(Person);\n\n  function Person() {\n    var _this;\n\n    var profile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Person);\n\n    _this = _super.call(this, profile);\n    _this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, _this._profile);\n    return _this;\n  }\n\n  _createClass(Person, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        profile: this.profile(),\n        name: this.name(),\n        givenName: this.givenName(),\n        familyName: this.familyName(),\n        description: this.description(),\n        avatarUrl: this.avatarUrl(),\n        verifiedAccounts: this.verifiedAccounts(),\n        address: this.address(),\n        birthDate: this.birthDate(),\n        connections: this.connections(),\n        organizations: this.organizations()\n      };\n    }\n  }, {\n    key: \"profile\",\n    value: function profile() {\n      return Object.assign({}, this._profile);\n    }\n  }, {\n    key: \"name\",\n    value: function name() {\n      return getName(this.profile());\n    }\n  }, {\n    key: \"givenName\",\n    value: function givenName() {\n      return getGivenName(this.profile());\n    }\n  }, {\n    key: \"familyName\",\n    value: function familyName() {\n      return getFamilyName(this.profile());\n    }\n  }, {\n    key: \"description\",\n    value: function description() {\n      return getDescription(this.profile());\n    }\n  }, {\n    key: \"avatarUrl\",\n    value: function avatarUrl() {\n      return getAvatarUrl(this.profile());\n    }\n  }, {\n    key: \"verifiedAccounts\",\n    value: function verifiedAccounts(verifications) {\n      return getVerifiedAccounts(this.profile(), verifications);\n    }\n  }, {\n    key: \"address\",\n    value: function address() {\n      return getAddress(this.profile());\n    }\n  }, {\n    key: \"birthDate\",\n    value: function birthDate() {\n      return getBirthDate(this.profile());\n    }\n  }, {\n    key: \"connections\",\n    value: function connections() {\n      return getConnections(this.profile());\n    }\n  }, {\n    key: \"organizations\",\n    value: function organizations() {\n      return getOrganizations(this.profile());\n    }\n  }], [{\n    key: \"validateSchema\",\n    value: function validateSchema(profile) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      personSchemaDefinition.strict = strict;\n      return inspector.validate(schemaDefinition, profile);\n    }\n  }, {\n    key: \"fromToken\",\n    value: function fromToken(token) {\n      var publicKeyOrAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var profile = extractProfile(token, publicKeyOrAddress);\n      return new Person(profile);\n    }\n  }, {\n    key: \"fromLegacyFormat\",\n    value: function fromLegacyFormat(legacyProfile) {\n      var profile = getPersonFromLegacyFormat(legacyProfile);\n      return new Person(profile);\n    }\n  }]);\n\n  return Person;\n}(Profile);\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  var urlScheme = tokenFileUrl.split('://')[0];\n  var urlParts = tokenFileUrl.split('://')[1].split('/');\n  var domain = urlParts[0];\n  var pathname = \"/\".concat(urlParts.slice(1).join('/'));\n  var zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [{\n      name: '_http._tcp',\n      priority: 10,\n      weight: 1,\n      target: \"\".concat(urlScheme, \"://\").concat(domain).concat(pathname)\n    }]\n  };\n  var zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  var firstUriRecord = zoneFileJson.uri[0];\n\n  if (!firstUriRecord.hasOwnProperty('target')) {\n    return null;\n  }\n\n  var tokenFileUrl = firstUriRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {} else if (tokenFileUrl.startsWith('http')) {} else {\n    tokenFileUrl = \"https://\".concat(tokenFileUrl);\n  }\n\n  return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n  return new Promise(function (resolve, reject) {\n    var zoneFileJson = null;\n\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    var tokenFileUrl = null;\n\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      var profile = null;\n\n      try {\n        profile = JSON.parse(zoneFile);\n        profile = Person.fromLegacyFormat(profile).profile();\n      } catch (error) {\n        reject(error);\n      }\n\n      resolve(profile);\n      return;\n    }\n\n    if (tokenFileUrl) {\n      fetchPrivate(tokenFileUrl).then(function (response) {\n        return response.text();\n      }).then(function (responseText) {\n        return JSON.parse(responseText);\n      }).then(function (responseJson) {\n        var tokenRecords = responseJson;\n        var profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n        resolve(profile);\n      }).catch(function (error) {\n        Logger.error(\"resolveZoneFileToProfile: error fetching token file \".concat(tokenFileUrl, \": \").concat(error));\n        reject(error);\n      });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}","map":{"version":3,"sources":["../../src/profile.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations, } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger, fetchPrivate } from '@stacks/common';\nconst schemaDefinition = {\n    type: 'object',\n    properties: {\n        '@context': { type: 'string', optional: true },\n        '@type': { type: 'string' },\n    },\n};\nexport class Profile {\n    constructor(profile = {}) {\n        this._profile = Object.assign({}, {\n            '@context': 'http://schema.org/',\n        }, profile);\n    }\n    toJSON() {\n        return Object.assign({}, this._profile);\n    }\n    toToken(privateKey) {\n        return signProfileToken(this.toJSON(), privateKey);\n    }\n    static validateSchema(profile, strict = false) {\n        schemaDefinition.strict = strict;\n        return inspector.validate(schemaDefinition, profile);\n    }\n    static fromToken(token, publicKeyOrAddress = null) {\n        const profile = extractProfile(token, publicKeyOrAddress);\n        return new Profile(profile);\n    }\n    static makeZoneFile(domainName, tokenFileURL) {\n        return makeProfileZoneFile(domainName, tokenFileURL);\n    }\n}\nconst personSchemaDefinition = {\n    type: 'object',\n    strict: false,\n    properties: {\n        '@context': { type: 'string', optional: true },\n        '@type': { type: 'string' },\n        '@id': { type: 'string', optional: true },\n        name: { type: 'string', optional: true },\n        givenName: { type: 'string', optional: true },\n        familyName: { type: 'string', optional: true },\n        description: { type: 'string', optional: true },\n        image: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    name: { type: 'string', optional: true },\n                    contentUrl: { type: 'string', optional: true },\n                },\n            },\n        },\n        website: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    url: { type: 'string', optional: true },\n                },\n            },\n        },\n        account: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    service: { type: 'string', optional: true },\n                    identifier: { type: 'string', optional: true },\n                    proofType: { type: 'string', optional: true },\n                    proofUrl: { type: 'string', optional: true },\n                    proofMessage: { type: 'string', optional: true },\n                    proofSignature: { type: 'string', optional: true },\n                },\n            },\n        },\n        worksFor: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    '@id': { type: 'string', optional: true },\n                },\n            },\n        },\n        knows: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    '@id': { type: 'string', optional: true },\n                },\n            },\n        },\n        address: {\n            type: 'object',\n            optional: true,\n            properties: {\n                '@type': { type: 'string' },\n                streetAddress: { type: 'string', optional: true },\n                addressLocality: { type: 'string', optional: true },\n                postalCode: { type: 'string', optional: true },\n                addressCountry: { type: 'string', optional: true },\n            },\n        },\n        birthDate: { type: 'string', optional: true },\n        taxID: { type: 'string', optional: true },\n    },\n};\nexport class Person extends Profile {\n    constructor(profile = {}) {\n        super(profile);\n        this._profile = Object.assign({}, {\n            '@type': 'Person',\n        }, this._profile);\n    }\n    static validateSchema(profile, strict = false) {\n        personSchemaDefinition.strict = strict;\n        return inspector.validate(schemaDefinition, profile);\n    }\n    static fromToken(token, publicKeyOrAddress = null) {\n        const profile = extractProfile(token, publicKeyOrAddress);\n        return new Person(profile);\n    }\n    static fromLegacyFormat(legacyProfile) {\n        const profile = getPersonFromLegacyFormat(legacyProfile);\n        return new Person(profile);\n    }\n    toJSON() {\n        return {\n            profile: this.profile(),\n            name: this.name(),\n            givenName: this.givenName(),\n            familyName: this.familyName(),\n            description: this.description(),\n            avatarUrl: this.avatarUrl(),\n            verifiedAccounts: this.verifiedAccounts(),\n            address: this.address(),\n            birthDate: this.birthDate(),\n            connections: this.connections(),\n            organizations: this.organizations(),\n        };\n    }\n    profile() {\n        return Object.assign({}, this._profile);\n    }\n    name() {\n        return getName(this.profile());\n    }\n    givenName() {\n        return getGivenName(this.profile());\n    }\n    familyName() {\n        return getFamilyName(this.profile());\n    }\n    description() {\n        return getDescription(this.profile());\n    }\n    avatarUrl() {\n        return getAvatarUrl(this.profile());\n    }\n    verifiedAccounts(verifications) {\n        return getVerifiedAccounts(this.profile(), verifications);\n    }\n    address() {\n        return getAddress(this.profile());\n    }\n    birthDate() {\n        return getBirthDate(this.profile());\n    }\n    connections() {\n        return getConnections(this.profile());\n    }\n    organizations() {\n        return getOrganizations(this.profile());\n    }\n}\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n    if (!tokenFileUrl.includes('://')) {\n        throw new Error('Invalid token file url');\n    }\n    const urlScheme = tokenFileUrl.split('://')[0];\n    const urlParts = tokenFileUrl.split('://')[1].split('/');\n    const domain = urlParts[0];\n    const pathname = `/${urlParts.slice(1).join('/')}`;\n    const zoneFile = {\n        $origin: origin,\n        $ttl: 3600,\n        uri: [\n            {\n                name: '_http._tcp',\n                priority: 10,\n                weight: 1,\n                target: `${urlScheme}://${domain}${pathname}`,\n            },\n        ],\n    };\n    const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n    return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n    if (!zoneFileJson.hasOwnProperty('uri')) {\n        return null;\n    }\n    if (!Array.isArray(zoneFileJson.uri)) {\n        return null;\n    }\n    if (zoneFileJson.uri.length < 1) {\n        return null;\n    }\n    const firstUriRecord = zoneFileJson.uri[0];\n    if (!firstUriRecord.hasOwnProperty('target')) {\n        return null;\n    }\n    let tokenFileUrl = firstUriRecord.target;\n    if (tokenFileUrl.startsWith('https')) {\n    }\n    else if (tokenFileUrl.startsWith('http')) {\n    }\n    else {\n        tokenFileUrl = `https://${tokenFileUrl}`;\n    }\n    return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n    return new Promise((resolve, reject) => {\n        let zoneFileJson = null;\n        try {\n            zoneFileJson = parseZoneFile(zoneFile);\n            if (!zoneFileJson.hasOwnProperty('$origin')) {\n                zoneFileJson = null;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        let tokenFileUrl = null;\n        if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n            tokenFileUrl = getTokenFileUrl(zoneFileJson);\n        }\n        else {\n            let profile = null;\n            try {\n                profile = JSON.parse(zoneFile);\n                profile = Person.fromLegacyFormat(profile).profile();\n            }\n            catch (error) {\n                reject(error);\n            }\n            resolve(profile);\n            return;\n        }\n        if (tokenFileUrl) {\n            fetchPrivate(tokenFileUrl)\n                .then(response => response.text())\n                .then(responseText => JSON.parse(responseText))\n                .then(responseJson => {\n                const tokenRecords = responseJson;\n                const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n                resolve(profile);\n            })\n                .catch(error => {\n                Logger.error(`resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`);\n                reject(error);\n            });\n        }\n        else {\n            Logger.debug('Token file url not found. Resolving to blank profile.');\n            resolve({});\n        }\n    });\n}\n//# sourceMappingURL=profile.js.map"]},"metadata":{},"sourceType":"module"}