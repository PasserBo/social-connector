{"ast":null,"code":"// ** React Imports\nimport{Fragment,useState,useRef}from'react';// ** Third Party Components\nimport classnames from'classnames';import PerfectScrollbar from'react-perfect-scrollbar';// ** Vertical Menu Components\nimport VerticalMenuHeader from'./VerticalMenuHeader';import VerticalNavMenuItems from'./VerticalNavMenuItems';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Sidebar=props=>{// ** Props\nconst{menuCollapsed,routerProps,menu,currentActiveItem,skin,menuData}=props;// ** States\nconst[groupOpen,setGroupOpen]=useState([]);const[groupActive,setGroupActive]=useState([]);const[currentActiveGroup,setCurrentActiveGroup]=useState([]);const[activeItem,setActiveItem]=useState(null);// ** Menu Hover State\nconst[menuHover,setMenuHover]=useState(false);// ** Ref\nconst shadowRef=useRef(null);// ** Function to handle Mouse Enter\nconst onMouseEnter=()=>{setMenuHover(true);};// ** Scroll Menu\nconst scrollMenu=container=>{if(shadowRef&&container.scrollTop>0){if(!shadowRef.current.classList.contains('d-block')){shadowRef.current.classList.add('d-block');}}else{if(shadowRef.current.classList.contains('d-block')){shadowRef.current.classList.remove('d-block');}}};return/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:classnames('main-menu menu-fixed menu-accordion menu-shadow',{expanded:menuHover||menuCollapsed===false,'menu-light':skin!=='semi-dark'&&skin!=='dark','menu-dark':skin==='semi-dark'||skin==='dark'}),onMouseEnter:onMouseEnter,onMouseLeave:()=>setMenuHover(false),children:menu?menu({...props}):/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(VerticalMenuHeader,{setGroupOpen:setGroupOpen,menuHover:menuHover,...props}),/*#__PURE__*/_jsx(\"div\",{className:\"shadow-bottom\",ref:shadowRef}),/*#__PURE__*/_jsx(PerfectScrollbar,{className:\"main-menu-content\",options:{wheelPropagation:false},onScrollY:container=>scrollMenu(container),children:/*#__PURE__*/_jsx(\"ul\",{className:\"navigation navigation-main\",children:/*#__PURE__*/_jsx(VerticalNavMenuItems,{items:menuData,menuData:menuData,menuHover:menuHover,groupOpen:groupOpen,activeItem:activeItem,groupActive:groupActive,currentActiveGroup:currentActiveGroup,routerProps:routerProps,setGroupOpen:setGroupOpen,menuCollapsed:menuCollapsed,setActiveItem:setActiveItem,setGroupActive:setGroupActive,setCurrentActiveGroup:setCurrentActiveGroup,currentActiveItem:currentActiveItem})})})]})})});};export default Sidebar;","map":{"version":3,"sources":["/Users/jvledesma/www-bitfari/src/@core/layouts/components/menu/vertical-menu/index.js"],"names":["Fragment","useState","useRef","classnames","PerfectScrollbar","VerticalMenuHeader","VerticalNavMenuItems","Sidebar","props","menuCollapsed","routerProps","menu","currentActiveItem","skin","menuData","groupOpen","setGroupOpen","groupActive","setGroupActive","currentActiveGroup","setCurrentActiveGroup","activeItem","setActiveItem","menuHover","setMenuHover","shadowRef","onMouseEnter","scrollMenu","container","scrollTop","current","classList","contains","add","remove","expanded","wheelPropagation"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useRef } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// ** Vertical Menu Components\nimport VerticalMenuHeader from './VerticalMenuHeader'\nimport VerticalNavMenuItems from './VerticalNavMenuItems'\n\nconst Sidebar = props => {\n  // ** Props\n  const { menuCollapsed, routerProps, menu, currentActiveItem, skin, menuData } = props\n\n  // ** States\n  const [groupOpen, setGroupOpen] = useState([])\n  const [groupActive, setGroupActive] = useState([])\n  const [currentActiveGroup, setCurrentActiveGroup] = useState([])\n  const [activeItem, setActiveItem] = useState(null)\n\n  // ** Menu Hover State\n  const [menuHover, setMenuHover] = useState(false)\n\n  // ** Ref\n  const shadowRef = useRef(null)\n\n  // ** Function to handle Mouse Enter\n  const onMouseEnter = () => {\n    setMenuHover(true)\n  }\n\n  // ** Scroll Menu\n  const scrollMenu = container => {\n    if (shadowRef && container.scrollTop > 0) {\n      if (!shadowRef.current.classList.contains('d-block')) {\n        shadowRef.current.classList.add('d-block')\n      }\n    } else {\n      if (shadowRef.current.classList.contains('d-block')) {\n        shadowRef.current.classList.remove('d-block')\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n      <div\n        className={classnames('main-menu menu-fixed menu-accordion menu-shadow', {\n          expanded: menuHover || menuCollapsed === false,\n          'menu-light': skin !== 'semi-dark' && skin !== 'dark',\n          'menu-dark': skin === 'semi-dark' || skin === 'dark'\n        })}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={() => setMenuHover(false)}\n      >\n        {menu ? (\n          menu({ ...props })\n        ) : (\n          <Fragment>\n            {/* Vertical Menu Header */}\n            <VerticalMenuHeader setGroupOpen={setGroupOpen} menuHover={menuHover} {...props} />\n            {/* Vertical Menu Header Shadow */}\n            <div className='shadow-bottom' ref={shadowRef}></div>\n            {/* Perfect Scrollbar */}\n            <PerfectScrollbar\n              className='main-menu-content'\n              options={{ wheelPropagation: false }}\n              onScrollY={container => scrollMenu(container)}\n            >\n              <ul className='navigation navigation-main'>\n                <VerticalNavMenuItems\n                  items={menuData}\n                  menuData={menuData}\n                  menuHover={menuHover}\n                  groupOpen={groupOpen}\n                  activeItem={activeItem}\n                  groupActive={groupActive}\n                  currentActiveGroup={currentActiveGroup}\n                  routerProps={routerProps}\n                  setGroupOpen={setGroupOpen}\n                  menuCollapsed={menuCollapsed}\n                  setActiveItem={setActiveItem}\n                  setGroupActive={setGroupActive}\n                  setCurrentActiveGroup={setCurrentActiveGroup}\n                  currentActiveItem={currentActiveItem}\n                />\n              </ul>\n            </PerfectScrollbar>\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Sidebar\n"]},"metadata":{},"sourceType":"module"}