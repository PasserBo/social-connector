{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { Color } from './types.esm.js';\nimport { themeGet } from '@styled-system/theme-get';\n\nvar colorGet = function colorGet(path, fallback) {\n  return themeGet('colors.' + path, fallback);\n};\n\nvar colors = function colors(props) {\n  var _light, _dark;\n\n  return {\n    light: (_light = {}, _light[Color.Accent] = colorGet('blue')(props), _light[Color.Bg] = 'white', _light[Color.BgAlt] = colorGet('ink.50')(props), _light[Color.BgLight] = 'white', _light[Color.Invert] = colorGet('ink')(props), _light[Color.TextHover] = colorGet('blue')(props), _light[Color.TextTitle] = colorGet('ink')(props), _light[Color.TextCaption] = colorGet('ink.600')(props), _light[Color.TextBody] = colorGet('ink.900')(props), _light[Color.InputPlaceholder] = colorGet('ink.400')(props), _light[Color.Border] = 'rgb(229, 229, 236)', _light[Color.FeedbackAlert] = colorGet('orange')(props), _light[Color.FeedbackError] = colorGet('red')(props), _light[Color.FeedbackSuccess] = colorGet('green')(props), _light),\n    dark: (_dark = {}, _dark[Color.Accent] = colorGet('blue.400')(props), _dark[Color.Bg] = colorGet('ink')(props), _dark[Color.BgAlt] = 'rgba(255,255,255,0.05)', _dark[Color.BgLight] = 'rgba(255,255,255,0.08)', _dark[Color.Invert] = 'white', _dark[Color.TextHover] = colorGet('blue.300')(props), _dark[Color.TextTitle] = 'white', _dark[Color.TextCaption] = '#a7a7ad', _dark[Color.TextBody] = colorGet('ink.300')(props), _dark[Color.InputPlaceholder] = 'rgba(255,255,255,0.3)', _dark[Color.Border] = 'rgb(39, 41, 46)', _dark[Color.FeedbackAlert] = colorGet('orange')(props), _dark[Color.FeedbackError] = colorGet('red')(props), _dark[Color.FeedbackSuccess] = colorGet('green')(props), _dark)\n  };\n};\n\nvar colorModeStyles = function colorModeStyles(props) {\n  return colors(props)[props.colorMode];\n};\n\nvar colorMap = function colorMap(props) {\n  return Object.keys(colors(props)[props.colorMode]);\n};\n\nvar color = function color(name) {\n  return \"var(--colors-\" + name + \")\";\n};\n\nvar themeColor = function themeColor(name) {\n  return name;\n};\n\nvar generateCssVariables = function generateCssVariables(mode) {\n  return function (_ref) {\n    var _ref$colorMode = _ref.colorMode,\n        colorMode = _ref$colorMode === void 0 ? mode : _ref$colorMode,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"colorMode\"]);\n\n    return colorMap(_objectSpread2({\n      colorMode: colorMode\n    }, rest)).map(function (key) {\n      return \"--colors-\" + key + \": \" + colorModeStyles(_objectSpread2({\n        colorMode: colorMode\n      }, rest))[key] + \";\";\n    });\n  };\n};\n\nexport { color, colorGet, generateCssVariables, themeColor };","map":{"version":3,"sources":["../../src/color-modes/utils.ts"],"names":["colorGet","themeGet","colors","light","Color","dark","colorModeStyles","props","colorMap","Object","color","themeColor","generateCssVariables","colorMode","rest"],"mappings":"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","sourcesContent":["import { Theme } from '../theme';\nimport {\n  ColorModesInterface,\n  ColorsStringLiteral,\n  ColorModeTypes,\n  Color,\n  ThemeColorsStringLiteral,\n} from './types';\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const colorGet = (path: string, fallback?: string): ((props: any) => any) =>\n  themeGet('colors.' + path, fallback);\n\nconst colors = (props: { theme: Theme }): ColorModesInterface => ({\n  light: {\n    [Color.Accent]: colorGet('blue')(props),\n    [Color.Bg]: 'white',\n    [Color.BgAlt]: colorGet('ink.50')(props),\n    [Color.BgLight]: 'white',\n    [Color.Invert]: colorGet('ink')(props),\n    [Color.TextHover]: colorGet('blue')(props),\n    [Color.TextTitle]: colorGet('ink')(props),\n    [Color.TextCaption]: colorGet('ink.600')(props),\n    [Color.TextBody]: colorGet('ink.900')(props),\n    [Color.InputPlaceholder]: colorGet('ink.400')(props),\n    [Color.Border]: 'rgb(229, 229, 236)',\n    [Color.FeedbackAlert]: colorGet('orange')(props),\n    [Color.FeedbackError]: colorGet('red')(props),\n    [Color.FeedbackSuccess]: colorGet('green')(props),\n  },\n  dark: {\n    [Color.Accent]: colorGet('blue.400')(props),\n    [Color.Bg]: colorGet('ink')(props),\n    [Color.BgAlt]: 'rgba(255,255,255,0.05)',\n    [Color.BgLight]: 'rgba(255,255,255,0.08)',\n    [Color.Invert]: 'white',\n    [Color.TextHover]: colorGet('blue.300')(props),\n    [Color.TextTitle]: 'white',\n    [Color.TextCaption]: '#a7a7ad',\n    [Color.TextBody]: colorGet('ink.300')(props),\n    [Color.InputPlaceholder]: 'rgba(255,255,255,0.3)',\n    [Color.Border]: 'rgb(39, 41, 46)',\n    [Color.FeedbackAlert]: colorGet('orange')(props),\n    [Color.FeedbackError]: colorGet('red')(props),\n    [Color.FeedbackSuccess]: colorGet('green')(props),\n  },\n});\n\nconst colorModeStyles = (props: { theme: Theme; colorMode: 'light' | 'dark' }): ColorModeTypes =>\n  colors(props)[props.colorMode];\n\nconst colorMap = (props: { theme: Theme; colorMode: 'light' | 'dark' }): ColorsStringLiteral[] =>\n  Object.keys(colors(props)[props.colorMode]) as ColorsStringLiteral[];\n\nexport const color = (name: ColorsStringLiteral): string => {\n  return `var(--colors-${name})`;\n};\n\nexport const themeColor = (name: ThemeColorsStringLiteral): string => {\n  return name;\n};\n\nexport const generateCssVariables = (mode: 'light' | 'dark') => ({\n  colorMode = mode,\n  ...rest\n}: any) =>\n  colorMap({ colorMode, ...rest }).map((key: ColorsStringLiteral) => {\n    return `--colors-${key}: ${colorModeStyles({ colorMode, ...rest })[key]};`;\n  });\n"]},"metadata":{},"sourceType":"module"}