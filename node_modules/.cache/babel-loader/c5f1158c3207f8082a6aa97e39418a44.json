{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { createElement } from 'react';\nimport { Svg } from '../svg/index.esm.js';\n\nvar rotate = function rotate(direction) {\n  if (direction === void 0) {\n    direction = 'right';\n  }\n\n  switch (direction) {\n    case 'left':\n      return '90';\n\n    case 'up':\n      return '180';\n\n    case 'right':\n      return '270';\n\n    case 'down':\n      return 0;\n\n    default:\n      throw new Error('`rotate` must receive direction parameter');\n  }\n};\n\nvar ChevronIcon = function ChevronIcon(_ref) {\n  var direction = _ref.direction,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? '16px' : _ref$size,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      props = _objectWithoutPropertiesLoose(_ref, [\"direction\", \"size\", \"style\"]);\n\n  return createElement(Svg, Object.assign({\n    width: size,\n    height: size,\n    viewBox: \"0 0 16 16\",\n    style: _objectSpread2({}, style, {\n      transform: \"rotate(\" + rotate(direction) + \"deg)\"\n    })\n  }, props), createElement(\"path\", {\n    fill: props.color || 'currentColor',\n    d: \"M4.7 7.367l3.3 3.3 3.3-3.3-.943-.943L8 8.78 5.643 6.424l-.943.943z\"\n  }));\n};\n\nexport { ChevronIcon };","map":{"version":3,"sources":["../../src/icons/chevron-icon.tsx"],"names":["rotate","direction","ChevronIcon","size","style","props","width","height","viewBox","transform","fill","d"],"mappings":";;;;AASA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAA,SAAA,EAAA;MAACC,SAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,SAAAA,GAAuB,OAAvBA;;;AACd,UAAA,SAAA;AACE,SAAA,MAAA;AACE,aAAA,IAAA;;AACF,SAAA,IAAA;AACE,aAAA,KAAA;;AACF,SAAA,OAAA;AACE,aAAA,KAAA;;AACF,SAAA,MAAA;AACE,aAAA,CAAA;;AACF;AACE,YAAM,IAAA,KAAA,CAAN,2CAAM,CAAN;AAVJ;AADF,CAAA;;IAeaC,WAAW,GAA2B,SAAtCA,WAAsC,CAAA,IAAA,EAAA;AAAA,MACjDD,SADiD,GAAA,IAAA,CAAA,SAAA;AAAA,MAAA,SAAA,GAAA,IAAA,CAAA,IAAA;AAAA,MAEjDE,IAFiD,GAAA,SAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,SAAA;AAAA,MAAA,UAAA,GAAA,IAAA,CAAA,KAAA;AAAA,MAGjDC,KAHiD,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,UAAA;AAAA,MAI9CC,KAJ8C,GAAA,6BAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,MAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,SAMjD,aAAA,CAAA,GAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACEC,IAAAA,KAAK,EAAEH,IADT;AAEEI,IAAAA,MAAM,EAAEJ,IAFV;AAGEK,IAAAA,OAAO,EAAC,WAHV;AAIEJ,IAAAA,KAAK,EAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAcK,MAAAA,SAAS,EAAA,YAAYT,MAAM,CAAlB,SAAkB,CAAlB,GAAA;AAAvB,KAAA;AAJP,GAAA,EAAA,KAAA,CAAA,EAOE,aAAA,CAAA,MAAA,EAAA;AACEU,IAAAA,IAAI,EAAEL,KAAK,CAALA,KAAAA,IAAe,cADvB;AAEEM,IAAAA,CAAC,EAAC;AAFJ,GAAA,CAPF,CANiD;AAAA,C","sourcesContent":["import * as React from 'react';\nimport { Svg } from '../svg';\nimport { BoxProps } from '../box';\nimport { Direction } from './icon-utils';\n\ninterface ChevronProps extends BoxProps {\n  direction?: Direction;\n}\n\nconst rotate = (direction: Direction = 'right') => {\n  switch (direction) {\n    case 'left':\n      return '90';\n    case 'up':\n      return '180';\n    case 'right':\n      return '270';\n    case 'down':\n      return 0;\n    default:\n      throw new Error('`rotate` must receive direction parameter');\n  }\n};\n\nexport const ChevronIcon: React.FC<ChevronProps> = ({\n  direction,\n  size = '16px',\n  style = {},\n  ...props\n}) => (\n  <Svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 16 16\"\n    style={{ ...style, transform: `rotate(${rotate(direction)}deg)` }}\n    {...props}\n  >\n    <path\n      fill={props.color || 'currentColor'}\n      d=\"M4.7 7.367l3.3 3.3 3.3-3.3-.943-.943L8 8.78 5.643 6.424l-.943.943z\"\n    />\n  </Svg>\n);\n"]},"metadata":{},"sourceType":"module"}