{"ast":null,"code":"import _asyncToGenerator from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport var NodeCryptoHmacSha256 = /*#__PURE__*/function () {\n  function NodeCryptoHmacSha256(createHmac) {\n    _classCallCheck(this, NodeCryptoHmacSha256);\n\n    this.createHmac = createHmac;\n  }\n\n  _createClass(NodeCryptoHmacSha256, [{\n    key: \"digest\",\n    value: function () {\n      var _digest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, data) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = this.createHmac('sha256', key).update(data).digest();\n                return _context.abrupt(\"return\", Promise.resolve(result));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function digest(_x, _x2) {\n        return _digest.apply(this, arguments);\n      }\n\n      return digest;\n    }()\n  }]);\n\n  return NodeCryptoHmacSha256;\n}();\nexport var WebCryptoHmacSha256 = /*#__PURE__*/function () {\n  function WebCryptoHmacSha256(subtleCrypto) {\n    _classCallCheck(this, WebCryptoHmacSha256);\n\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  _createClass(WebCryptoHmacSha256, [{\n    key: \"digest\",\n    value: function () {\n      var _digest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, data) {\n        var cryptoKey, sig;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.subtleCrypto.importKey('raw', key, {\n                  name: 'HMAC',\n                  hash: 'SHA-256'\n                }, true, ['sign']);\n\n              case 2:\n                cryptoKey = _context2.sent;\n                _context2.next = 5;\n                return this.subtleCrypto.sign({\n                  name: 'HMAC',\n                  hash: 'SHA-256'\n                }, cryptoKey, data);\n\n              case 5:\n                sig = _context2.sent;\n                return _context2.abrupt(\"return\", Buffer.from(sig));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function digest(_x3, _x4) {\n        return _digest2.apply(this, arguments);\n      }\n\n      return digest;\n    }()\n  }]);\n\n  return WebCryptoHmacSha256;\n}();\nexport function createHmacSha256() {\n  return _createHmacSha.apply(this, arguments);\n}\n\nfunction _createHmacSha() {\n  _createHmacSha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var cryptoLib;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getCryptoLib();\n\n          case 2:\n            cryptoLib = _context3.sent;\n\n            if (!(cryptoLib.name === 'subtleCrypto')) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", new WebCryptoHmacSha256(cryptoLib.lib));\n\n          case 7:\n            return _context3.abrupt(\"return\", new NodeCryptoHmacSha256(cryptoLib.lib.createHmac));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createHmacSha.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/hmacSha256.ts"],"names":[],"mappings":";;;;AAAA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,YAAT,QAA6B,eAA7B;AAQA,WAAa,oBAAb;AAGE,gCAAY,UAAZ,EAA4C;AAAA;;AAC1C,SAAK,UAAL,GAAkB,UAAlB;AACD;;AALH;AAAA;AAAA;AAAA,6EAOE,iBAAa,GAAb,EAA0B,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,gBAAA,MADR,GACiB,KAAK,UAAL,CAAgB,QAAhB,EAA0B,GAA1B,EAA+B,MAA/B,CAAsC,IAAtC,EAA4C,MAA5C,EADjB;AAAA,iDAES,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAaA,WAAa,mBAAb;AAGE,+BAAY,YAAZ,EAAsC;AAAA;;AACpC,SAAK,YAAL,GAAoB,YAApB;AACD;;AALH;AAAA;AAAA;AAAA,8EAOE,kBAAa,GAAb,EAA0B,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC0B,KAAK,YAAL,CAAkB,SAAlB,CACtB,KADsB,EAEtB,GAFsB,EAGtB;AAAE,kBAAA,IAAI,EAAE,MAAR;AAAgB,kBAAA,IAAI,EAAE;AAAtB,iBAHsB,EAItB,IAJsB,EAKtB,CAAC,MAAD,CALsB,CAD1B;;AAAA;AACQ,gBAAA,SADR;AAAA;AAAA,uBAQoB,KAAK,YAAL,CAAkB,IAAlB,CAEhB;AAAE,kBAAA,IAAI,EAAE,MAAR;AAAgB,kBAAA,IAAI,EAAE;AAAtB,iBAFgB,EAGhB,SAHgB,EAIhB,IAJgB,CARpB;;AAAA;AAQQ,gBAAA,GARR;AAAA,kDAcS,MAAM,CAAC,IAAP,CAAY,GAAZ,CAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyBA,gBAAsB,gBAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,YAAY,EAD/B;;AAAA;AACC,YAAA,SADD;;AAAA,kBAED,SAAS,CAAC,IAAV,KAAmB,cAFlB;AAAA;AAAA;AAAA;;AAAA,8CAGI,IAAI,mBAAJ,CAAwB,SAAS,CAAC,GAAlC,CAHJ;;AAAA;AAAA,8CAKI,IAAI,oBAAJ,CAAyB,SAAS,CAAC,GAAV,CAAc,UAAvC,CALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport class NodeCryptoHmacSha256 {\n    constructor(createHmac) {\n        this.createHmac = createHmac;\n    }\n    async digest(key, data) {\n        const result = this.createHmac('sha256', key).update(data).digest();\n        return Promise.resolve(result);\n    }\n}\nexport class WebCryptoHmacSha256 {\n    constructor(subtleCrypto) {\n        this.subtleCrypto = subtleCrypto;\n    }\n    async digest(key, data) {\n        const cryptoKey = await this.subtleCrypto.importKey('raw', key, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign']);\n        const sig = await this.subtleCrypto.sign({ name: 'HMAC', hash: 'SHA-256' }, cryptoKey, data);\n        return Buffer.from(sig);\n    }\n}\nexport async function createHmacSha256() {\n    const cryptoLib = await getCryptoLib();\n    if (cryptoLib.name === 'subtleCrypto') {\n        return new WebCryptoHmacSha256(cryptoLib.lib);\n    }\n    else {\n        return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);\n    }\n}\n//# sourceMappingURL=hmacSha256.js.map"]},"metadata":{},"sourceType":"module"}