{"ast":null,"code":"/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\nexport const resolveVerticalNavMenuItemComponent = item => {\n  if (item.header) return 'VerticalNavMenuSectionHeader';\n  if (item.children) return 'VerticalNavMenuGroup';\n  return 'VerticalNavMenuLink';\n};\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\n\nexport const resolveHorizontalNavMenuItemComponent = item => {\n  if (item.children) return 'HorizontalNavMenuGroup';\n  return 'HorizontalNavMenuLink';\n};\n/**\r\n * Check if nav-link is active\r\n * @param {Object} link nav-link object\r\n */\n\nexport const isNavLinkActive = (link, currentURL, routerProps) => {\n  return currentURL === link || routerProps && routerProps.meta && routerProps.meta.navLink && routerProps.meta.navLink === link; // return currentURL === link\n};\n/**\r\n * Check if the given item has the given url\r\n * in one of its children\r\n *\r\n * @param item\r\n * @param activeItem\r\n */\n\nexport const hasActiveChild = (item, currentUrl) => {\n  const {\n    children\n  } = item;\n\n  if (!children) {\n    return false;\n  }\n\n  for (const child of children) {\n    if (child.children) {\n      if (hasActiveChild(child, currentUrl)) {\n        return true;\n      }\n    } // Check if the child has a link and is active\n\n\n    if (child && child.navLink && currentUrl && (child.navLink === currentUrl || currentUrl.includes(child.navLink))) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\r\n * Check if this is a children\r\n * of the given item\r\n *\r\n * @param children\r\n * @param openGroup\r\n * @param currentActiveGroup\r\n */\n\nexport const removeChildren = (children, openGroup, currentActiveGroup) => {\n  children.forEach(child => {\n    if (!currentActiveGroup.includes(child.id)) {\n      const index = openGroup.indexOf(child.id);\n      if (index > -1) openGroup.splice(index, 1);\n      if (child.children) removeChildren(child.children, openGroup, currentActiveGroup);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/jvledesma/www-bitfari/src/@core/layouts/utils.js"],"names":["resolveVerticalNavMenuItemComponent","item","header","children","resolveHorizontalNavMenuItemComponent","isNavLinkActive","link","currentURL","routerProps","meta","navLink","hasActiveChild","currentUrl","child","includes","removeChildren","openGroup","currentActiveGroup","forEach","id","index","indexOf","splice"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mCAAmC,GAAGC,IAAI,IAAI;AACzD,MAAIA,IAAI,CAACC,MAAT,EAAiB,OAAO,8BAAP;AACjB,MAAID,IAAI,CAACE,QAAT,EAAmB,OAAO,sBAAP;AACnB,SAAO,qBAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qCAAqC,GAAGH,IAAI,IAAI;AAC3D,MAAIA,IAAI,CAACE,QAAT,EAAmB,OAAO,wBAAP;AACnB,SAAO,uBAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAME,eAAe,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,WAAnB,KAAmC;AAChE,SACED,UAAU,KAAKD,IAAf,IACCE,WAAW,IAAIA,WAAW,CAACC,IAA3B,IAAmCD,WAAW,CAACC,IAAZ,CAAiBC,OAApD,IAA+DF,WAAW,CAACC,IAAZ,CAAiBC,OAAjB,KAA6BJ,IAF/F,CADgE,CAKhE;AACD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,cAAc,GAAG,CAACV,IAAD,EAAOW,UAAP,KAAsB;AAClD,QAAM;AAAET,IAAAA;AAAF,MAAeF,IAArB;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAO,KAAP;AACD;;AAED,OAAK,MAAMU,KAAX,IAAoBV,QAApB,EAA8B;AAC5B,QAAIU,KAAK,CAACV,QAAV,EAAoB;AAClB,UAAIQ,cAAc,CAACE,KAAD,EAAQD,UAAR,CAAlB,EAAuC;AACrC,eAAO,IAAP;AACD;AACF,KAL2B,CAO5B;;;AACA,QAAIC,KAAK,IAAIA,KAAK,CAACH,OAAf,IAA0BE,UAA1B,KAAyCC,KAAK,CAACH,OAAN,KAAkBE,UAAlB,IAAgCA,UAAU,CAACE,QAAX,CAAoBD,KAAK,CAACH,OAA1B,CAAzE,CAAJ,EAAkH;AAChH,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CArBM;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,cAAc,GAAG,CAACZ,QAAD,EAAWa,SAAX,EAAsBC,kBAAtB,KAA6C;AACzEd,EAAAA,QAAQ,CAACe,OAAT,CAAiBL,KAAK,IAAI;AACxB,QAAI,CAACI,kBAAkB,CAACH,QAAnB,CAA4BD,KAAK,CAACM,EAAlC,CAAL,EAA4C;AAC1C,YAAMC,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBR,KAAK,CAACM,EAAxB,CAAd;AACA,UAAIC,KAAK,GAAG,CAAC,CAAb,EAAgBJ,SAAS,CAACM,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AAChB,UAAIP,KAAK,CAACV,QAAV,EAAoBY,cAAc,CAACF,KAAK,CAACV,QAAP,EAAiBa,SAAjB,EAA4BC,kBAA5B,CAAd;AACrB;AACF,GAND;AAOD,CARM","sourcesContent":["/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\r\nexport const resolveVerticalNavMenuItemComponent = item => {\r\n  if (item.header) return 'VerticalNavMenuSectionHeader'\r\n  if (item.children) return 'VerticalNavMenuGroup'\r\n  return 'VerticalNavMenuLink'\r\n}\r\n\r\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\r\nexport const resolveHorizontalNavMenuItemComponent = item => {\r\n  if (item.children) return 'HorizontalNavMenuGroup'\r\n  return 'HorizontalNavMenuLink'\r\n}\r\n\r\n/**\r\n * Check if nav-link is active\r\n * @param {Object} link nav-link object\r\n */\r\nexport const isNavLinkActive = (link, currentURL, routerProps) => {\r\n  return (\r\n    currentURL === link ||\r\n    (routerProps && routerProps.meta && routerProps.meta.navLink && routerProps.meta.navLink === link)\r\n  )\r\n  // return currentURL === link\r\n}\r\n\r\n/**\r\n * Check if the given item has the given url\r\n * in one of its children\r\n *\r\n * @param item\r\n * @param activeItem\r\n */\r\nexport const hasActiveChild = (item, currentUrl) => {\r\n  const { children } = item\r\n\r\n  if (!children) {\r\n    return false\r\n  }\r\n\r\n  for (const child of children) {\r\n    if (child.children) {\r\n      if (hasActiveChild(child, currentUrl)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    // Check if the child has a link and is active\r\n    if (child && child.navLink && currentUrl && (child.navLink === currentUrl || currentUrl.includes(child.navLink))) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Check if this is a children\r\n * of the given item\r\n *\r\n * @param children\r\n * @param openGroup\r\n * @param currentActiveGroup\r\n */\r\nexport const removeChildren = (children, openGroup, currentActiveGroup) => {\r\n  children.forEach(child => {\r\n    if (!currentActiveGroup.includes(child.id)) {\r\n      const index = openGroup.indexOf(child.id)\r\n      if (index > -1) openGroup.splice(index, 1)\r\n      if (child.children) removeChildren(child.children, openGroup, currentActiveGroup)\r\n    }\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}