{"ast":null,"code":"import React__default, { useEffect, useCallback } from 'react';\nimport { useMediaQuery } from '../hooks/use-media-query.esm.js';\nexport { Color } from './types.esm.js';\nexport { color, colorGet, generateCssVariables, themeColor } from './utils.esm.js';\nimport { ColorModes } from './styles.esm.js';\nexport { ColorModes } from './styles.esm.js';\nvar ColorModeContext = /*#__PURE__*/React__default.createContext({\n  colorMode: undefined\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var colorMode = _ref.colorMode,\n      children = _ref.children,\n      onChange = _ref.onChange;\n\n  var _React$useState = React__default.useState(colorMode),\n      mode = _React$useState[0],\n      setMode = _React$useState[1];\n\n  var _useMediaQuery = useMediaQuery('(prefers-color-scheme: dark)'),\n      darkmode = _useMediaQuery[0];\n\n  var _useMediaQuery2 = useMediaQuery('(prefers-color-scheme: light)'),\n      lightmode = _useMediaQuery2[0];\n\n  useEffect(function () {\n    if (!mode) {\n      setMode(darkmode ? 'dark' : 'light');\n    }\n  }, [mode, darkmode, lightmode]);\n  var setColorMode = useCallback(function (mode) {\n    setMode(mode);\n    onChange && onChange(mode);\n  }, [mode]);\n  var toggleColorMode = useCallback(function () {\n    if (mode === 'light') {\n      setColorMode('dark');\n      return;\n    }\n\n    if (mode === 'dark') {\n      setColorMode('light');\n      return;\n    }\n\n    if (!colorMode && darkmode) {\n      setColorMode('light');\n      return;\n    }\n\n    if (!mode && lightmode) {\n      setColorMode('dark');\n      return;\n    }\n  }, [mode, lightmode, darkmode]);\n  return React__default.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode: mode,\n      toggleColorMode: toggleColorMode\n    }\n  }, React__default.createElement(ColorModes, {\n    colorMode: mode\n  }), children);\n};\n\nexport { ColorModeContext, ColorModeProvider };","map":{"version":3,"sources":["../../src/color-modes/index.tsx"],"names":["ColorModeContext","colorMode","undefined","ColorModeProvider","children","onChange","mode","setMode","React","darkmode","useMediaQuery","lightmode","useEffect","setColorMode","useCallback","toggleColorMode","value"],"mappings":";;;;;;IAOaA,gBAAgB,GAAA,aAAG,cAAK,CAAL,aAAA,CAAmE;AACjGC,EAAAA,SAAS,EAAEC;AADsF,CAAnE,C;;IAInBC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAAA;MAC/BF,SAAAA,GAAAA,IAAAA,CAAAA,S;MACAG,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;;wBAMwBG,cAAK,CAALA,QAAAA,CAAAA,SAAAA,C;MAAjBF,IAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAAMC,OAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;uBACMG,aAAa,CAAA,8BAAA,C;MAAzBD,QAAAA,GAAAA,cAAAA,CAAAA,CAAAA,C;;wBACaC,aAAa,CAAA,+BAAA,C;MAA1BC,SAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;AAEPC,EAAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAJ,IAAA,EAAW;AACTL,MAAAA,OAAO,CAACE,QAAQ,GAAA,MAAA,GAAhBF,OAAO,CAAPA;AACD;AAHM,GAAA,EAIN,CAAA,IAAA,EAAA,QAAA,EAJHK,SAIG,CAJM,CAATA;AAMA,MAAMC,YAAY,GAAGC,WAAW,CAC9B,UAAA,IAAA,EAAA;AACEP,IAAAA,OAAO,CAAPA,IAAO,CAAPA;AACAF,IAAAA,QAAQ,IAAIA,QAAQ,CAApBA,IAAoB,CAApBA;AAH4B,GAAA,EAK9B,CALF,IAKE,CAL8B,CAAhC;AAQA,MAAMU,eAAe,GAAGD,WAAW,CAAC,YAAA;AAClC,QAAIR,IAAI,KAAR,OAAA,EAAsB;AACpBO,MAAAA,YAAY,CAAZA,MAAY,CAAZA;AACA;AACD;;AACD,QAAIP,IAAI,KAAR,MAAA,EAAqB;AACnBO,MAAAA,YAAY,CAAZA,OAAY,CAAZA;AACA;AACD;;AACD,QAAI,CAAA,SAAA,IAAJ,QAAA,EAA4B;AAC1BA,MAAAA,YAAY,CAAZA,OAAY,CAAZA;AACA;AACD;;AACD,QAAI,CAAA,IAAA,IAAJ,SAAA,EAAwB;AACtBA,MAAAA,YAAY,CAAZA,MAAY,CAAZA;AACA;AACD;AAhBgC,GAAA,EAiBhC,CAAA,IAAA,EAAA,SAAA,EAjBH,QAiBG,CAjBgC,CAAnC;AAmBA,SACE,cAAA,CAAA,aAAA,CAACb,gBAAgB,CAAjB,QAAA,EAAA;AAA2BgB,IAAAA,KAAK,EAAE;AAAEf,MAAAA,SAAS,EAAX,IAAA;AAAmBc,MAAAA,eAAe,EAAfA;AAAnB;AAAlC,GAAA,EACE,cAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAYd,IAAAA,SAAS,EAAEK;AAAvB,GAAA,CADF,EADF,QACE,CADF;AAMD,C","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport { useMediaQuery } from '../hooks/use-media-query';\nimport { ColorModes } from './styles';\nexport * from './utils';\nexport * from './types';\nexport * from './styles';\n\nexport const ColorModeContext = React.createContext<{ colorMode?: string; toggleColorMode?: any }>({\n  colorMode: undefined,\n});\n\nexport const ColorModeProvider = ({\n  colorMode,\n  children,\n  onChange,\n}: {\n  colorMode?: string;\n  children: any;\n  onChange?: (mode: string) => void;\n}) => {\n  const [mode, setMode] = React.useState(colorMode);\n  const [darkmode] = useMediaQuery('(prefers-color-scheme: dark)');\n  const [lightmode] = useMediaQuery('(prefers-color-scheme: light)');\n\n  useEffect(() => {\n    if (!mode) {\n      setMode(darkmode ? 'dark' : 'light');\n    }\n  }, [mode, darkmode, lightmode]);\n\n  const setColorMode = useCallback(\n    (mode: 'light' | 'dark') => {\n      setMode(mode);\n      onChange && onChange(mode);\n    },\n    [mode]\n  );\n\n  const toggleColorMode = useCallback(() => {\n    if (mode === 'light') {\n      setColorMode('dark');\n      return;\n    }\n    if (mode === 'dark') {\n      setColorMode('light');\n      return;\n    }\n    if (!colorMode && darkmode) {\n      setColorMode('light');\n      return;\n    }\n    if (!mode && lightmode) {\n      setColorMode('dark');\n      return;\n    }\n  }, [mode, lightmode, darkmode]);\n\n  return (\n    <ColorModeContext.Provider value={{ colorMode: mode, toggleColorMode }}>\n      <ColorModes colorMode={mode} />\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}