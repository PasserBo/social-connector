{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { forwardRef, isValidElement, Children, cloneElement } from 'react';\nimport { Box } from '../box/index.esm.js';\nimport { Flex } from '../flex/index.esm.js';\nvar Stack = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var isInline = _ref.isInline,\n      children = _ref.children,\n      align = _ref.align,\n      justify = _ref.justify,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      shouldWrapChildren = _ref.shouldWrapChildren,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isInline\", \"children\", \"align\", \"justify\", \"spacing\", \"shouldWrapChildren\"]);\n\n  var validChildren = Array.isArray(children) ? children.filter(isValidElement) : [];\n  return React__default.createElement(Flex, Object.assign({\n    align: align,\n    justify: justify,\n    flexDir: isInline ? 'row' : 'column',\n    ref: ref\n  }, rest), Children.map(validChildren, function (child, index) {\n    if (!isValidElement(child)) {\n      return null;\n    }\n\n    if (!Array.isArray(children)) {\n      return null;\n    }\n\n    var isLastChild = validChildren.length === index + 1;\n    var spacingProps = isInline ? {\n      mr: isLastChild ? undefined : spacing\n    } : {\n      mb: isLastChild ? undefined : spacing\n    };\n\n    if (shouldWrapChildren) {\n      return React__default.createElement(Box, Object.assign({\n        d: \"inline-block\"\n      }, spacingProps), child);\n    }\n\n    return cloneElement(child, spacingProps);\n  }));\n});\nStack.displayName = 'Stack';\nexport { Stack };","map":{"version":3,"sources":["../../src/stack/index.tsx"],"names":["Stack","forwardRef","isInline","children","align","justify","spacing","shouldWrapChildren","rest","validChildren","Array","flexDir","ref","isValidElement","isLastChild","index","spacingProps","mr","mb","React","d","cloneElement"],"mappings":";;;;IAQMA,KAAK,GAAA,aAAGC,UAAU,CACtB,UAAA,IAAA,EAAA,GAAA,EAAA;MAAGC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MAAUC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MAAUC,KAAAA,GAAAA,IAAAA,CAAAA,K;MAAOC,OAAAA,GAAAA,IAAAA,CAAAA,O;0BAASC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,CAAVA,GAAU,Y;MAAGC,kBAAAA,GAAAA,IAAAA,CAAAA,kB;MAAuBC,IAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA,OAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,oBAAAA,CAAAA,C;;AACzE,MAAMC,aAAa,GAAGC,KAAK,CAALA,OAAAA,CAAAA,QAAAA,IAA0BP,QAAQ,CAARA,MAAAA,CAA1BO,cAA0BP,CAA1BO,GAAtB,EAAA;AAEA,SACE,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACEN,IAAAA,KAAK,EAAEA,KADT;AAEEC,IAAAA,OAAO,EAAEA,OAFX;AAGEM,IAAAA,OAAO,EAAET,QAAQ,GAAA,KAAA,GAAW,QAH9B;AAIEU,IAAAA,GAAG,EAAEA;AAJP,GAAA,EAAA,IAAA,CAAA,EAOG,QAAQ,CAAR,GAAA,CAAA,aAAA,EAA4B,UAAA,KAAA,EAAA,KAAA,EAAA;AAC3B,QAAI,CAACC,cAAc,CAAnB,KAAmB,CAAnB,EAA4B;AAC1B,aAAA,IAAA;AACD;;AACD,QAAI,CAACH,KAAK,CAALA,OAAAA,CAAL,QAAKA,CAAL,EAA8B;AAC5B,aAAA,IAAA;AACD;;AACD,QAAMI,WAAW,GAAGL,aAAa,CAAbA,MAAAA,KAAyBM,KAAK,GAAlD,CAAA;AACA,QAAMC,YAAY,GAAGd,QAAQ,GACzB;AAAEe,MAAAA,EAAE,EAAEH,WAAW,GAAA,SAAA,GAAeR;AAAhC,KADyB,GAEzB;AAAEY,MAAAA,EAAE,EAAEJ,WAAW,GAAA,SAAA,GAAeR;AAAhC,KAFJ;;AAIA,QAAA,kBAAA,EAAwB;AACtB,aACEa,cAAAA,CAAAA,aAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAAKC,QAAAA,CAAC,EAAC;AAAPD,OAAAA,EAAAA,YAAAA,CAAAA,EADF,KACEA,CADF;AAKD;;AACD,WAAOE,YAAY,CAAA,KAAA,EAAnB,YAAmB,CAAnB;AA3BN,GAQK,CAPH,CADF;AAJoB,CAAA,C;AAsCxBrB,KAAK,CAALA,WAAAA,GAAAA,OAAAA","sourcesContent":["import React, { forwardRef, Children, cloneElement, isValidElement } from 'react';\nimport { Flex } from '../flex';\nimport { Box } from '../box';\nimport { StackProps } from './types';\nimport { SpacingProps } from '../theme/types';\n\nexport * from './types';\n\nconst Stack = forwardRef<any, StackProps>(\n  ({ isInline, children, align, justify, spacing = 2, shouldWrapChildren, ...rest }, ref) => {\n    const validChildren = Array.isArray(children) ? children.filter(isValidElement) : [];\n\n    return (\n      <Flex\n        align={align}\n        justify={justify}\n        flexDir={isInline ? 'row' : 'column'}\n        ref={ref}\n        {...rest}\n      >\n        {Children.map(validChildren, (child, index) => {\n          if (!isValidElement(child)) {\n            return null;\n          }\n          if (!Array.isArray(children)) {\n            return null;\n          }\n          const isLastChild = validChildren.length === index + 1;\n          const spacingProps = isInline\n            ? { mr: isLastChild ? undefined : spacing }\n            : { mb: isLastChild ? undefined : spacing };\n\n          if (shouldWrapChildren) {\n            return (\n              <Box d=\"inline-block\" {...(spacingProps as SpacingProps)}>\n                {child}\n              </Box>\n            );\n          }\n          return cloneElement(child, spacingProps);\n        })}\n      </Flex>\n    );\n  }\n);\n\nStack.displayName = 'Stack';\n\nexport { Stack };\n"]},"metadata":{},"sourceType":"module"}