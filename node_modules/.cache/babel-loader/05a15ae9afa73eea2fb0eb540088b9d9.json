{"ast":null,"code":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  // Private helper vars\n  var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n  var uniqueId = 0; // The grammar object for plaintext\n\n  var plainTextGrammar = {};\n  var _ = {\n    /**\n     * A namespace for utility methods.\n     *\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n     * change or disappear at any time.\n     *\n     * @namespace\n     * @memberof Prism\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n\n      /**\n       * Returns the name of the type of the given value.\n       *\n       * @param {any} o\n       * @returns {string}\n       * @example\n       * type(null)      === 'Null'\n       * type(undefined) === 'Undefined'\n       * type(123)       === 'Number'\n       * type('foo')     === 'String'\n       * type(true)      === 'Boolean'\n       * type([1, 2])    === 'Array'\n       * type({})        === 'Object'\n       * type(String)    === 'Function'\n       * type(/abc+/)    === 'RegExp'\n       */\n      type: function type(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n\n      /**\n       * Returns a unique number for the given object. Later calls will still return the same number.\n       *\n       * @param {Object} obj\n       * @returns {number}\n       */\n      objId: function objId(obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n\n        return obj['__id'];\n      },\n\n      /**\n       * Creates a deep clone of the given object.\n       *\n       * The main intended use of this function is to clone language definitions.\n       *\n       * @param {T} o\n       * @param {Record<number, any>} [visited]\n       * @returns {T}\n       * @template T\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone =\n            /** @type {Record<string, any>} */\n            {};\n            visited[id] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          case 'Array':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = [];\n            visited[id] = clone;\n\n            /** @type {Array} */\n\n            /** @type {any} */\n            o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          default:\n            return o;\n        }\n      },\n\n      /**\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n       *\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n       *\n       * @param {Element} element\n       * @returns {string}\n       */\n      getLanguage: function getLanguage(element) {\n        while (element) {\n          var m = lang.exec(element.className);\n\n          if (m) {\n            return m[1].toLowerCase();\n          }\n\n          element = element.parentElement;\n        }\n\n        return 'none';\n      },\n\n      /**\n       * Sets the Prism `language-xxxx` class of the given element.\n       *\n       * @param {Element} element\n       * @param {string} language\n       * @returns {void}\n       */\n      setLanguage: function setLanguage(element, language) {\n        // remove all `language-xxxx` classes\n        // (this might leave behind a leading space)\n        element.className = element.className.replace(RegExp(lang, 'gi'), ''); // add the new `language-xxxx` class\n        // (using `classList` will automatically clean up spaces for us)\n\n        element.classList.add('language-' + language);\n      },\n\n      /**\n       * Returns whether a given class is active for `element`.\n       *\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n       * given class is just the given class with a `no-` prefix.\n       *\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\n       *\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n       * version of it, the class is considered active.\n       *\n       * @param {Element} element\n       * @param {string} className\n       * @param {boolean} [defaultActivation=false]\n       * @returns {boolean}\n       */\n      isActive: function isActive(element, className, defaultActivation) {\n        var no = 'no-' + className;\n\n        while (element) {\n          var classList = element.classList;\n\n          if (classList.contains(className)) {\n            return true;\n          }\n\n          if (classList.contains(no)) {\n            return false;\n          }\n\n          element = element.parentElement;\n        }\n\n        return !!defaultActivation;\n      }\n    },\n\n    /**\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n     *\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    languages: {\n      /**\n       * The grammar for plain, unformatted text.\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n\n      /**\n       * Creates a deep copy of the language with the given id and appends the given tokens.\n       *\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n       * will be overwritten at its original position.\n       *\n       * ## Best practices\n       *\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n       *\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n       *\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n       * @param {Grammar} redef The new tokens to append.\n       * @returns {Grammar} The new language created.\n       * @public\n       * @example\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n       *     // at its original position\n       *     'comment': { ... },\n       *     // CSS doesn't have a 'color' token, so this token will be appended\n       *     'color': /\\b(?:red|green|blue)\\b/\n       * });\n       */\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\n       *\n       * ## Usage\n       *\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n       * this:\n       *\n       * ```js\n       * Prism.languages.markup.style = {\n       *     // token\n       * };\n       * ```\n       *\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n       * before existing tokens. For the CSS example above, you would use it like this:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'cdata', {\n       *     'style': {\n       *         // token\n       *     }\n       * });\n       * ```\n       *\n       * ## Special cases\n       *\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n       * will be ignored.\n       *\n       * This behavior can be used to insert tokens after `before`:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'comment', {\n       *     'comment': Prism.languages.markup.comment,\n       *     // tokens after 'comment'\n       * });\n       * ```\n       *\n       * ## Limitations\n       *\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n       * deleting properties which is necessary to insert at arbitrary positions.\n       *\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\n       *\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n       * you hold the target object in a variable, then the value of the variable will not change.\n       *\n       * ```js\n       * var oldMarkup = Prism.languages.markup;\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n       *\n       * assert(oldMarkup !== Prism.languages.markup);\n       * assert(newMarkup === Prism.languages.markup);\n       * ```\n       *\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n       * object to be modified.\n       * @param {string} before The key to insert before.\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n       * object to be modified.\n       *\n       * Defaults to `Prism.languages`.\n       * @returns {Grammar} The new grammar object.\n       * @public\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root ||\n        /** @type {any} */\n        _.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            } // Do not insert token which also occur in insert. See #1525\n\n\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n\n        var old = root[inside];\n        root[inside] = ret; // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n\n            var propertyType = _.util.type(property);\n\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n\n    /**\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n     * and the language definitions to use, and returns a string with the HTML produced.\n     *\n     * The following hooks will be run:\n     * 1. `before-tokenize`\n     * 2. `after-tokenize`\n     * 3. `wrap`: On each {@link Token}.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @param {string} language The name of the language definition passed to `grammar`.\n     * @returns {string} The highlighted HTML.\n     * @memberof Prism\n     * @public\n     * @example\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n     */\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run('before-tokenize', env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run('after-tokenize', env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n\n    /**\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n     * and the language definitions to use, and returns an array with the tokenized code.\n     *\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n     *\n     * This method could be useful in other contexts as well, as a very crude parser.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\n     * @memberof Prism\n     * @public\n     * @example\n     * let code = `var foo = 0;`;\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n     * tokens.forEach(token => {\n     *     if (token instanceof Prism.Token && token.type === 'number') {\n     *         console.log(`Found numeric literal: ${token.content}`);\n     *     }\n     * });\n     */\n    tokenize: function tokenize(text, grammar) {\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n\n    /**\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    hooks: {\n      all: {},\n\n      /**\n       * Adds the given callback to the list of callbacks for the given hook.\n       *\n       * The callback will be invoked when the hook it is registered for is run.\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n       *\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\n       *\n       * @param {string} name The name of the hook.\n       * @param {HookCallback} callback The callback function which is given environment variables.\n       * @public\n       */\n      add: function add(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n\n      /**\n       * Runs a hook invoking all registered callbacks with the given environment variables.\n       *\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\n       *\n       * @param {string} name The name of the hook.\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n       * @public\n       */\n      run: function run(name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  }; // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\n   * Creates a new token.\n   *\n   * @param {string} type See {@link Token#type type}\n   * @param {string | TokenStream} content See {@link Token#content content}\n   * @param {string|string[]} [alias] The alias(es) of the token.\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n   * @class\n   * @global\n   * @public\n   */\n\n  function Token(type, content, alias, matchedStr) {\n    /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     *\n     * @type {string}\n     * @see GrammarToken\n     * @public\n     */\n    this.type = type;\n    /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     *\n     * @type {string | TokenStream}\n     * @public\n     */\n\n    this.content = content;\n    /**\n     * The alias(es) of the token.\n     *\n     * @type {string|string[]}\n     * @see GrammarToken\n     * @public\n     */\n\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || '').length | 0;\n  }\n  /**\n   * A token stream is an array of strings and {@link Token Token} objects.\n   *\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n   * them.\n   *\n   * 1. No adjacent strings.\n   * 2. No empty strings.\n   *\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\n   *\n   * @typedef {Array<string | Token>} TokenStream\n   * @global\n   * @public\n   */\n\n  /**\n   * Converts the given token or token stream to an HTML representation.\n   *\n   * The following hooks will be run:\n   * 1. `wrap`: On each {@link Token}.\n   *\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\n   * @param {string} language The name of current language.\n   * @returns {string} The HTML representation of the token or token stream.\n   * @memberof Token\n   * @static\n   */\n\n\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = '';\n\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n  /**\n   * @param {RegExp} pattern\n   * @param {number} pos\n   * @param {string} text\n   * @param {boolean} lookbehind\n   * @returns {RegExpExecArray | null}\n   */\n\n\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n\n    return match;\n  }\n  /**\n   * @param {string} text\n   * @param {LinkedList<string | Token>} tokenList\n   * @param {any} grammar\n   * @param {LinkedListNode<string | Token>} startNode\n   * @param {number} startPos\n   * @param {RematchOptions} [rematch]\n   * @returns {void}\n   * @private\n   *\n   * @typedef RematchOptions\n   * @property {string} cause\n   * @property {number} reach\n   */\n\n\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n        /** @type {RegExp} */\n\n\n        var pattern = patternObj.pattern || patternObj;\n\n        for ( // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n\n          var str = currentNode.value;\n\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n\n          if (str instanceof Token) {\n            continue;\n          }\n\n          var removeCount = 1; // this is the to parameter of removeBetween\n\n          var match;\n\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n\n            if (!match || match.index >= text.length) {\n              break;\n            }\n\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos; // find the node that contains the match\n\n            p += currentNode.value.length;\n\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            } // adjust pos (and p)\n\n\n            p -= currentNode.value.length;\n            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid\n\n            if (currentNode.value instanceof Token) {\n              continue;\n            } // find the last node which is affected by this match\n\n\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n\n            removeCount--; // replace with the new match\n\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n\n            if (!match) {\n              continue;\n            }\n          } // eslint-disable-next-line no-redeclare\n\n\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n\n          var removeFrom = currentNode.prev;\n\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching\n\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @typedef LinkedListNode\n   * @property {T} value\n   * @property {LinkedListNode<T> | null} prev The previous node.\n   * @property {LinkedListNode<T> | null} next The next node.\n   * @template T\n   * @private\n   */\n\n  /**\n   * @template T\n   * @private\n   */\n\n\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n    /** @type {LinkedListNode<T>} */\n\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n\n    this.tail = tail;\n    this.length = 0;\n  }\n  /**\n   * Adds a new node with the given value to the list.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {T} value\n   * @returns {LinkedListNode<T>} The added node.\n   * @template T\n   */\n\n\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\n   * Removes `count` nodes after the given node. The given node will not be removed.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {number} count\n   * @template T\n   */\n\n\n  function removeRange(list, node, count) {\n    var next = node.next;\n\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\n   * @param {LinkedList<T>} list\n   * @returns {T[]}\n   * @template T\n   */\n\n\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n\n    return array;\n  }\n\n  return _;\n}();\n\nvar prism = Prism;\nPrism.default = Prism;\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function value(attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-js-templates\" */\n\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n              walkTokens(token.content);\n            }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n\nexport default prism;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/prism-react-renderer/prism/index.js"],"names":["Prism","lang","uniqueId","plainTextGrammar","_","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlight","env","code","hooks","run","tokenize","stringify","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","apply","join","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","prism","default","markup","addInlined","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","entity","variable","toBeCopied","shell","clike","c","keyword","modName","cpp","string","css","addAttribute","selectorInside","selector","unit","number","javascript","regex","js","space","braces","spread","re","jsx","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","splice","withId","unshift","maybeClassNameTokens","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","undefined","filter","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","tokenizeInterpolationExpression","expression","tempGrammar","args","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","interpolationExpression","placeholder","indexOf","embeddedTokens","placeholders","keys","substring","middle","replacement","afterTokens","concat","supportedLanguages","findTemplateStrings","l","embedded","stringContent","comment","interpolation","coffeescript","coffee","diff","PREFIXES","prefix","test","git","go","graphql","markdown","afterTokenizeGraphql","validTokens","currentIndex","getToken","offset","isTokenType","types","findClosingBracket","open","close","stackHeight","addAlias","startToken","inputVariables","definitionEnd","t","mutationEnd","varToken","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","tokenizePlaceholders","handlebars","punctuation","handlebarsPattern","hbs","json","webmanifest","less","makefile","inner","createInline","tableCell","tableRow","tableLine","yaml","codeLang","codeBlock","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","tagPattern","KNOWN_ENTITY_NAMES","fromCodePoint","String","fromCharCode","parseInt","Number","known","md","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","scss","sql","stylus","func","typescript","typeInside","ts","tsx","wasm","anchorOrAlias","properties","plainKey","createValuePattern","yml"],"mappings":"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CF;AACA;AACA;AACA;AACA;AACA;AACEG,IAAAA,SAAS,EAAE;AACV;AACH;AACA;AACGC,MAAAA,KAAK,EAAEjD,gBAJG;AAKVkD,MAAAA,SAAS,EAAElD,gBALD;AAMVmD,MAAAA,IAAI,EAAEnD,gBANI;AAOVoD,MAAAA,GAAG,EAAEpD,gBAPK;;AASV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGqD,MAAAA,MAAM,EAAE,gBAAU3B,EAAV,EAAc4B,KAAd,EAAqB;AAC5B,YAAIxD,IAAI,GAAGG,CAAC,CAACC,IAAF,CAAOqB,KAAP,CAAatB,CAAC,CAAC+C,SAAF,CAAYtB,EAAZ,CAAb,CAAX;;AAEA,aAAK,IAAIC,GAAT,IAAgB2B,KAAhB,EAAuB;AACtBxD,UAAAA,IAAI,CAAC6B,GAAD,CAAJ,GAAY2B,KAAK,CAAC3B,GAAD,CAAjB;AACA;;AAED,eAAO7B,IAAP;AACA,OA7CS;;AA+CV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGyD,MAAAA,YAAY,EAAE,sBAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACrDA,QAAAA,IAAI,GAAGA,IAAI;AAAI;AAAoB1D,QAAAA,CAAC,CAAC+C,SAArC;AACA,YAAIY,OAAO,GAAGD,IAAI,CAACH,MAAD,CAAlB;AACA;;AACA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","sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\n var Prism = (function () {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn _;\n\n}());\n\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-js-templates\" */\n\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n\nexport default prism;\n"]},"metadata":{},"sourceType":"module"}