{"ast":null,"code":"import { useState } from 'react';\nimport './use-controllable.esm.js';\nimport './use-previous.esm.js';\nimport './use-disclosure.esm.js';\nimport './use-latest-ref.esm.js';\nimport './use-event-listener.esm.js';\nimport './use-force-update.esm.js';\nimport './use-id.esm.js';\nimport './use-merge-refs.esm.js';\nimport { useSafeLayoutEffect } from './use-safe-layout-effect.esm.js';\nimport './use-timeout.esm.js';\nimport './use-theme.esm.js';\nimport './use-color-mode.esm.js';\nvar isBrowser = typeof window !== 'undefined';\n\nvar isSupported = function isSupported(api) {\n  return isBrowser && api in window;\n};\n\nfunction useMediaQuery(query) {\n  var _React$useState = useState(function () {\n    if (!isSupported('matchMedia')) return false;\n    return window.matchMedia(query).matches;\n  }),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported('matchMedia')) return;\n    var mediaQueryList = window.matchMedia(query);\n\n    var listener = function listener() {\n      return setMatches(mediaQueryList.matches);\n    };\n\n    mediaQueryList.addListener(listener);\n    listener();\n    return function () {\n      mediaQueryList.removeListener(listener);\n    };\n  }, [query]);\n  return [matches, setMatches];\n}\n\nexport { useMediaQuery };","map":{"version":3,"sources":["../../src/hooks/use-media-query.tsx"],"names":["isBrowser","isSupported","api","useMediaQuery","query","matches","setMatches","window","useSafeLayoutEffect","mediaQueryList","listener"],"mappings":";;;;;;;;;;;;;AAGA,IAAMA,SAAS,GAAG,OAAA,MAAA,KAAlB,WAAA;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,GAAA,EAAA;AAAA,SAAiBD,SAAS,IAAIE,GAAG,IAAjC,MAAA;AAApB,CAAA;;SAOgBC,a,CAAcC,K,EAAAA;wBACE,QAAA,CAAe,YAAA;AAC3C,QAAI,CAACH,WAAW,CAAhB,YAAgB,CAAhB,EAAgC,OAAA,KAAA;AAChC,WAAOM,MAAM,CAANA,UAAAA,CAAAA,KAAAA,EAAP,OAAA;AAF4B,GAAA,C;MAAvBF,OAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAASC,UAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;AAKhBE,EAAAA,mBAAmB,CAAC,YAAA;AAClB,QAAI,CAACP,WAAW,CAAhB,YAAgB,CAAhB,EAAgC;AAEhC,QAAMQ,cAAc,GAAGF,MAAM,CAANA,UAAAA,CAAvB,KAAuBA,CAAvB;;AACA,QAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAA;AAAA,aAAMJ,UAAU,CAACG,cAAc,CAA/B,OAAgB,CAAhB;AAAjB,KAAA;;AAEAA,IAAAA,cAAc,CAAdA,WAAAA,CAAAA,QAAAA;AAEAC,IAAAA,QAAQ;AAER,WAAO,YAAA;AACLD,MAAAA,cAAc,CAAdA,cAAAA,CAAAA,QAAAA;AADF,KAAA;AAViB,GAAA,EAahB,CAbHD,KAaG,CAbgB,CAAnBA;AAeA,SAAO,CAAA,OAAA,EAAP,UAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useSafeLayoutEffect } from '../hooks';\n\nconst isBrowser = typeof window !== 'undefined';\n\nconst isSupported = (api: string) => isBrowser && api in window;\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string) {\n  const [matches, setMatches] = React.useState(() => {\n    if (!isSupported('matchMedia')) return false;\n    return window.matchMedia(query).matches;\n  });\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported('matchMedia')) return;\n\n    const mediaQueryList = window.matchMedia(query);\n    const listener = () => setMatches(mediaQueryList.matches);\n\n    mediaQueryList.addListener(listener);\n\n    listener();\n\n    return () => {\n      mediaQueryList.removeListener(listener);\n    };\n  }, [query]);\n\n  return [matches, setMatches] as const;\n}\n"]},"metadata":{},"sourceType":"module"}