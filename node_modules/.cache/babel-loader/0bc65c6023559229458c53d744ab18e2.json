{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar NETWORKS = require('./networks');\n\nvar types = require('./types');\n\nvar ecc = require('tiny-secp256k1');\n\nvar randomBytes = require('randombytes');\n\nvar typeforce = require('typeforce');\n\nvar wif = require('wif');\n\nvar isOptions = typeforce.maybe(typeforce.compile({\n  compressed: types.maybe(types.Boolean),\n  network: types.maybe(types.Network)\n}));\n\nvar ECPair = /*#__PURE__*/function () {\n  function ECPair(__D, __Q, options) {\n    _classCallCheck(this, ECPair);\n\n    this.__D = __D;\n    this.__Q = __Q;\n    this.lowR = false;\n    if (options === undefined) options = {};\n    this.compressed = options.compressed === undefined ? true : options.compressed;\n    this.network = options.network || NETWORKS.bitcoin;\n    if (__Q !== undefined) this.__Q = ecc.pointCompress(__Q, this.compressed);\n  }\n\n  _createClass(ECPair, [{\n    key: \"privateKey\",\n    get: function get() {\n      return this.__D;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      if (!this.__Q) this.__Q = ecc.pointFromScalar(this.__D, this.compressed);\n      return this.__Q;\n    }\n  }, {\n    key: \"toWIF\",\n    value: function toWIF() {\n      if (!this.__D) throw new Error('Missing private key');\n      return wif.encode(this.network.wif, this.__D, this.compressed);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(hash, lowR) {\n      if (!this.__D) throw new Error('Missing private key');\n      if (lowR === undefined) lowR = this.lowR;\n\n      if (lowR === false) {\n        return ecc.sign(hash, this.__D);\n      } else {\n        var sig = ecc.sign(hash, this.__D);\n        var extraData = Buffer.alloc(32, 0);\n        var counter = 0; // if first try is lowR, skip the loop\n        // for second try and on, add extra entropy counting up\n\n        while (sig[0] > 0x7f) {\n          counter++;\n          extraData.writeUIntLE(counter, 0, 6);\n          sig = ecc.signWithEntropy(hash, this.__D, extraData);\n        }\n\n        return sig;\n      }\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(hash, signature) {\n      return ecc.verify(hash, this.publicKey, signature);\n    }\n  }]);\n\n  return ECPair;\n}();\n\nfunction fromPrivateKey(buffer, options) {\n  typeforce(types.Buffer256bit, buffer);\n  if (!ecc.isPrivate(buffer)) throw new TypeError('Private key not in range [1, n)');\n  typeforce(isOptions, options);\n  return new ECPair(buffer, undefined, options);\n}\n\nexports.fromPrivateKey = fromPrivateKey;\n\nfunction fromPublicKey(buffer, options) {\n  typeforce(ecc.isPoint, buffer);\n  typeforce(isOptions, options);\n  return new ECPair(undefined, buffer, options);\n}\n\nexports.fromPublicKey = fromPublicKey;\n\nfunction fromWIF(wifString, network) {\n  var decoded = wif.decode(wifString);\n  var version = decoded.version; // list of networks?\n\n  if (types.Array(network)) {\n    network = network.filter(function (x) {\n      return version === x.wif;\n    }).pop();\n    if (!network) throw new Error('Unknown network version'); // otherwise, assume a network object (or default to bitcoin)\n  } else {\n    network = network || NETWORKS.bitcoin;\n    if (version !== network.wif) throw new Error('Invalid network version');\n  }\n\n  return fromPrivateKey(decoded.privateKey, {\n    compressed: decoded.compressed,\n    network: network\n  });\n}\n\nexports.fromWIF = fromWIF;\n\nfunction makeRandom(options) {\n  typeforce(isOptions, options);\n  if (options === undefined) options = {};\n  var rng = options.rng || randomBytes;\n  var d;\n\n  do {\n    d = rng(32);\n    typeforce(types.Buffer256bit, d);\n  } while (!ecc.isPrivate(d));\n\n  return fromPrivateKey(d, options);\n}\n\nexports.makeRandom = makeRandom;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/bitcoinjs-lib/src/ecpair.js"],"names":["Object","defineProperty","exports","value","NETWORKS","require","types","ecc","randomBytes","typeforce","wif","isOptions","maybe","compile","compressed","Boolean","network","Network","ECPair","__D","__Q","options","lowR","undefined","bitcoin","pointCompress","pointFromScalar","Error","encode","hash","sign","sig","extraData","Buffer","alloc","counter","writeUIntLE","signWithEntropy","signature","verify","publicKey","fromPrivateKey","buffer","Buffer256bit","isPrivate","TypeError","fromPublicKey","isPoint","fromWIF","wifString","decoded","decode","version","Array","filter","x","pop","privateKey","makeRandom","rng","d"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst NETWORKS = require('./networks');\nconst types = require('./types');\nconst ecc = require('tiny-secp256k1');\nconst randomBytes = require('randombytes');\nconst typeforce = require('typeforce');\nconst wif = require('wif');\nconst isOptions = typeforce.maybe(\n  typeforce.compile({\n    compressed: types.maybe(types.Boolean),\n    network: types.maybe(types.Network),\n  }),\n);\nclass ECPair {\n  constructor(__D, __Q, options) {\n    this.__D = __D;\n    this.__Q = __Q;\n    this.lowR = false;\n    if (options === undefined) options = {};\n    this.compressed =\n      options.compressed === undefined ? true : options.compressed;\n    this.network = options.network || NETWORKS.bitcoin;\n    if (__Q !== undefined) this.__Q = ecc.pointCompress(__Q, this.compressed);\n  }\n  get privateKey() {\n    return this.__D;\n  }\n  get publicKey() {\n    if (!this.__Q) this.__Q = ecc.pointFromScalar(this.__D, this.compressed);\n    return this.__Q;\n  }\n  toWIF() {\n    if (!this.__D) throw new Error('Missing private key');\n    return wif.encode(this.network.wif, this.__D, this.compressed);\n  }\n  sign(hash, lowR) {\n    if (!this.__D) throw new Error('Missing private key');\n    if (lowR === undefined) lowR = this.lowR;\n    if (lowR === false) {\n      return ecc.sign(hash, this.__D);\n    } else {\n      let sig = ecc.sign(hash, this.__D);\n      const extraData = Buffer.alloc(32, 0);\n      let counter = 0;\n      // if first try is lowR, skip the loop\n      // for second try and on, add extra entropy counting up\n      while (sig[0] > 0x7f) {\n        counter++;\n        extraData.writeUIntLE(counter, 0, 6);\n        sig = ecc.signWithEntropy(hash, this.__D, extraData);\n      }\n      return sig;\n    }\n  }\n  verify(hash, signature) {\n    return ecc.verify(hash, this.publicKey, signature);\n  }\n}\nfunction fromPrivateKey(buffer, options) {\n  typeforce(types.Buffer256bit, buffer);\n  if (!ecc.isPrivate(buffer))\n    throw new TypeError('Private key not in range [1, n)');\n  typeforce(isOptions, options);\n  return new ECPair(buffer, undefined, options);\n}\nexports.fromPrivateKey = fromPrivateKey;\nfunction fromPublicKey(buffer, options) {\n  typeforce(ecc.isPoint, buffer);\n  typeforce(isOptions, options);\n  return new ECPair(undefined, buffer, options);\n}\nexports.fromPublicKey = fromPublicKey;\nfunction fromWIF(wifString, network) {\n  const decoded = wif.decode(wifString);\n  const version = decoded.version;\n  // list of networks?\n  if (types.Array(network)) {\n    network = network\n      .filter(x => {\n        return version === x.wif;\n      })\n      .pop();\n    if (!network) throw new Error('Unknown network version');\n    // otherwise, assume a network object (or default to bitcoin)\n  } else {\n    network = network || NETWORKS.bitcoin;\n    if (version !== network.wif) throw new Error('Invalid network version');\n  }\n  return fromPrivateKey(decoded.privateKey, {\n    compressed: decoded.compressed,\n    network: network,\n  });\n}\nexports.fromWIF = fromWIF;\nfunction makeRandom(options) {\n  typeforce(isOptions, options);\n  if (options === undefined) options = {};\n  const rng = options.rng || randomBytes;\n  let d;\n  do {\n    d = rng(32);\n    typeforce(types.Buffer256bit, d);\n  } while (!ecc.isPrivate(d));\n  return fromPrivateKey(d, options);\n}\nexports.makeRandom = makeRandom;\n"]},"metadata":{},"sourceType":"script"}