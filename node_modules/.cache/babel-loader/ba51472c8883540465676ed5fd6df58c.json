{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n  var valueRef = useRef();\n  useEffect(function () {\n    valueRef.current = value;\n  }, [value]);\n  return valueRef.current;\n}\n\nexport { usePrevious };","map":{"version":3,"sources":["../../src/hooks/use-previous.ts"],"names":["usePrevious","value","valueRef","React"],"mappings":";;SAOgBA,W,CAAeC,K,EAAAA;AAC7B,MAAMC,QAAQ,GAAGC,MAAjB,EAAA;AAEAA,EAAAA,SAAAA,CAAgB,YAAA;AACdD,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA,EAEG,CAFHA,KAEG,CAFHA,CAAAA;AAIA,SAAOD,QAAQ,CAAf,OAAA;AACD","sourcesContent":["import * as React from 'react';\n\n/**\n * React hook that tracks previous value\n *\n * @param value the value to track\n */\nexport function usePrevious<T>(value: T) {\n  const valueRef = React.useRef<T>();\n\n  React.useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n\n  return valueRef.current as T;\n}\n"]},"metadata":{},"sourceType":"module"}