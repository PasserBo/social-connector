{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useControllableProp } from './use-controllable.esm.js';\nimport { usePrevious } from './use-previous.esm.js';\n\nfunction useDisclosure(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onCloseProp = _props.onClose,\n      onOpenProp = _props.onOpen;\n\n  var _React$useState = useState(props.defaultIsOpen || false),\n      isOpenState = _React$useState[0],\n      setIsOpen = _React$useState[1];\n\n  var _useControllableProp = useControllableProp(props.isOpen, isOpenState),\n      isControlled = _useControllableProp[0],\n      isOpen = _useControllableProp[1];\n\n  var prevIsOpen = usePrevious(isOpen);\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    if (onCloseProp) {\n      onCloseProp();\n    }\n  }, [isControlled, onCloseProp]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    if (onOpenProp) {\n      onOpenProp();\n    }\n  }, [isControlled, onOpenProp]);\n  var onToggle = useCallback(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: Boolean(isOpen),\n    prevIsOpen: Boolean(prevIsOpen),\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"sources":["../../src/hooks/use-disclosure.ts"],"names":["useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpenState","setIsOpen","React","isControlled","isOpen","useControllableProp","prevIsOpen","usePrevious","onToggle","action","Boolean"],"mappings":";;;;SAWgBA,a,CAAcC,K,EAAAA;MAAAA,KAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,KAAAA,GAA4B,EAA5BA;;;eACyBA,K;MAApCE,WAAAA,GAAAA,MAAAA,CAATD,O;MAA8BG,UAAAA,GAAAA,MAAAA,CAARD,M;;wBAEGI,QAAAA,CAAeP,KAAK,CAALA,aAAAA,IAAfO,KAAAA,C;MAA1BF,WAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAAaC,SAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;6BACWI,mBAAmB,CAACV,KAAK,CAAN,MAAA,EAAA,WAAA,C;MAA3CQ,YAAAA,GAAAA,oBAAAA,CAAAA,CAAAA,C;MAAcC,MAAAA,GAAAA,oBAAAA,CAAAA,CAAAA,C;;AAErB,MAAME,UAAU,GAAGC,WAAW,CAA9B,MAA8B,CAA9B;AAEA,MAAMX,OAAO,GAAG,WAAA,CAAkB,YAAA;AAChC,QAAI,CAAJ,YAAA,EAAmB;AACjBK,MAAAA,SAAS,CAATA,KAAS,CAATA;AACD;;AACD,QAAA,WAAA,EAAiB;AACfJ,MAAAA,WAAW;AACZ;AANa,GAAA,EAOb,CAAA,YAAA,EAPH,WAOG,CAPa,CAAhB;AASA,MAAMC,MAAM,GAAG,WAAA,CAAkB,YAAA;AAC/B,QAAI,CAAJ,YAAA,EAAmB;AACjBG,MAAAA,SAAS,CAATA,IAAS,CAATA;AACD;;AACD,QAAA,UAAA,EAAgB;AACdF,MAAAA,UAAU;AACX;AANY,GAAA,EAOZ,CAAA,YAAA,EAPH,UAOG,CAPY,CAAf;AASA,MAAMS,QAAQ,GAAG,WAAA,CAAkB,YAAA;AACjC,QAAMC,MAAM,GAAGL,MAAM,GAAA,OAAA,GAArB,MAAA;AACAK,IAAAA,MAAM;AAFS,GAAA,EAGd,CAAA,MAAA,EAAA,MAAA,EAHH,OAGG,CAHc,CAAjB;AAKA,SAAO;AACLL,IAAAA,MAAM,EAAEM,OAAO,CADV,MACU,CADV;AAELJ,IAAAA,UAAU,EAAEI,OAAO,CAFd,UAEc,CAFd;AAGLZ,IAAAA,MAAM,EAHD,MAAA;AAILF,IAAAA,OAAO,EAJF,OAAA;AAKLY,IAAAA,QAAQ,EALH,QAAA;AAMLL,IAAAA,YAAY,EAAZA;AANK,GAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { useControllableProp } from './use-controllable';\nimport { usePrevious } from './use-previous';\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean;\n  defaultIsOpen?: boolean;\n  onClose?(): void;\n  onOpen?(): void;\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const { onClose: onCloseProp, onOpen: onOpenProp } = props;\n\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(props.isOpen, isOpenState);\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    if (onCloseProp) {\n      onCloseProp();\n    }\n  }, [isControlled, onCloseProp]);\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    if (onOpenProp) {\n      onOpenProp();\n    }\n  }, [isControlled, onOpenProp]);\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n\n  return {\n    isOpen: Boolean(isOpen),\n    prevIsOpen: Boolean(prevIsOpen),\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n  };\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>;\n"]},"metadata":{},"sourceType":"module"}