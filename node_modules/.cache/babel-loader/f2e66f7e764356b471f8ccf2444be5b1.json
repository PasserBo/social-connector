{"ast":null,"code":"import { objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { mergeRefs, callAllHandlers } from '../utils/index.esm.js';\nimport '../hooks/use-controllable.esm.js';\nimport '../hooks/use-previous.esm.js';\nimport { useDisclosure } from '../hooks/use-disclosure.esm.js';\nimport '../hooks/use-latest-ref.esm.js';\nimport { useEventListener } from '../hooks/use-event-listener.esm.js';\nimport '../hooks/use-force-update.esm.js';\nimport { useId } from '../hooks/use-id.esm.js';\nimport { useMergeRefs } from '../hooks/use-merge-refs.esm.js';\nimport '../hooks/use-safe-layout-effect.esm.js';\nimport '../hooks/use-timeout.esm.js';\nimport '../hooks/use-theme.esm.js';\nimport '../hooks/use-color-mode.esm.js';\nimport { usePopper } from '../popper/index.esm.js';\nimport flushable from 'flushable';\nvar hideOperation;\nvar activeId = null;\n\nfunction show(fn, delay) {\n  var _hideOperation;\n\n  var isHidePending = (_hideOperation = hideOperation) === null || _hideOperation === void 0 ? void 0 : _hideOperation.pending();\n\n  if (isHidePending) {\n    hideOperation.flush();\n  }\n\n  var showOperation = flushable(function () {\n    return fn(isHidePending);\n  }, isHidePending ? 0 : delay);\n  return showOperation.cancel;\n}\n\nfunction hide(fn, delay) {\n  hideOperation = flushable(function (flushed) {\n    return fn(flushed);\n  }, delay);\n  return hideOperation.cancel;\n}\n\nfunction useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$showDelay = _props.showDelay,\n      showDelay = _props$showDelay === void 0 ? 200 : _props$showDelay,\n      _props$hideDelay = _props.hideDelay,\n      hideDelay = _props$hideDelay === void 0 ? 200 : _props$hideDelay,\n      _props$hideOnClick = _props.hideOnClick,\n      hideOnClick = _props$hideOnClick === void 0 ? false : _props$hideOnClick,\n      onShow = _props.onShow,\n      onHide = _props.onHide,\n      hideOnMouseDown = _props.hideOnMouseDown,\n      placement = _props.placement,\n      id = _props.id,\n      isOpenProp = _props.isOpen,\n      defaultIsOpen = _props.defaultIsOpen,\n      _props$arrowSize = _props.arrowSize,\n      arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize,\n      _label = _props.label;\n\n  var _React$useState = useState(_label),\n      label = _React$useState[0],\n      setLabel = _React$useState[1];\n\n  var labelIsUpToDate = _label === label;\n  if (!labelIsUpToDate) setLabel(_label);\n\n  var _useDisclosure = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen: defaultIsOpen,\n    onOpen: onShow,\n    onClose: onHide\n  }),\n      isOpen = _useDisclosure.isOpen,\n      open = _useDisclosure.onOpen,\n      close = _useDisclosure.onClose;\n\n  var popper = usePopper({\n    forceUpdate: isOpen && labelIsUpToDate,\n    placement: placement,\n    arrowSize: arrowSize\n  });\n  var tooltipId = useId(id, 'tooltip');\n  var ref = useRef(null);\n  var triggerRef = useMergeRefs(ref, popper.reference.ref);\n  var flushRef = useRef();\n  useEffect(function () {\n    return function () {\n      var _flushRef$current;\n\n      return (_flushRef$current = flushRef.current) === null || _flushRef$current === void 0 ? void 0 : _flushRef$current.call(flushRef);\n    };\n  }, []);\n  var hideImmediately = useCallback(function () {\n    var _flushRef$current2;\n\n    (_flushRef$current2 = flushRef.current) === null || _flushRef$current2 === void 0 ? void 0 : _flushRef$current2.call(flushRef);\n    close();\n  }, [close]);\n  var onClick = useCallback(function () {\n    if (hideOnClick) {\n      hideImmediately();\n    }\n  }, [hideOnClick, hideImmediately]);\n  var onMouseDown = useCallback(function () {\n    if (hideOnMouseDown) {\n      hideImmediately();\n    }\n  }, [hideOnMouseDown, hideImmediately]);\n  var showTooltip = useCallback(function () {\n    var _flushRef$current3;\n\n    (_flushRef$current3 = flushRef.current) === null || _flushRef$current3 === void 0 ? void 0 : _flushRef$current3.call(flushRef);\n\n    if (tooltipId !== activeId) {\n      hideImmediately();\n    }\n\n    activeId = tooltipId;\n\n    if (!isOpen) {\n      flushRef.current = show(function () {\n        open();\n      }, showDelay);\n    }\n  }, [isOpen, showDelay, open, tooltipId, hideImmediately]);\n  var hideTooltip = useCallback(function () {\n    var _flushRef$current4;\n\n    (_flushRef$current4 = flushRef.current) === null || _flushRef$current4 === void 0 ? void 0 : _flushRef$current4.call(flushRef);\n    activeId = null;\n\n    if (isOpen) {\n      flushRef.current = hide(function () {\n        close();\n      }, hideDelay);\n    }\n  }, [isOpen, hideDelay, close]);\n  var onMouseOver = useCallback(function (event) {\n    var isSelf = event.target === ref.current;\n\n    if (isOpen && isSelf) {\n      return;\n    }\n\n    showTooltip();\n  }, [isOpen, showTooltip]);\n  var onKeyDown = useCallback(function (event) {\n    if (isOpen && event.key === 'Escape') {\n      hideImmediately();\n    }\n  }, [isOpen, hideImmediately]);\n  useEventListener('keydown', onKeyDown);\n  return {\n    isOpen: isOpen,\n    show: open,\n    hide: close,\n    placement: popper.placement,\n    getTriggerProps: function getTriggerProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _objectSpread2({}, props, {\n        ref: mergeRefs(props.ref, triggerRef),\n        onMouseOut: callAllHandlers(props.onMouseOut, hideTooltip),\n        onMouseOver: callAllHandlers(props.onMouseOver, onMouseOver),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, showTooltip),\n        onBlur: callAllHandlers(props.onBlur, hideTooltip),\n        'aria-describedby': isOpen ? tooltipId : undefined\n      });\n    },\n    getTooltipProps: function getTooltipProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _objectSpread2({}, props, {\n        id: tooltipId,\n        role: 'tooltip',\n        ref: mergeRefs(props.ref, popper.popper.ref),\n        style: _objectSpread2({}, props.style, {}, popper.popper.style)\n      });\n    },\n    getArrowProps: function getArrowProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _objectSpread2({}, props, {\n        ref: mergeRefs(props.ref, popper.arrow.ref),\n        style: _objectSpread2({}, props.style, {}, popper.arrow.style)\n      });\n    }\n  };\n}\n\nexport { useTooltip };","map":{"version":3,"sources":["../../src/tooltip/hooks.tsx"],"names":["activeId","isHidePending","hideOperation","showOperation","flushable","fn","useTooltip","props","showDelay","hideDelay","hideOnClick","onShow","onHide","hideOnMouseDown","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","label","_label","setLabel","React","labelIsUpToDate","onOpen","open","onClose","close","useDisclosure","popper","usePopper","forceUpdate","tooltipId","useId","ref","useRef","triggerRef","useMergeRefs","flushRef","useEffect","hideImmediately","useCallback","onClick","onMouseDown","showTooltip","show","hideTooltip","hide","onMouseOver","isSelf","event","onKeyDown","useEventListener","getTriggerProps","mergeRefs","onMouseOut","callAllHandlers","onFocus","onBlur","undefined","getTooltipProps","role","style","getArrowProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useRef, useCallback, useEffect } from 'react';\nimport { Placement } from '@popperjs/core';\n\nimport { useDisclosure, useEventListener, useId, useMergeRefs } from '../hooks';\nimport { usePopper, UsePopperProps } from '../popper';\nimport { callAllHandlers, mergeRefs, Dict } from '../utils';\nimport flushable from 'flushable';\n\nlet hideOperation: flushable.FlushableOperation;\nlet activeId: string | null = null;\n\nfunction show(fn: (isHidePending: boolean) => void, delay: number) {\n  // check if hide has not been executed\n  const isHidePending = hideOperation?.pending();\n\n  // immediately execute hide if it has not been executed\n  if (isHidePending) {\n    hideOperation.flush();\n  }\n\n  // setup the show operation using flushable\n  const showOperation = flushable(() => fn(isHidePending), isHidePending ? 0 : delay);\n\n  // return a function to cancel show() from executing\n  // in the case of multiple tooltips\n  return showOperation.cancel;\n}\n\nfunction hide(fn: (flushed: boolean) => void, delay: number) {\n  // setup the hide operation using flushable\n  hideOperation = flushable(flushed => fn(flushed), delay);\n\n  // return a function to cancel hide() from executing\n  return hideOperation.cancel;\n}\n\nexport interface UseTooltipProps {\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 200ms\n   */\n  hideDelay?: number;\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 200ms\n   */\n  showDelay?: number;\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  hideOnClick?: boolean;\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  hideOnMouseDown?: boolean;\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onShow?(): void;\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onHide?(): void;\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement;\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string;\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean;\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean;\n  /**\n   * The size of the arrow in css units (numeric)\n   * @default 10 ( = 10px )\n   */\n  arrowSize?: UsePopperProps['arrowSize'];\n  /**\n   * The label, we check if it changes to refresh the position of the tooltip\n   */\n  label?: string;\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    showDelay = 200,\n    hideDelay = 200,\n    hideOnClick = false,\n    onShow,\n    onHide,\n    hideOnMouseDown,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    label: _label,\n  } = props;\n\n  const [label, setLabel] = React.useState(_label);\n\n  const labelIsUpToDate = _label === label;\n\n  if (!labelIsUpToDate) setLabel(_label);\n\n  const { isOpen, onOpen: open, onClose: close } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onShow,\n    onClose: onHide,\n  });\n\n  const popper = usePopper({\n    forceUpdate: isOpen && labelIsUpToDate,\n    placement,\n    arrowSize,\n  });\n\n  const tooltipId = useId(id, 'tooltip');\n\n  const ref = useRef<any>(null);\n  const triggerRef = useMergeRefs(ref, popper.reference.ref);\n\n  const flushRef = useRef<Function>();\n\n  useEffect(() => {\n    return () => flushRef.current?.();\n  }, []);\n\n  const hideImmediately = useCallback(() => {\n    flushRef.current?.();\n    close();\n  }, [close]);\n\n  const onClick = useCallback(() => {\n    if (hideOnClick) {\n      hideImmediately();\n    }\n  }, [hideOnClick, hideImmediately]);\n\n  const onMouseDown = useCallback(() => {\n    if (hideOnMouseDown) {\n      hideImmediately();\n    }\n  }, [hideOnMouseDown, hideImmediately]);\n\n  const showTooltip = useCallback(() => {\n    flushRef.current?.();\n\n    if (tooltipId !== activeId) {\n      hideImmediately();\n    }\n\n    activeId = tooltipId;\n\n    if (!isOpen) {\n      flushRef.current = show(() => {\n        open();\n      }, showDelay);\n    }\n  }, [isOpen, showDelay, open, tooltipId, hideImmediately]);\n\n  const hideTooltip = useCallback(() => {\n    flushRef.current?.();\n    activeId = null;\n\n    if (isOpen) {\n      flushRef.current = hide(() => {\n        close();\n      }, hideDelay);\n    }\n  }, [isOpen, hideDelay, close]);\n\n  const onMouseOver = useCallback(\n    (event: React.MouseEvent) => {\n      const isSelf = event.target === (ref.current as HTMLElement);\n\n      if (isOpen && isSelf) {\n        return;\n      }\n\n      showTooltip();\n    },\n    [isOpen, showTooltip]\n  );\n\n  // A11y: Close the tooltip if user presses escape\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (isOpen && event.key === 'Escape') {\n        hideImmediately();\n      }\n    },\n    [isOpen, hideImmediately]\n  );\n\n  useEventListener('keydown', onKeyDown);\n\n  return {\n    isOpen,\n    show: open,\n    hide: close,\n    placement: popper.placement,\n    getTriggerProps: (props: Dict = {}) => ({\n      ...props,\n      ref: mergeRefs(props.ref, triggerRef),\n      onMouseOut: callAllHandlers(props.onMouseOut, hideTooltip),\n      onMouseOver: callAllHandlers(props.onMouseOver, onMouseOver),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, showTooltip),\n      onBlur: callAllHandlers(props.onBlur, hideTooltip),\n      'aria-describedby': isOpen ? tooltipId : undefined,\n    }),\n    getTooltipProps: (props: Dict = {}) => ({\n      ...props,\n      id: tooltipId,\n      role: 'tooltip',\n      ref: mergeRefs(props.ref, popper.popper.ref),\n      style: { ...props.style, ...popper.popper.style },\n    }),\n    getArrowProps: (props: Dict = {}) => ({\n      ...props,\n      ref: mergeRefs(props.ref, popper.arrow.ref),\n      style: { ...props.style, ...popper.arrow.style },\n    }),\n  };\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>;\n"]},"metadata":{},"sourceType":"module"}