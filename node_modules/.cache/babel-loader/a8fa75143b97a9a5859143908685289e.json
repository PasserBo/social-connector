{"ast":null,"code":"import { intToBigInt, intToBytes } from '@stacks/common';\nimport { PostConditionType, FungibleConditionCode, NonFungibleConditionCode, StacksMessageType } from './constants';\nimport { BufferArray } from './utils';\nimport { serializeAssetInfo, deserializeAssetInfo, serializePrincipal, deserializePrincipal, parseAssetInfoString, parsePrincipalString } from './types';\nimport { serializeCV, deserializeCV } from './clarity';\nimport { DeserializationError } from './errors';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal: principal,\n    conditionCode: conditionCode,\n    amount: intToBigInt(amount, false)\n  };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal: principal,\n    conditionCode: conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo: assetInfo\n  };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal: principal,\n    conditionCode: conditionCode,\n    assetInfo: assetInfo,\n    assetName: assetName\n  };\n}\nexport function serializePostCondition(postCondition) {\n  var bufferArray = new BufferArray();\n  bufferArray.appendByte(postCondition.conditionType);\n  bufferArray.push(serializePrincipal(postCondition.principal));\n\n  if (postCondition.conditionType === PostConditionType.Fungible || postCondition.conditionType === PostConditionType.NonFungible) {\n    bufferArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bufferArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bufferArray.appendByte(postCondition.conditionCode);\n\n  if (postCondition.conditionType === PostConditionType.STX || postCondition.conditionType === PostConditionType.Fungible) {\n    bufferArray.push(intToBytes(postCondition.amount, false, 8));\n  }\n\n  return bufferArray.concatBuffer();\n}\nexport function deserializePostCondition(bufferReader) {\n  var postConditionType = bufferReader.readUInt8Enum(PostConditionType, function (n) {\n    throw new DeserializationError(\"Could not read \".concat(n, \" as PostConditionType\"));\n  });\n  var principal = deserializePrincipal(bufferReader);\n  var conditionCode;\n  var assetInfo;\n  var amount;\n\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, function (n) {\n        throw new DeserializationError(\"Could not read \".concat(n, \" as FungibleConditionCode\"));\n      });\n      amount = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal: principal,\n        conditionCode: conditionCode,\n        amount: amount\n      };\n\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, function (n) {\n        throw new DeserializationError(\"Could not read \".concat(n, \" as FungibleConditionCode\"));\n      });\n      amount = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal: principal,\n        conditionCode: conditionCode,\n        amount: amount,\n        assetInfo: assetInfo\n      };\n\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      var assetName = deserializeCV(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, function (n) {\n        throw new DeserializationError(\"Could not read \".concat(n, \" as FungibleConditionCode\"));\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal: principal,\n        conditionCode: conditionCode,\n        assetInfo: assetInfo,\n        assetName: assetName\n      };\n  }\n}","map":{"version":3,"sources":["../../src/postcondition.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { intToBigInt, intToBytes } from '@stacks/common';\nimport { PostConditionType, FungibleConditionCode, NonFungibleConditionCode, StacksMessageType, } from './constants';\nimport { BufferArray } from './utils';\nimport { serializeAssetInfo, deserializeAssetInfo, serializePrincipal, deserializePrincipal, parseAssetInfoString, parsePrincipalString, } from './types';\nimport { serializeCV, deserializeCV } from './clarity';\nimport { DeserializationError } from './errors';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount: intToBigInt(amount, false),\n    };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    if (typeof assetInfo === 'string') {\n        assetInfo = parseAssetInfoString(assetInfo);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount: intToBigInt(amount, false),\n        assetInfo,\n    };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    if (typeof assetInfo === 'string') {\n        assetInfo = parseAssetInfoString(assetInfo);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n    };\n}\nexport function serializePostCondition(postCondition) {\n    const bufferArray = new BufferArray();\n    bufferArray.appendByte(postCondition.conditionType);\n    bufferArray.push(serializePrincipal(postCondition.principal));\n    if (postCondition.conditionType === PostConditionType.Fungible ||\n        postCondition.conditionType === PostConditionType.NonFungible) {\n        bufferArray.push(serializeAssetInfo(postCondition.assetInfo));\n    }\n    if (postCondition.conditionType === PostConditionType.NonFungible) {\n        bufferArray.push(serializeCV(postCondition.assetName));\n    }\n    bufferArray.appendByte(postCondition.conditionCode);\n    if (postCondition.conditionType === PostConditionType.STX ||\n        postCondition.conditionType === PostConditionType.Fungible) {\n        bufferArray.push(intToBytes(postCondition.amount, false, 8));\n    }\n    return bufferArray.concatBuffer();\n}\nexport function deserializePostCondition(bufferReader) {\n    const postConditionType = bufferReader.readUInt8Enum(PostConditionType, n => {\n        throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n    });\n    const principal = deserializePrincipal(bufferReader);\n    let conditionCode;\n    let assetInfo;\n    let amount;\n    switch (postConditionType) {\n        case PostConditionType.STX:\n            conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.STX,\n                principal,\n                conditionCode,\n                amount,\n            };\n        case PostConditionType.Fungible:\n            assetInfo = deserializeAssetInfo(bufferReader);\n            conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.Fungible,\n                principal,\n                conditionCode,\n                amount,\n                assetInfo,\n            };\n        case PostConditionType.NonFungible:\n            assetInfo = deserializeAssetInfo(bufferReader);\n            const assetName = deserializeCV(bufferReader);\n            conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.NonFungible,\n                principal,\n                conditionCode,\n                assetInfo,\n                assetName,\n            };\n    }\n}\n//# sourceMappingURL=postcondition.js.map"]},"metadata":{},"sourceType":"module"}