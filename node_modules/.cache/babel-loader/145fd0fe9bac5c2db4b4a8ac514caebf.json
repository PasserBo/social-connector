{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { createElement } from 'react';\nimport { Transition } from './base.esm.js';\n\nvar createBaseStyle = function createBaseStyle(placement) {\n  switch (placement) {\n    case 'bottom':\n      {\n        return {\n          maxWidth: '100vw',\n          bottom: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n    case 'top':\n      {\n        return {\n          maxWidth: '100vw',\n          top: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n    case 'left':\n      {\n        return {\n          width: '100%',\n          height: '100vh',\n          left: 0,\n          top: 0\n        };\n      }\n\n    case 'right':\n      {\n        return {\n          width: '100%',\n          right: 0,\n          top: 0,\n          height: '100vh'\n        };\n      }\n\n    default:\n      return undefined;\n  }\n};\n\nvar getTransformStyle = function getTransformStyle(placement, value) {\n  var axis = '';\n  if (placement === 'left' || placement === 'right') axis = 'X';\n  if (placement === 'top' || placement === 'bottom') axis = 'Y';\n  return \"translate\" + axis + \"(\" + value + \")\";\n};\n\nvar getTransitionStyles = function getTransitionStyles(placement) {\n  var offset = {\n    bottom: '100%',\n    top: '-100%',\n    left: '-100%',\n    right: '100%'\n  };\n  return {\n    init: {\n      transform: getTransformStyle(placement, offset[placement])\n    },\n    entered: {\n      transform: getTransformStyle(placement, '0%')\n    },\n    exiting: {\n      transform: getTransformStyle(placement, offset[placement])\n    }\n  };\n};\n\nfunction Slide(props) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'left' : _props$placement,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? 250 : _props$timeout,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"placement\", \"timeout\", \"children\"]);\n\n  var styles = getTransitionStyles(placement);\n\n  var positionStyles = _objectSpread2({\n    position: 'fixed',\n    willChange: 'transform'\n  }, createBaseStyle(placement));\n\n  return createElement(Transition, Object.assign({\n    styles: styles,\n    transition: \"all \" + timeout + \"ms cubic-bezier(0, 0, 0.2, 1)\",\n    timeout: {\n      enter: 50,\n      exit: timeout\n    }\n  }, rest), function (styles) {\n    return children(_objectSpread2({}, positionStyles, {}, styles));\n  });\n}\n\nexport { Slide };","map":{"version":3,"sources":["../../src/transition/slide.tsx"],"names":["createBaseStyle","maxWidth","bottom","left","right","top","width","height","getTransformStyle","axis","placement","getTransitionStyles","offset","init","transform","entered","exiting","Slide","props","timeout","children","rest","styles","positionStyles","position","willChange","transition","enter","exit"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Transition } from './base';\nimport { SlideProps, Placement } from './types';\n\nconst createBaseStyle = (placement: Placement) => {\n  switch (placement) {\n    case 'bottom': {\n      return {\n        maxWidth: '100vw',\n        bottom: 0,\n        left: 0,\n        right: 0,\n      };\n    }\n    case 'top': {\n      return {\n        maxWidth: '100vw',\n        top: 0,\n        left: 0,\n        right: 0,\n      };\n    }\n    case 'left': {\n      return {\n        width: '100%',\n        height: '100vh',\n        left: 0,\n        top: 0,\n      };\n    }\n    case 'right': {\n      return {\n        width: '100%',\n        right: 0,\n        top: 0,\n        height: '100vh',\n      };\n    }\n    default:\n      return undefined;\n  }\n};\n\nconst getTransformStyle = (placement: Placement, value: string) => {\n  let axis = '';\n  if (placement === 'left' || placement === 'right') axis = 'X';\n  if (placement === 'top' || placement === 'bottom') axis = 'Y';\n  return `translate${axis}(${value})`;\n};\n\nconst getTransitionStyles = (placement: Placement) => {\n  const offset = {\n    bottom: '100%',\n    top: '-100%',\n    left: '-100%',\n    right: '100%',\n  };\n\n  return {\n    init: {\n      transform: getTransformStyle(placement, offset[placement]),\n    },\n    entered: { transform: getTransformStyle(placement, '0%') },\n    exiting: {\n      transform: getTransformStyle(placement, offset[placement]),\n    },\n  };\n};\n\nexport function Slide(props: SlideProps) {\n  const { placement = 'left', timeout = 250, children, ...rest } = props;\n\n  const styles = getTransitionStyles(placement);\n\n  const positionStyles: React.CSSProperties = {\n    position: 'fixed',\n    willChange: 'transform',\n    ...createBaseStyle(placement),\n  };\n\n  return (\n    <Transition\n      styles={styles}\n      transition={`all ${timeout}ms cubic-bezier(0, 0, 0.2, 1)`}\n      timeout={{ enter: 50, exit: timeout }}\n      {...rest}\n    >\n      {styles => children({ ...positionStyles, ...styles })}\n    </Transition>\n  );\n}\n\nexport default Slide;\n"]},"metadata":{},"sourceType":"module"}