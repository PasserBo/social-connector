{"ast":null,"code":"import _classCallCheck from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Extracted from https://github.com/crypto-browserify/ripemd160\nvar ARRAY16 = new Array(16);\nvar zl = initU8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\nvar zr = initU8Array([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\nvar sl = initU8Array([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\nvar sr = initU8Array([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\nvar hl = initU32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nvar hr = initU32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction fn1(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn2(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn3(a, b, c, d, e, m, k, s) {\n  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn4(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn5(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n}\n\nfunction readInt32LE(buffer, offset) {\n  offset >>>= 0;\n  return buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24;\n}\n\nfunction writeUInt32LE(buffer, value, offset) {\n  value = +value;\n  offset >>>= 0;\n  buffer[offset + 3] = value >>> 24;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset] = value & 0xff;\n  return offset + 4;\n}\n\nfunction writeInt32LE(buffer, value, offset) {\n  value = +value;\n  offset >>>= 0;\n  buffer[offset] = value & 0xff;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n  return offset + 4;\n}\n\nfunction initU32Array(data) {\n  if (typeof Uint32Array !== 'undefined') {\n    return new Uint32Array(data);\n  } else {\n    return data;\n  }\n}\n\nfunction initU8Array(data) {\n  if (typeof Uint8Array !== 'undefined') {\n    return new Uint8Array(data);\n  } else {\n    return data;\n  }\n}\n\nfunction createU8Array(size) {\n  if (typeof Uint8Array !== 'undefined') {\n    return new Uint8Array(size);\n  } else {\n    return new Array(size);\n  }\n}\n\nexport var RIPEMD160 = /*#__PURE__*/function () {\n  function RIPEMD160() {\n    _classCallCheck(this, RIPEMD160);\n\n    this._block = createU8Array(64);\n    this._blockSize = 64;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n  }\n\n  _createClass(RIPEMD160, [{\n    key: \"update\",\n    value: function update(data) {\n      if (this._finalized) throw new Error('Digest already called'); // consume data\n\n      var block = this._block;\n      var offset = 0;\n\n      while (this._blockOffset + data.length - offset >= this._blockSize) {\n        for (var i = this._blockOffset; i < this._blockSize;) {\n          block[i++] = data[offset++];\n        }\n\n        this._update();\n\n        this._blockOffset = 0;\n      }\n\n      while (offset < data.length) {\n        block[this._blockOffset++] = data[offset++];\n      } // update length\n\n\n      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n        this._length[j] += carry;\n        carry = this._length[j] / 0x0100000000 | 0;\n        if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var words = ARRAY16;\n\n      for (var j = 0; j < 16; ++j) {\n        words[j] = readInt32LE(this._block, j * 4);\n      }\n\n      var al = this._a | 0;\n      var bl = this._b | 0;\n      var cl = this._c | 0;\n      var dl = this._d | 0;\n      var el = this._e | 0;\n      var ar = this._a | 0;\n      var br = this._b | 0;\n      var cr = this._c | 0;\n      var dr = this._d | 0;\n      var er = this._e | 0; // computation\n\n      for (var i = 0; i < 80; i += 1) {\n        var tl = void 0;\n        var tr = void 0;\n\n        if (i < 16) {\n          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n        } else if (i < 32) {\n          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n        } else if (i < 48) {\n          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n        } else if (i < 64) {\n          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n        } else {\n          // if (i<80) {\n          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n        }\n\n        al = el;\n        el = dl;\n        dl = rotl(cl, 10);\n        cl = bl;\n        bl = tl;\n        ar = er;\n        er = dr;\n        dr = rotl(cr, 10);\n        cr = br;\n        br = tr;\n      } // update state\n\n\n      var t = this._b + cl + dr | 0;\n      this._b = this._c + dl + er | 0;\n      this._c = this._d + el + ar | 0;\n      this._d = this._e + al + br | 0;\n      this._e = this._a + bl + cr | 0;\n      this._a = t;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      if (this._finalized) {\n        throw new Error('Digest already called');\n      }\n\n      this._finalized = true; // create padding and handle blocks\n\n      this._block[this._blockOffset++] = 0x80;\n\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n\n        this._update();\n\n        this._blockOffset = 0;\n      }\n\n      this._block.fill(0, this._blockOffset, 56);\n\n      writeUInt32LE(this._block, this._length[0], 56);\n      writeUInt32LE(this._block, this._length[1], 60);\n\n      this._update(); // produce result\n\n\n      var buffer = createU8Array(20);\n      writeInt32LE(buffer, this._a, 0);\n      writeInt32LE(buffer, this._b, 4);\n      writeInt32LE(buffer, this._c, 8);\n      writeInt32LE(buffer, this._d, 12);\n      writeInt32LE(buffer, this._e, 16); // reset state\n\n      this._block.fill(0);\n\n      this._blockOffset = 0;\n\n      for (var i = 0; i < 4; ++i) {\n        this._length[i] = 0;\n      }\n\n      return buffer;\n    }\n  }]);\n\n  return RIPEMD160;\n}();\nexport default RIPEMD160;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/ripemd160-min/dist-esm/index.js"],"names":["ARRAY16","Array","zl","initU8Array","zr","sl","sr","hl","initU32Array","hr","rotl","x","n","fn1","a","b","c","d","e","m","k","s","fn2","fn3","fn4","fn5","readInt32LE","buffer","offset","writeUInt32LE","value","writeInt32LE","data","Uint32Array","Uint8Array","createU8Array","size","RIPEMD160","_block","_blockSize","_blockOffset","_length","_finalized","_a","_b","_c","_d","_e","Error","block","length","i","_update","j","carry","words","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","fill"],"mappings":"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","sourcesContent":["// Extracted from https://github.com/crypto-browserify/ripemd160\nconst ARRAY16 = new Array(16);\nconst zl = initU8Array([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n]);\nconst zr = initU8Array([\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n]);\nconst sl = initU8Array([\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n]);\nconst sr = initU8Array([\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n]);\nconst hl = initU32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst hr = initU32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\nfunction rotl(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction fn1(a, b, c, d, e, m, k, s) {\n    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;\n}\nfunction fn2(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0;\n}\nfunction fn3(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0;\n}\nfunction fn4(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0;\n}\nfunction fn5(a, b, c, d, e, m, k, s) {\n    return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0;\n}\nfunction readInt32LE(buffer, offset) {\n    offset >>>= 0;\n    return (buffer[offset])\n        | (buffer[offset + 1] << 8)\n        | (buffer[offset + 2] << 16)\n        | (buffer[offset + 3] << 24);\n}\nfunction writeUInt32LE(buffer, value, offset) {\n    value = +value;\n    offset >>>= 0;\n    buffer[offset + 3] = (value >>> 24);\n    buffer[offset + 2] = (value >>> 16);\n    buffer[offset + 1] = (value >>> 8);\n    buffer[offset] = (value & 0xff);\n    return offset + 4;\n}\nfunction writeInt32LE(buffer, value, offset) {\n    value = +value;\n    offset >>>= 0;\n    buffer[offset] = (value & 0xff);\n    buffer[offset + 1] = (value >>> 8);\n    buffer[offset + 2] = (value >>> 16);\n    buffer[offset + 3] = (value >>> 24);\n    return offset + 4;\n}\nfunction initU32Array(data) {\n    if (typeof Uint32Array !== 'undefined') {\n        return new Uint32Array(data);\n    }\n    else {\n        return data;\n    }\n}\nfunction initU8Array(data) {\n    if (typeof Uint8Array !== 'undefined') {\n        return new Uint8Array(data);\n    }\n    else {\n        return data;\n    }\n}\nfunction createU8Array(size) {\n    if (typeof Uint8Array !== 'undefined') {\n        return new Uint8Array(size);\n    }\n    else {\n        return new Array(size);\n    }\n}\nexport class RIPEMD160 {\n    constructor() {\n        this._block = createU8Array(64);\n        this._blockSize = 64;\n        this._blockOffset = 0;\n        this._length = [0, 0, 0, 0];\n        this._finalized = false;\n        this._a = 0x67452301;\n        this._b = 0xefcdab89;\n        this._c = 0x98badcfe;\n        this._d = 0x10325476;\n        this._e = 0xc3d2e1f0;\n    }\n    update(data) {\n        if (this._finalized)\n            throw new Error('Digest already called');\n        // consume data\n        const block = this._block;\n        let offset = 0;\n        while (this._blockOffset + data.length - offset >= this._blockSize) {\n            for (let i = this._blockOffset; i < this._blockSize;)\n                block[i++] = data[offset++];\n            this._update();\n            this._blockOffset = 0;\n        }\n        while (offset < data.length)\n            block[this._blockOffset++] = data[offset++];\n        // update length\n        for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n            this._length[j] += carry;\n            carry = (this._length[j] / 0x0100000000) | 0;\n            if (carry > 0)\n                this._length[j] -= 0x0100000000 * carry;\n        }\n        return this;\n    }\n    _update() {\n        const words = ARRAY16;\n        for (let j = 0; j < 16; ++j) {\n            words[j] = readInt32LE(this._block, j * 4);\n        }\n        let al = this._a | 0;\n        let bl = this._b | 0;\n        let cl = this._c | 0;\n        let dl = this._d | 0;\n        let el = this._e | 0;\n        let ar = this._a | 0;\n        let br = this._b | 0;\n        let cr = this._c | 0;\n        let dr = this._d | 0;\n        let er = this._e | 0;\n        // computation\n        for (let i = 0; i < 80; i += 1) {\n            let tl;\n            let tr;\n            if (i < 16) {\n                tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n                tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n            }\n            else if (i < 32) {\n                tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n                tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n            }\n            else if (i < 48) {\n                tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n                tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n            }\n            else if (i < 64) {\n                tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n                tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n            }\n            else { // if (i<80) {\n                tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n                tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n            }\n            al = el;\n            el = dl;\n            dl = rotl(cl, 10);\n            cl = bl;\n            bl = tl;\n            ar = er;\n            er = dr;\n            dr = rotl(cr, 10);\n            cr = br;\n            br = tr;\n        }\n        // update state\n        const t = (this._b + cl + dr) | 0;\n        this._b = (this._c + dl + er) | 0;\n        this._c = (this._d + el + ar) | 0;\n        this._d = (this._e + al + br) | 0;\n        this._e = (this._a + bl + cr) | 0;\n        this._a = t;\n    }\n    digest() {\n        if (this._finalized) {\n            throw new Error('Digest already called');\n        }\n        this._finalized = true;\n        // create padding and handle blocks\n        this._block[this._blockOffset++] = 0x80;\n        if (this._blockOffset > 56) {\n            this._block.fill(0, this._blockOffset, 64);\n            this._update();\n            this._blockOffset = 0;\n        }\n        this._block.fill(0, this._blockOffset, 56);\n        writeUInt32LE(this._block, this._length[0], 56);\n        writeUInt32LE(this._block, this._length[1], 60);\n        this._update();\n        // produce result\n        const buffer = createU8Array(20);\n        writeInt32LE(buffer, this._a, 0);\n        writeInt32LE(buffer, this._b, 4);\n        writeInt32LE(buffer, this._c, 8);\n        writeInt32LE(buffer, this._d, 12);\n        writeInt32LE(buffer, this._e, 16);\n        // reset state\n        this._block.fill(0);\n        this._blockOffset = 0;\n        for (let i = 0; i < 4; ++i) {\n            this._length[i] = 0;\n        }\n        return buffer;\n    }\n}\nexport default RIPEMD160;\n"]},"metadata":{},"sourceType":"module"}