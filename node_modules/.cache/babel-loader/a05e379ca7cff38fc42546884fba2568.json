{"ast":null,"code":"import { createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nvar nativeExceptions = /*#__PURE__*/[EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError].filter(function (except) {\n  return typeof except === 'function';\n});\n\nfunction throwNative(error) {\n  for (var _iterator = _createForOfIteratorHelperLoose(nativeExceptions), _step; !(_step = _iterator()).done;) {\n    var Exception = _step.value;\n    if (error instanceof Exception) throw error;\n  }\n}\n\nfunction safeAwait(promise, finallyFn) {\n  return promise.then(function (data) {\n    if (data instanceof Error) {\n      throwNative(data);\n      return [data];\n    }\n\n    return [undefined, data];\n  })[\"catch\"](function (error) {\n    throwNative(error);\n    return [error];\n  })[\"finally\"](function () {\n    if (finallyFn) finallyFn();\n  });\n}\n\nexport { safeAwait };","map":{"version":3,"sources":["../../src/utils/safe-await.ts"],"names":["nativeExceptions","Exception","error","safeAwait","promise","finallyFn","data","throwNative"],"mappings":";AAGA,IAAMA,gBAAgB,GAAA,aAAG,CAAA,SAAA,EAAA,UAAA,EAAA,cAAA,EAAA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,CAOhB,UAAA,MAAA,EAAM;AAAA,SAAI,OAAA,MAAA,KAAJ,UAAA;AAPf,CAAyB,CAAzB;;AASA,SAAA,WAAA,CAAA,KAAA,EAAA;AACE,OAAA,IAAA,SAAA,GAAA,+BAAA,CAAA,gBAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAA0C;AAAA,QAA/BC,SAA+B,GAAA,KAAA,CAAA,KAAA;AACxC,QAAIC,KAAK,YAAT,SAAA,EAAgC,MAAA,KAAA;AACjC;AACF;;SAEeC,S,CAAaC,O,EAAqBC,S,EAAAA;AAChD,SAAO,OAAO,CAAP,IAAA,CACC,UAAA,IAAA,EAAI;AACR,QAAIC,IAAI,YAAR,KAAA,EAA2B;AACzBC,MAAAA,WAAW,CAAXA,IAAW,CAAXA;AACA,aAAO,CAAP,IAAO,CAAP;AACD;;AACD,WAAO,CAAA,SAAA,EAAP,IAAO,CAAP;AANG,GAAA,EAAA,OAAA,EAQE,UAAA,KAAA,EAAA;AACLA,IAAAA,WAAW,CAAXA,KAAW,CAAXA;AACA,WAAO,CAAP,KAAO,CAAP;AAVG,GAAA,EAAA,SAAA,EAYI,YAAA;AACP,QAAA,SAAA,EAAeF,SAAS;AAb5B,GAAO,CAAP;AAeD","sourcesContent":["// TypeScript port of https://github.com/DavidWells/safe-await/\n\n// Native Error types https://mzl.la/2Veh3TR\nconst nativeExceptions = [\n  EvalError,\n  RangeError,\n  ReferenceError,\n  SyntaxError,\n  TypeError,\n  URIError,\n].filter(except => typeof except === 'function');\n\nfunction throwNative(error: Error) {\n  for (const Exception of nativeExceptions) {\n    if (error instanceof Exception) throw error;\n  }\n}\n\nexport function safeAwait<T>(promise: Promise<T>, finallyFn?: () => void) {\n  return promise\n    .then(data => {\n      if (data instanceof Error) {\n        throwNative(data);\n        return [data] as readonly [Error];\n      }\n      return [undefined, data] as const;\n    })\n    .catch((error: Error) => {\n      throwNative(error);\n      return [error] as const;\n    })\n    .finally(() => {\n      if (finallyFn) finallyFn();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}