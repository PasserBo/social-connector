{"ast":null,"code":"// ** React Import\nimport{useEffect,useRef,memo,Fragment}from'react';// ** Full Calendar & it's Plugins\nimport FullCalendar from'@fullcalendar/react';import listPlugin from'@fullcalendar/list';import dayGridPlugin from'@fullcalendar/daygrid';import timeGridPlugin from'@fullcalendar/timegrid';import interactionPlugin from'@fullcalendar/interaction';// ** Custom Components\nimport Avatar from'@components/avatar';// ** Third Party Components\nimport{toast}from'react-toastify';import{Card,CardBody}from'reactstrap';import{Menu,Check}from'react-feather';// ** Toast Component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ToastComponent=_ref=>{let{title,icon,color}=_ref;return/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"toastify-header pb-0\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"title-wrapper\",children:[/*#__PURE__*/_jsx(Avatar,{size:\"sm\",color:color,icon:icon}),/*#__PURE__*/_jsx(\"h6\",{className:\"toast-title\",children:title})]})})});};const Calendar=props=>{// ** Refs\nconst calendarRef=useRef(null);// ** Props\nconst{store,isRtl,dispatch,calendarsColor,calendarApi,setCalendarApi,handleAddEventSidebar,blankEvent,toggleSidebar,selectEvent,updateEvent}=props;// ** UseEffect checks for CalendarAPI Update\nuseEffect(()=>{if(calendarApi===null){setCalendarApi(calendarRef.current.getApi());}},[calendarApi]);// ** calendarOptions(Props)\nconst calendarOptions={events:store.events.length?store.events:[],plugins:[interactionPlugin,dayGridPlugin,timeGridPlugin,listPlugin],initialView:'dayGridMonth',headerToolbar:{start:'sidebarToggle, prev,next, title',end:'dayGridMonth,timeGridWeek,timeGridDay,listMonth'},/*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */editable:true,/*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */eventResizableFromStart:true,/*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */dragScroll:true,/*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */dayMaxEvents:2,/*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */navLinks:true,eventClassNames(_ref2){let{event:calendarEvent}=_ref2;// eslint-disable-next-line no-underscore-dangle\nconst colorName=calendarsColor[calendarEvent._def.extendedProps.calendar];return[// Background Color\n\"bg-light-\".concat(colorName)];},eventClick(_ref3){let{event:clickedEvent}=_ref3;dispatch(selectEvent(clickedEvent));handleAddEventSidebar();// * Only grab required field otherwise it goes in infinity loop\n// ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n// event.value = grabEventDataFromEventApi(clickedEvent)\n// eslint-disable-next-line no-use-before-define\n// isAddNewEventSidebarActive.value = true\n},customButtons:{sidebarToggle:{text:/*#__PURE__*/_jsx(Menu,{className:\"d-xl-none d-block\"}),click(){toggleSidebar(true);}}},dateClick(info){const ev=blankEvent;ev.start=info.date;ev.end=info.date;dispatch(selectEvent(ev));handleAddEventSidebar();},/*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */eventDrop(_ref4){let{event:droppedEvent}=_ref4;dispatch(updateEvent(droppedEvent));toast.success(/*#__PURE__*/_jsx(ToastComponent,{title:\"Ad Updated\",color:\"success\",icon:/*#__PURE__*/_jsx(Check,{})}),{autoClose:2000,hideProgressBar:true,closeButton:false});},/*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */eventResize(_ref5){let{event:resizedEvent}=_ref5;dispatch(updateEvent(resizedEvent));toast.success(/*#__PURE__*/_jsx(ToastComponent,{title:\"Ad Updated\",color:\"success\",icon:/*#__PURE__*/_jsx(Check,{})}),{autoClose:2000,hideProgressBar:true,closeButton:false});},ref:calendarRef,// Get direction from app state (store)\ndirection:isRtl?'rtl':'ltr'};return/*#__PURE__*/_jsx(Card,{className:\"shadow-none border-0 mb-0 rounded-0\",children:/*#__PURE__*/_jsxs(CardBody,{className:\"pb-0\",children:[/*#__PURE__*/_jsx(FullCalendar,{...calendarOptions}),' ']})});};export default/*#__PURE__*/memo(Calendar);","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/views/apps/book/Calendar.js"],"names":["useEffect","useRef","memo","Fragment","FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","interactionPlugin","Avatar","toast","Card","CardBody","Menu","Check","ToastComponent","title","icon","color","Calendar","props","calendarRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","current","getApi","calendarOptions","events","length","plugins","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction"],"mappings":"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","sourcesContent":["// ** React Import\r\nimport { useEffect, useRef, memo, Fragment } from 'react'\r\n\r\n// ** Full Calendar & it's Plugins\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport listPlugin from '@fullcalendar/list'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { toast } from 'react-toastify'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport { Menu, Check } from 'react-feather'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Calendar = props => {\r\n  // ** Refs\r\n  const calendarRef = useRef(null)\r\n\r\n  // ** Props\r\n  const {\r\n    store,\r\n    isRtl,\r\n    dispatch,\r\n    calendarsColor,\r\n    calendarApi,\r\n    setCalendarApi,\r\n    handleAddEventSidebar,\r\n    blankEvent,\r\n    toggleSidebar,\r\n    selectEvent,\r\n    updateEvent\r\n  } = props\r\n\r\n  // ** UseEffect checks for CalendarAPI Update\r\n  useEffect(() => {\r\n    if (calendarApi === null) {\r\n      setCalendarApi(calendarRef.current.getApi())\r\n    }\r\n  }, [calendarApi])\r\n\r\n  // ** calendarOptions(Props)\r\n  const calendarOptions = {\r\n    events: store.events.length ? store.events : [],\r\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\r\n    initialView: 'dayGridMonth',\r\n    headerToolbar: {\r\n      start: 'sidebarToggle, prev,next, title',\r\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\r\n    },\r\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\r\n    editable: true,\r\n\r\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\r\n    eventResizableFromStart: true,\r\n\r\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\r\n    dragScroll: true,\r\n\r\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\r\n    dayMaxEvents: 2,\r\n\r\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\r\n    navLinks: true,\r\n\r\n    eventClassNames({ event: calendarEvent }) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\r\n\r\n      return [\r\n        // Background Color\r\n        `bg-light-${colorName}`\r\n      ]\r\n    },\r\n\r\n    eventClick({ event: clickedEvent }) {\r\n      dispatch(selectEvent(clickedEvent))\r\n      handleAddEventSidebar()\r\n\r\n      // * Only grab required field otherwise it goes in infinity loop\r\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\r\n      // event.value = grabEventDataFromEventApi(clickedEvent)\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      // isAddNewEventSidebarActive.value = true\r\n    },\r\n\r\n    customButtons: {\r\n      sidebarToggle: {\r\n        text: <Menu className='d-xl-none d-block' />,\r\n        click() {\r\n          toggleSidebar(true)\r\n        }\r\n      }\r\n    },\r\n\r\n    dateClick(info) {\r\n      const ev = blankEvent\r\n      ev.start = info.date\r\n      ev.end = info.date\r\n      dispatch(selectEvent(ev))\r\n      handleAddEventSidebar()\r\n    },\r\n\r\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\r\n    eventDrop({ event: droppedEvent }) {\r\n      dispatch(updateEvent(droppedEvent))\r\n      toast.success(<ToastComponent title='Ad Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\r\n    eventResize({ event: resizedEvent }) {\r\n      dispatch(updateEvent(resizedEvent))\r\n      toast.success(<ToastComponent title='Ad Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    ref: calendarRef,\r\n\r\n    // Get direction from app state (store)\r\n    direction: isRtl ? 'rtl' : 'ltr'\r\n  }\r\n\r\n  return (\r\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\r\n      <CardBody className='pb-0'>\r\n        <FullCalendar {...calendarOptions} />{' '}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(Calendar)\r\n"]},"metadata":{},"sourceType":"module"}