{"ast":null,"code":"var _jsxFileName = \"/Users/jvledesma/Downloads/react-version/full-version/src/router/Router.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Suspense, useContext, lazy, Fragment } from 'react'; // ** Utils\n\nimport { isUserLoggedIn } from '@utils';\nimport { useLayout } from '@hooks/useLayout';\nimport { useRouterTransition } from '@hooks/useRouterTransition'; // ** Custom Components\n\nimport LayoutWrapper from '@layouts/components/layout-wrapper'; // ** Router Components\n\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from 'react-router-dom'; // ** Routes & Default Routes\n\nimport { DefaultRoute, Routes } from './routes'; // ** Layouts\n\nimport BlankLayout from '@layouts/BlankLayout';\nimport VerticalLayout from '@src/layouts/VerticalLayout';\nimport HorizontalLayout from '@src/layouts/HorizontalLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Router = () => {\n  _s();\n\n  // ** Hooks\n  const {\n    layout,\n    setLayout,\n    setLastLayout\n  } = useLayout();\n  const {\n    transition,\n    setTransition\n  } = useRouterTransition(); // ** Default Layout\n\n  const DefaultLayout = layout === 'horizontal' ? 'HorizontalLayout' : 'VerticalLayout'; // ** All of the available layouts\n\n  const Layouts = {\n    BlankLayout,\n    VerticalLayout,\n    HorizontalLayout\n  }; // ** Current Active Item\n\n  const currentActiveItem = null; // ** Return Filtered Array of Routes & Paths\n\n  const LayoutRoutesAndPaths = layout => {\n    const LayoutRoutes = [];\n    const LayoutPaths = [];\n\n    if (Routes) {\n      Routes.filter(route => {\n        // ** Checks if Route layout or Default layout matches current layout\n        if (route.layout === layout || route.layout === undefined && DefaultLayout === layout) {\n          LayoutRoutes.push(route);\n          LayoutPaths.push(route.path);\n        }\n      });\n    }\n\n    return {\n      LayoutRoutes,\n      LayoutPaths\n    };\n  };\n\n  const NotAuthorized = /*#__PURE__*/lazy(() => import('@src/views/pages/misc/NotAuthorized')); // ** Init Error Component\n\n  const Error = /*#__PURE__*/lazy(() => import('@src/views/pages/misc/Error'));\n  /**\r\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\r\n   */\n\n  const FinalRoute = props => {\n    const route = props.route;\n    let action, resource; // ** Assign vars based on route meta\n\n    if (route.meta) {\n      action = route.meta.action ? route.meta.action : null;\n      resource = route.meta.resource ? route.meta.resource : null;\n    }\n\n    if (!isUserLoggedIn() && route.meta === undefined || !isUserLoggedIn() && route.meta && !route.meta.authRoute && !route.meta.publicRoute) {\n      /**\r\n       ** If user is not Logged in & route meta is undefined\r\n       ** OR\r\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\r\n       ** Then redirect user to login\r\n       */\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\n      // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    } else {\n      // ** If none of the above render component\n      return /*#__PURE__*/_jsxDEV(route.component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }, this);\n    }\n  }; // ** Return Route to Render\n\n\n  const ResolveRoutes = () => {\n    return Object.keys(Layouts).map((layout, index) => {\n      // ** Convert Layout parameter to Layout Component\n      // ? Note: make sure to keep layout and component name equal\n      const LayoutTag = Layouts[layout]; // ** Get Routes and Paths of the Layout\n\n      const {\n        LayoutRoutes,\n        LayoutPaths\n      } = LayoutRoutesAndPaths(layout); // ** We have freedom to display different layout for different route\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n      // ** RouterProps to pass them to Layouts\n\n      const routerProps = {};\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: LayoutPaths,\n        children: /*#__PURE__*/_jsxDEV(LayoutTag, {\n          layout: layout,\n          setLayout: setLayout,\n          transition: transition,\n          routerProps: routerProps,\n          setLastLayout: setLastLayout,\n          setTransition: setTransition,\n          currentActiveItem: currentActiveItem,\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: LayoutRoutes.map(route => {\n              return /*#__PURE__*/_jsxDEV(Route, {\n                path: route.path,\n                exact: route.exact === true,\n                render: props => {\n                  // ** Assign props to routerProps\n                  Object.assign(routerProps, { ...props,\n                    meta: route.meta\n                  });\n                  return /*#__PURE__*/_jsxDEV(Fragment, {\n                    children: route.layout === 'BlankLayout' ? /*#__PURE__*/_jsxDEV(Fragment, {\n                      children: /*#__PURE__*/_jsxDEV(FinalRoute, {\n                        route: route,\n                        ...props\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 144,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(LayoutWrapper, {\n                      layout: DefaultLayout,\n                      transition: transition,\n                      setTransition: setTransition\n                      /* Conditional props */\n\n                      /*eslint-disable */\n                      ,\n                      ...(route.appLayout ? {\n                        appLayout: route.appLayout\n                      } : {}),\n                      ...(route.meta ? {\n                        routeMeta: route.meta\n                      } : {}),\n                      ...(route.className ? {\n                        wrapperClass: route.className\n                      } : {}),\n                      children: /*#__PURE__*/_jsxDEV(Suspense, {\n                        fallback: null,\n                        children: /*#__PURE__*/_jsxDEV(FinalRoute, {\n                          route: route,\n                          ...props\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 171,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 25\n                  }, this);\n                }\n              }, route.path, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppRouter, {\n    basename: process.env.REACT_APP_BASENAME,\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => {\n          return isUserLoggedIn() ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: DefaultRoute\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 39\n          }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 72\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/misc/not-authorized\",\n        render: () => /*#__PURE__*/_jsxDEV(Layouts.BlankLayout, {\n          children: /*#__PURE__*/_jsxDEV(NotAuthorized, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), ResolveRoutes(), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        component: Error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Router, \"J/PrNHhIfXgUcQBKZd32hyWvsHY=\", false, function () {\n  return [useLayout, useRouterTransition];\n});\n\n_c = Router;\nexport default Router;\n\nvar _c;\n\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/router/Router.js"],"names":["Suspense","useContext","lazy","Fragment","isUserLoggedIn","useLayout","useRouterTransition","LayoutWrapper","BrowserRouter","AppRouter","Route","Switch","Redirect","DefaultRoute","Routes","BlankLayout","VerticalLayout","HorizontalLayout","Router","layout","setLayout","setLastLayout","transition","setTransition","DefaultLayout","Layouts","currentActiveItem","LayoutRoutesAndPaths","LayoutRoutes","LayoutPaths","filter","route","undefined","push","path","NotAuthorized","Error","FinalRoute","props","action","resource","meta","authRoute","publicRoute","ResolveRoutes","Object","keys","map","index","LayoutTag","routerProps","exact","assign","appLayout","routeMeta","className","wrapperClass","process","env","REACT_APP_BASENAME"],"mappings":"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","sourcesContent":["// ** React Imports\r\nimport { Suspense, useContext, lazy, Fragment } from 'react'\r\n\r\n// ** Utils\r\nimport { isUserLoggedIn } from '@utils'\r\nimport { useLayout } from '@hooks/useLayout'\r\nimport { useRouterTransition } from '@hooks/useRouterTransition'\r\n\r\n// ** Custom Components\r\nimport LayoutWrapper from '@layouts/components/layout-wrapper'\r\n\r\n// ** Router Components\r\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from 'react-router-dom'\r\n\r\n// ** Routes & Default Routes\r\nimport { DefaultRoute, Routes } from './routes'\r\n\r\n// ** Layouts\r\nimport BlankLayout from '@layouts/BlankLayout'\r\nimport VerticalLayout from '@src/layouts/VerticalLayout'\r\nimport HorizontalLayout from '@src/layouts/HorizontalLayout'\r\n\r\nconst Router = () => {\r\n  // ** Hooks\r\n  const { layout, setLayout, setLastLayout } = useLayout()\r\n  const { transition, setTransition } = useRouterTransition()\r\n\r\n  // ** Default Layout\r\n  const DefaultLayout = layout === 'horizontal' ? 'HorizontalLayout' : 'VerticalLayout'\r\n\r\n  // ** All of the available layouts\r\n  const Layouts = { BlankLayout, VerticalLayout, HorizontalLayout }\r\n\r\n  // ** Current Active Item\r\n  const currentActiveItem = null\r\n\r\n  // ** Return Filtered Array of Routes & Paths\r\n  const LayoutRoutesAndPaths = layout => {\r\n    const LayoutRoutes = []\r\n    const LayoutPaths = []\r\n\r\n    if (Routes) {\r\n      Routes.filter(route => {\r\n        // ** Checks if Route layout or Default layout matches current layout\r\n        if (route.layout === layout || (route.layout === undefined && DefaultLayout === layout)) {\r\n          LayoutRoutes.push(route)\r\n          LayoutPaths.push(route.path)\r\n        }\r\n      })\r\n    }\r\n\r\n    return { LayoutRoutes, LayoutPaths }\r\n  }\r\n\r\n  const NotAuthorized = lazy(() => import('@src/views/pages/misc/NotAuthorized'))\r\n\r\n  // ** Init Error Component\r\n  const Error = lazy(() => import('@src/views/pages/misc/Error'))\r\n\r\n  /**\r\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\r\n   */\r\n  const FinalRoute = props => {\r\n    const route = props.route\r\n    let action, resource\r\n\r\n    // ** Assign vars based on route meta\r\n    if (route.meta) {\r\n      action = route.meta.action ? route.meta.action : null\r\n      resource = route.meta.resource ? route.meta.resource : null\r\n    }\r\n\r\n    if (\r\n      (!isUserLoggedIn() && route.meta === undefined) ||\r\n      (!isUserLoggedIn() && route.meta && !route.meta.authRoute && !route.meta.publicRoute)\r\n    ) {\r\n      /**\r\n       ** If user is not Logged in & route meta is undefined\r\n       ** OR\r\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\r\n       ** Then redirect user to login\r\n       */\r\n\r\n      return <Redirect to='/login' />\r\n    } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\r\n      // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\r\n      return <Redirect to='/' />\r\n    } else {\r\n      // ** If none of the above render component\r\n      return <route.component {...props} />\r\n    }\r\n  }\r\n\r\n  // ** Return Route to Render\r\n  const ResolveRoutes = () => {\r\n    return Object.keys(Layouts).map((layout, index) => {\r\n      // ** Convert Layout parameter to Layout Component\r\n      // ? Note: make sure to keep layout and component name equal\r\n\r\n      const LayoutTag = Layouts[layout]\r\n\r\n      // ** Get Routes and Paths of the Layout\r\n      const { LayoutRoutes, LayoutPaths } = LayoutRoutesAndPaths(layout)\r\n\r\n      // ** We have freedom to display different layout for different route\r\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\r\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\r\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\r\n\r\n      // ** RouterProps to pass them to Layouts\r\n      const routerProps = {}\r\n\r\n      return (\r\n        <Route path={LayoutPaths} key={index}>\r\n          <LayoutTag\r\n            layout={layout}\r\n            setLayout={setLayout}\r\n            transition={transition}\r\n            routerProps={routerProps}\r\n            setLastLayout={setLastLayout}\r\n            setTransition={setTransition}\r\n            currentActiveItem={currentActiveItem}\r\n          >\r\n            <Switch>\r\n              {LayoutRoutes.map(route => {\r\n                return (\r\n                  <Route\r\n                    key={route.path}\r\n                    path={route.path}\r\n                    exact={route.exact === true}\r\n                    render={props => {\r\n                      // ** Assign props to routerProps\r\n                      Object.assign(routerProps, {\r\n                        ...props,\r\n                        meta: route.meta\r\n                      })\r\n\r\n                      return (\r\n                        <Fragment>\r\n                          {/* Layout Wrapper to add classes based on route's layout, appLayout and className */}\r\n\r\n                          {route.layout === 'BlankLayout' ? (\r\n                            <Fragment>\r\n                              <FinalRoute route={route} {...props} />\r\n                            </Fragment>\r\n                          ) : (\r\n                            <LayoutWrapper\r\n                              layout={DefaultLayout}\r\n                              transition={transition}\r\n                              setTransition={setTransition}\r\n                              /* Conditional props */\r\n                              /*eslint-disable */\r\n                              {...(route.appLayout\r\n                                ? {\r\n                                    appLayout: route.appLayout\r\n                                  }\r\n                                : {})}\r\n                              {...(route.meta\r\n                                ? {\r\n                                    routeMeta: route.meta\r\n                                  }\r\n                                : {})}\r\n                              {...(route.className\r\n                                ? {\r\n                                    wrapperClass: route.className\r\n                                  }\r\n                                : {})}\r\n                              /*eslint-enable */\r\n                            >\r\n                              <Suspense fallback={null}>\r\n                                <FinalRoute route={route} {...props} />\r\n                              </Suspense>\r\n                            </LayoutWrapper>\r\n                          )}\r\n                        </Fragment>\r\n                      )\r\n                    }}\r\n                  />\r\n                )\r\n              })}\r\n            </Switch>\r\n          </LayoutTag>\r\n        </Route>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppRouter basename={process.env.REACT_APP_BASENAME}>\r\n      <Switch>\r\n        {/* If user is logged in Redirect user to DefaultRoute else to login */}\r\n        <Route\r\n          exact\r\n          path='/'\r\n          render={() => {\r\n            return isUserLoggedIn() ? <Redirect to={DefaultRoute} /> : <Redirect to='/login' />\r\n          }}\r\n        />\r\n        {/* Not Auth Route */}\r\n        <Route\r\n          exact\r\n          path='/misc/not-authorized'\r\n          render={() => (\r\n            <Layouts.BlankLayout>\r\n              <NotAuthorized />\r\n            </Layouts.BlankLayout>\r\n          )}\r\n        />\r\n        {ResolveRoutes()}\r\n\r\n        {/* NotFound Error page */}\r\n        <Route path='*' component={Error} />\r\n      </Switch>\r\n    </AppRouter>\r\n  )\r\n}\r\n\r\nexport default Router\r\n"]},"metadata":{},"sourceType":"module"}