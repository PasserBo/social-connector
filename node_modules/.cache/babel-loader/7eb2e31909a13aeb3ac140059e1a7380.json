{"ast":null,"code":"// ** Redux Imports\nimport{createSlice,createAsyncThunk}from'@reduxjs/toolkit';// ** Axios Imports\nimport axios from'axios';export const getBookmarks=createAsyncThunk('layout/getBookmarks',async()=>{const response=await axios.get('/api/bookmarks/data');return{data:response.data.suggestions,bookmarks:response.data.bookmarks};});export const updateBookmarked=createAsyncThunk('layout/updateBookmarked',async id=>{await axios.post('/api/bookmarks/update',{id});return id;});export const layoutSlice=createSlice({name:'layout',initialState:{query:'',bookmarks:[],suggestions:[]},reducers:{handleSearchQuery:(state,action)=>{state.query=action.payload;}},extraReducers:builder=>{builder.addCase(getBookmarks.fulfilled,(state,action)=>{state.suggestions=action.payload.data;state.bookmarks=action.payload.bookmarks;}).addCase(updateBookmarked.fulfilled,(state,action)=>{let objectToUpdate;// ** find & update object\nstate.suggestions.find(item=>{if(item.id===action.payload){item.isBookmarked=!item.isBookmarked;objectToUpdate=item;}});// ** Get index to add or remove bookmark from array\nconst bookmarkIndex=state.bookmarks.findIndex(x=>x.id===action.payload);if(bookmarkIndex===-1){state.bookmarks.push(objectToUpdate);}else{state.bookmarks.splice(bookmarkIndex,1);}});}});export const{handleSearchQuery}=layoutSlice.actions;export default layoutSlice.reducer;","map":{"version":3,"sources":["/Users/jvledesma/www-bitfari/src/redux/navbar.js"],"names":["createSlice","createAsyncThunk","axios","getBookmarks","response","get","data","suggestions","bookmarks","updateBookmarked","id","post","layoutSlice","name","initialState","query","reducers","handleSearchQuery","state","action","payload","extraReducers","builder","addCase","fulfilled","objectToUpdate","find","item","isBookmarked","bookmarkIndex","findIndex","x","push","splice","actions","reducer"],"mappings":"AAAA;AACA,OAASA,WAAT,CAAsBC,gBAAtB,KAA8C,kBAA9C,CAEA;AACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,MAAMC,CAAAA,YAAY,CAAGF,gBAAgB,CAAC,qBAAD,CAAwB,SAAY,CAC9E,KAAMG,CAAAA,QAAQ,CAAG,KAAMF,CAAAA,KAAK,CAACG,GAAN,CAAU,qBAAV,CAAvB,CACA,MAAO,CACLC,IAAI,CAAEF,QAAQ,CAACE,IAAT,CAAcC,WADf,CAELC,SAAS,CAAEJ,QAAQ,CAACE,IAAT,CAAcE,SAFpB,CAAP,CAID,CAN2C,CAArC,CAQP,MAAO,MAAMC,CAAAA,gBAAgB,CAAGR,gBAAgB,CAAC,yBAAD,CAA4B,KAAMS,CAAAA,EAAN,EAAY,CACtF,KAAMR,CAAAA,KAAK,CAACS,IAAN,CAAW,uBAAX,CAAoC,CAAED,EAAF,CAApC,CAAN,CACA,MAAOA,CAAAA,EAAP,CACD,CAH+C,CAAzC,CAKP,MAAO,MAAME,CAAAA,WAAW,CAAGZ,WAAW,CAAC,CACrCa,IAAI,CAAE,QAD+B,CAErCC,YAAY,CAAE,CACZC,KAAK,CAAE,EADK,CAEZP,SAAS,CAAE,EAFC,CAGZD,WAAW,CAAE,EAHD,CAFuB,CAOrCS,QAAQ,CAAE,CACRC,iBAAiB,CAAE,CAACC,KAAD,CAAQC,MAAR,GAAmB,CACpCD,KAAK,CAACH,KAAN,CAAcI,MAAM,CAACC,OAArB,CACD,CAHO,CAP2B,CAYrCC,aAAa,CAAEC,OAAO,EAAI,CACxBA,OAAO,CACJC,OADH,CACWpB,YAAY,CAACqB,SADxB,CACmC,CAACN,KAAD,CAAQC,MAAR,GAAmB,CAClDD,KAAK,CAACX,WAAN,CAAoBY,MAAM,CAACC,OAAP,CAAed,IAAnC,CACAY,KAAK,CAACV,SAAN,CAAkBW,MAAM,CAACC,OAAP,CAAeZ,SAAjC,CACD,CAJH,EAKGe,OALH,CAKWd,gBAAgB,CAACe,SAL5B,CAKuC,CAACN,KAAD,CAAQC,MAAR,GAAmB,CACtD,GAAIM,CAAAA,cAAJ,CAEA;AACAP,KAAK,CAACX,WAAN,CAAkBmB,IAAlB,CAAuBC,IAAI,EAAI,CAC7B,GAAIA,IAAI,CAACjB,EAAL,GAAYS,MAAM,CAACC,OAAvB,CAAgC,CAC9BO,IAAI,CAACC,YAAL,CAAoB,CAACD,IAAI,CAACC,YAA1B,CACAH,cAAc,CAAGE,IAAjB,CACD,CACF,CALD,EAOA;AACA,KAAME,CAAAA,aAAa,CAAGX,KAAK,CAACV,SAAN,CAAgBsB,SAAhB,CAA0BC,CAAC,EAAIA,CAAC,CAACrB,EAAF,GAASS,MAAM,CAACC,OAA/C,CAAtB,CAEA,GAAIS,aAAa,GAAK,CAAC,CAAvB,CAA0B,CACxBX,KAAK,CAACV,SAAN,CAAgBwB,IAAhB,CAAqBP,cAArB,EACD,CAFD,IAEO,CACLP,KAAK,CAACV,SAAN,CAAgByB,MAAhB,CAAuBJ,aAAvB,CAAsC,CAAtC,EACD,CACF,CAxBH,EAyBD,CAtCoC,CAAD,CAA/B,CAyCP,MAAO,MAAM,CAAEZ,iBAAF,EAAwBL,WAAW,CAACsB,OAA1C,CAEP,cAAetB,CAAAA,WAAW,CAACuB,OAA3B","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\n\r\nexport const getBookmarks = createAsyncThunk('layout/getBookmarks', async () => {\r\n  const response = await axios.get('/api/bookmarks/data')\r\n  return {\r\n    data: response.data.suggestions,\r\n    bookmarks: response.data.bookmarks\r\n  }\r\n})\r\n\r\nexport const updateBookmarked = createAsyncThunk('layout/updateBookmarked', async id => {\r\n  await axios.post('/api/bookmarks/update', { id })\r\n  return id\r\n})\r\n\r\nexport const layoutSlice = createSlice({\r\n  name: 'layout',\r\n  initialState: {\r\n    query: '',\r\n    bookmarks: [],\r\n    suggestions: []\r\n  },\r\n  reducers: {\r\n    handleSearchQuery: (state, action) => {\r\n      state.query = action.payload\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getBookmarks.fulfilled, (state, action) => {\r\n        state.suggestions = action.payload.data\r\n        state.bookmarks = action.payload.bookmarks\r\n      })\r\n      .addCase(updateBookmarked.fulfilled, (state, action) => {\r\n        let objectToUpdate\r\n\r\n        // ** find & update object\r\n        state.suggestions.find(item => {\r\n          if (item.id === action.payload) {\r\n            item.isBookmarked = !item.isBookmarked\r\n            objectToUpdate = item\r\n          }\r\n        })\r\n\r\n        // ** Get index to add or remove bookmark from array\r\n        const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.payload)\r\n\r\n        if (bookmarkIndex === -1) {\r\n          state.bookmarks.push(objectToUpdate)\r\n        } else {\r\n          state.bookmarks.splice(bookmarkIndex, 1)\r\n        }\r\n      })\r\n  }\r\n})\r\n\r\nexport const { handleSearchQuery } = layoutSlice.actions\r\n\r\nexport default layoutSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}