{"ast":null,"code":"var _jsxFileName = \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/views/ui-elements/cards/analytics/Earnings.js\";\nimport Chart from 'react-apexcharts';\nimport { Card, CardTitle, CardText, CardBody, Row, Col } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Earnings = _ref => {\n  let {\n    success\n  } = _ref;\n  const options = {\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    legend: {\n      show: false\n    },\n    comparedResult: [2, -3, 8],\n    labels: ['Billboards', 'Smart TVs', 'Websites', 'Mobile', 'AR', 'Wallets'],\n    stroke: {\n      width: 0\n    },\n    colors: ['#28c76f66', '#28c76f33', success],\n    grid: {\n      padding: {\n        right: -20,\n        bottom: -8,\n        left: -20\n      }\n    },\n    plotOptions: {\n      pie: {\n        startAngle: -10,\n        donut: {\n          labels: {\n            show: true,\n            name: {\n              offsetY: 15\n            },\n            value: {\n              offsetY: -15,\n\n              formatter(val) {\n                return `${parseInt(val)} %`;\n              }\n\n            },\n            value: {\n              show: true,\n              offsetY: 5,\n              label: 'Billboards',\n\n              formatter(total) {\n                return `${parseInt(val)} %`;\n              }\n\n            },\n            value: {\n              show: true,\n              offsetY: 5,\n              label: 'Smart TVs',\n\n              formatter(total) {\n                return `${parseInt(val)} %`;\n              }\n\n            },\n            value: {\n              show: true,\n              offsetY: 5,\n              label: 'Websites',\n\n              formatter(total) {\n                return `${parseInt(val)} %`;\n              }\n\n            },\n            value: {\n              show: true,\n              offsetY: 5,\n              label: 'Mobile',\n\n              formatter(total) {\n                return `${parseInt(val)} %`;\n              }\n\n            },\n            value: {\n              show: true,\n              offsetY: 5,\n              label: 'AR',\n\n              formatter(total) {\n                return `${parseInt(val)} %`;\n              }\n\n            }\n          },\n          value: {\n            show: true,\n            offsetY: 5,\n            label: 'Wallets',\n\n            formatter(total) {\n              return `${parseInt(val)} %`;\n            }\n\n          }\n        }\n      }\n    },\n    responsive: [{\n      breakpoint: 1325,\n      options: {\n        chart: {\n          height: 100\n        }\n      }\n    }, {\n      breakpoint: 1200,\n      options: {\n        chart: {\n          height: 120\n        }\n      }\n    }, {\n      breakpoint: 1065,\n      options: {\n        chart: {\n          height: 100\n        }\n      }\n    }, {\n      breakpoint: 992,\n      options: {\n        chart: {\n          height: 120\n        }\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"earnings-card\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: \"6\",\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"mb-1\",\n            children: \"Ad Space\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"6\",\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            options: options,\n            series: [93, 1, 1, 1, 1, 1],\n            type: \"donut\",\n            height: 120\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Earnings;\nexport default Earnings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Earnings\");","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/views/ui-elements/cards/analytics/Earnings.js"],"names":["Chart","Card","CardTitle","CardText","CardBody","Row","Col","Earnings","success","options","chart","toolbar","show","dataLabels","enabled","legend","comparedResult","labels","stroke","width","colors","grid","padding","right","bottom","left","plotOptions","pie","startAngle","donut","name","offsetY","value","formatter","val","parseInt","label","total","responsive","breakpoint","height"],"mappings":"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","sourcesContent":["import Chart from 'react-apexcharts'\r\nimport { Card, CardTitle, CardText, CardBody, Row, Col } from 'reactstrap'\r\n\r\nconst Earnings = ({ success }) => {\r\n  const options = {\r\n    chart: {\r\n      toolbar: {\r\n        show: false\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    legend: { show: false },\r\n    comparedResult: [2, -3, 8],\r\n    labels: ['Billboards', 'Smart TVs', 'Websites', 'Mobile', 'AR', 'Wallets'],\r\n    stroke: { width: 0 },\r\n    colors: ['#28c76f66', '#28c76f33', success],\r\n    grid: {\r\n      padding: {\r\n        right: -20,\r\n        bottom: -8,\r\n        left: -20\r\n      }\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        startAngle: -10,\r\n        donut: {\r\n          labels: {\r\n            show: true,\r\n            name: {\r\n              offsetY: 15\r\n            },\r\n            value: {\r\n              offsetY: -15,\r\n              formatter(val) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            },\r\n            value: {\r\n              show: true,\r\n              offsetY: 5,\r\n              label: 'Billboards',\r\n              formatter(total) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            },\r\n            value: {\r\n              show: true,\r\n              offsetY: 5,\r\n              label: 'Smart TVs',\r\n              formatter(total) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            },\r\n            value: {\r\n              show: true,\r\n              offsetY: 5,\r\n              label: 'Websites',\r\n              formatter(total) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            },\r\n            value: {\r\n              show: true,\r\n              offsetY: 5,\r\n              label: 'Mobile',\r\n              formatter(total) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            },\r\n            value: {\r\n              show: true,\r\n              offsetY: 5,\r\n              label: 'AR',\r\n              formatter(total) {\r\n                return `${parseInt(val)} %`\r\n              }\r\n            }\r\n          },\r\n          value: {\r\n            show: true,\r\n            offsetY: 5,\r\n            label: 'Wallets',\r\n            formatter(total) {\r\n              return `${parseInt(val)} %`\r\n            }\r\n          }\r\n        }          \r\n      }\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 1325,\r\n        options: {\r\n          chart: {\r\n            height: 100\r\n          }\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 1200,\r\n        options: {\r\n          chart: {\r\n            height: 120\r\n          }\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 1065,\r\n        options: {\r\n          chart: {\r\n            height: 100\r\n          }\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        options: {\r\n          chart: {\r\n            height: 120\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <Card className='earnings-card'>\r\n      <CardBody>\r\n        <Row>\r\n          <Col xs='6'>\r\n            <CardTitle className='mb-1'>Ad Space</CardTitle>\r\n          </Col>\r\n          <Col xs='6'>\r\n            <Chart options={options} series={[93, 1, 1, 1, 1, 1]} type='donut' height={120} />\r\n          </Col>\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Earnings"]},"metadata":{},"sourceType":"module"}