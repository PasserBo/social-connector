{"ast":null,"code":"import axios from'axios';import jwtDefaultConfig from'./jwtDefaultConfig';export default class JwtService{// ** jwtConfig <= Will be used by this service\n// ** For Refreshing Token\n// ** For Refreshing Token\nconstructor(jwtOverrideConfig){this.jwtConfig={...jwtDefaultConfig};this.isAlreadyFetchingAccessToken=false;this.subscribers=[];this.jwtConfig={...this.jwtConfig,...jwtOverrideConfig};// ** Request Interceptor\naxios.interceptors.request.use(config=>{// ** Get token from localStorage\nconst accessToken=this.getToken();// ** If token is present add it to request's Authorization Header\nif(accessToken){// ** eslint-disable-next-line no-param-reassign\nconfig.headers.Authorization=\"\".concat(this.jwtConfig.tokenType,\" \").concat(accessToken);}return config;},error=>Promise.reject(error));// ** Add request/response interceptor\naxios.interceptors.response.use(response=>response,error=>{// ** const { config, response: { status } } = error\nconst{config,response}=error;const originalRequest=config;// ** if (status === 401) {\nif(response&&response.status===401){if(!this.isAlreadyFetchingAccessToken){this.isAlreadyFetchingAccessToken=true;this.refreshToken().then(r=>{this.isAlreadyFetchingAccessToken=false;// ** Update accessToken in localStorage\nthis.setToken(r.data.accessToken);this.setRefreshToken(r.data.refreshToken);this.onAccessTokenFetched(r.data.accessToken);});}const retryOriginalRequest=new Promise(resolve=>{this.addSubscriber(accessToken=>{// ** Make sure to assign accessToken according to your response.\n// ** Check: https://pixinvent.ticksy.com/ticket/2413870\n// ** Change Authorization header\noriginalRequest.headers.Authorization=\"\".concat(this.jwtConfig.tokenType,\" \").concat(accessToken);resolve(this.axios(originalRequest));});});return retryOriginalRequest;}return Promise.reject(error);});}onAccessTokenFetched(accessToken){this.subscribers=this.subscribers.filter(callback=>callback(accessToken));}addSubscriber(callback){this.subscribers.push(callback);}getToken(){return localStorage.getItem(this.jwtConfig.storageTokenKeyName);}getRefreshToken(){return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName);}setToken(value){localStorage.setItem(this.jwtConfig.storageTokenKeyName,value);}setRefreshToken(value){localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName,value);}login(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return axios.post(this.jwtConfig.loginEndpoint,...args);}register(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return axios.post(this.jwtConfig.registerEndpoint,...args);}refreshToken(){return axios.post(this.jwtConfig.refreshEndpoint,{refreshToken:this.getRefreshToken()});}}","map":{"version":3,"sources":["/Users/jvledesma/Downloads/bitfari-dev/www/src/@core/auth/jwt/jwtService.js"],"names":["axios","jwtDefaultConfig","JwtService","constructor","jwtOverrideConfig","jwtConfig","isAlreadyFetchingAccessToken","subscribers","interceptors","request","use","config","accessToken","getToken","headers","Authorization","tokenType","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","retryOriginalRequest","resolve","addSubscriber","filter","callback","push","localStorage","getItem","storageTokenKeyName","getRefreshToken","storageRefreshTokenKeyName","value","setItem","login","args","post","loginEndpoint","register","registerEndpoint","refreshEndpoint"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CAEA,cAAe,MAAMC,CAAAA,UAAW,CAC9B;AAGA;AAGA;AAGAC,WAAW,CAACC,iBAAD,CAAoB,MAR/BC,SAQ+B,CARnB,CAAE,GAAGJ,gBAAL,CAQmB,MAL/BK,4BAK+B,CALA,KAKA,MAF/BC,WAE+B,CAFjB,EAEiB,CAC7B,KAAKF,SAAL,CAAiB,CAAE,GAAG,KAAKA,SAAV,CAAqB,GAAGD,iBAAxB,CAAjB,CAEA;AACAJ,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAM,EAAI,CACR;AACA,KAAMC,CAAAA,WAAW,CAAG,KAAKC,QAAL,EAApB,CAEA;AACA,GAAID,WAAJ,CAAiB,CACf;AACAD,MAAM,CAACG,OAAP,CAAeC,aAAf,WAAkC,KAAKV,SAAL,CAAeW,SAAjD,aAA8DJ,WAA9D,EACD,CACD,MAAOD,CAAAA,MAAP,CACD,CAXH,CAYEM,KAAK,EAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAZX,EAeA;AACAjB,KAAK,CAACQ,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CACEU,QAAQ,EAAIA,QADd,CAEEH,KAAK,EAAI,CACP;AACA,KAAM,CAAEN,MAAF,CAAUS,QAAV,EAAuBH,KAA7B,CACA,KAAMI,CAAAA,eAAe,CAAGV,MAAxB,CAEA;AACA,GAAIS,QAAQ,EAAIA,QAAQ,CAACE,MAAT,GAAoB,GAApC,CAAyC,CACvC,GAAI,CAAC,KAAKhB,4BAAV,CAAwC,CACtC,KAAKA,4BAAL,CAAoC,IAApC,CACA,KAAKiB,YAAL,GAAoBC,IAApB,CAAyBC,CAAC,EAAI,CAC5B,KAAKnB,4BAAL,CAAoC,KAApC,CAEA;AACA,KAAKoB,QAAL,CAAcD,CAAC,CAACE,IAAF,CAAOf,WAArB,EACA,KAAKgB,eAAL,CAAqBH,CAAC,CAACE,IAAF,CAAOJ,YAA5B,EAEA,KAAKM,oBAAL,CAA0BJ,CAAC,CAACE,IAAF,CAAOf,WAAjC,EACD,CARD,EASD,CACD,KAAMkB,CAAAA,oBAAoB,CAAG,GAAIZ,CAAAA,OAAJ,CAAYa,OAAO,EAAI,CAClD,KAAKC,aAAL,CAAmBpB,WAAW,EAAI,CAChC;AACA;AACA;AACAS,eAAe,CAACP,OAAhB,CAAwBC,aAAxB,WAA2C,KAAKV,SAAL,CAAeW,SAA1D,aAAuEJ,WAAvE,EACAmB,OAAO,CAAC,KAAK/B,KAAL,CAAWqB,eAAX,CAAD,CAAP,CACD,CAND,EAOD,CAR4B,CAA7B,CASA,MAAOS,CAAAA,oBAAP,CACD,CACD,MAAOZ,CAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CACD,CAjCH,EAmCD,CAEDY,oBAAoB,CAACjB,WAAD,CAAc,CAChC,KAAKL,WAAL,CAAmB,KAAKA,WAAL,CAAiB0B,MAAjB,CAAwBC,QAAQ,EAAIA,QAAQ,CAACtB,WAAD,CAA5C,CAAnB,CACD,CAEDoB,aAAa,CAACE,QAAD,CAAW,CACtB,KAAK3B,WAAL,CAAiB4B,IAAjB,CAAsBD,QAAtB,EACD,CAEDrB,QAAQ,EAAG,CACT,MAAOuB,CAAAA,YAAY,CAACC,OAAb,CAAqB,KAAKhC,SAAL,CAAeiC,mBAApC,CAAP,CACD,CAEDC,eAAe,EAAG,CAChB,MAAOH,CAAAA,YAAY,CAACC,OAAb,CAAqB,KAAKhC,SAAL,CAAemC,0BAApC,CAAP,CACD,CAEDd,QAAQ,CAACe,KAAD,CAAQ,CACdL,YAAY,CAACM,OAAb,CAAqB,KAAKrC,SAAL,CAAeiC,mBAApC,CAAyDG,KAAzD,EACD,CAEDb,eAAe,CAACa,KAAD,CAAQ,CACrBL,YAAY,CAACM,OAAb,CAAqB,KAAKrC,SAAL,CAAemC,0BAApC,CAAgEC,KAAhE,EACD,CAEDE,KAAK,EAAU,+BAANC,IAAM,0CAANA,IAAM,wBACb,MAAO5C,CAAAA,KAAK,CAAC6C,IAAN,CAAW,KAAKxC,SAAL,CAAeyC,aAA1B,CAAyC,GAAGF,IAA5C,CAAP,CACD,CAEDG,QAAQ,EAAU,gCAANH,IAAM,+CAANA,IAAM,0BAChB,MAAO5C,CAAAA,KAAK,CAAC6C,IAAN,CAAW,KAAKxC,SAAL,CAAe2C,gBAA1B,CAA4C,GAAGJ,IAA/C,CAAP,CACD,CAEDrB,YAAY,EAAG,CACb,MAAOvB,CAAAA,KAAK,CAAC6C,IAAN,CAAW,KAAKxC,SAAL,CAAe4C,eAA1B,CAA2C,CAChD1B,YAAY,CAAE,KAAKgB,eAAL,EADkC,CAA3C,CAAP,CAGD,CAvG6B","sourcesContent":["import axios from 'axios'\r\nimport jwtDefaultConfig from './jwtDefaultConfig'\r\n\r\nexport default class JwtService {\r\n  // ** jwtConfig <= Will be used by this service\r\n  jwtConfig = { ...jwtDefaultConfig }\r\n\r\n  // ** For Refreshing Token\r\n  isAlreadyFetchingAccessToken = false\r\n\r\n  // ** For Refreshing Token\r\n  subscribers = []\r\n\r\n  constructor(jwtOverrideConfig) {\r\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\r\n\r\n    // ** Request Interceptor\r\n    axios.interceptors.request.use(\r\n      config => {\r\n        // ** Get token from localStorage\r\n        const accessToken = this.getToken()\r\n\r\n        // ** If token is present add it to request's Authorization Header\r\n        if (accessToken) {\r\n          // ** eslint-disable-next-line no-param-reassign\r\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n        }\r\n        return config\r\n      },\r\n      error => Promise.reject(error)\r\n    )\r\n\r\n    // ** Add request/response interceptor\r\n    axios.interceptors.response.use(\r\n      response => response,\r\n      error => {\r\n        // ** const { config, response: { status } } = error\r\n        const { config, response } = error\r\n        const originalRequest = config\r\n\r\n        // ** if (status === 401) {\r\n        if (response && response.status === 401) {\r\n          if (!this.isAlreadyFetchingAccessToken) {\r\n            this.isAlreadyFetchingAccessToken = true\r\n            this.refreshToken().then(r => {\r\n              this.isAlreadyFetchingAccessToken = false\r\n\r\n              // ** Update accessToken in localStorage\r\n              this.setToken(r.data.accessToken)\r\n              this.setRefreshToken(r.data.refreshToken)\r\n\r\n              this.onAccessTokenFetched(r.data.accessToken)\r\n            })\r\n          }\r\n          const retryOriginalRequest = new Promise(resolve => {\r\n            this.addSubscriber(accessToken => {\r\n              // ** Make sure to assign accessToken according to your response.\r\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\r\n              // ** Change Authorization header\r\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n              resolve(this.axios(originalRequest))\r\n            })\r\n          })\r\n          return retryOriginalRequest\r\n        }\r\n        return Promise.reject(error)\r\n      }\r\n    )\r\n  }\r\n\r\n  onAccessTokenFetched(accessToken) {\r\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\r\n  }\r\n\r\n  addSubscriber(callback) {\r\n    this.subscribers.push(callback)\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\r\n  }\r\n\r\n  getRefreshToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\r\n  }\r\n\r\n  setToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\r\n  }\r\n\r\n  setRefreshToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\r\n  }\r\n\r\n  login(...args) {\r\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\r\n  }\r\n\r\n  register(...args) {\r\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\r\n  }\r\n\r\n  refreshToken() {\r\n    return axios.post(this.jwtConfig.refreshEndpoint, {\r\n      refreshToken: this.getRefreshToken()\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}