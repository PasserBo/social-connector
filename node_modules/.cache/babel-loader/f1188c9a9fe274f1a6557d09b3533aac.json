{"ast":null,"code":"import { useEffect } from 'react';\nimport { isBrowser } from '../utils/index.esm.js';\nimport { useLatestRef } from './use-latest-ref.esm.js';\n\nfunction useEventListener(event, handler, doc, options) {\n  if (doc === void 0) {\n    doc = isBrowser ? document : null;\n  }\n\n  var savedHandler = useLatestRef(handler);\n  useEffect(function () {\n    if (!doc) return;\n\n    var listener = function listener(event) {\n      savedHandler.current(event);\n    };\n\n    doc.addEventListener(event, listener, options);\n    return function () {\n      doc.removeEventListener(event, listener, options);\n    };\n  }, [event, doc, options, savedHandler]);\n  return function () {\n    var _doc;\n\n    (_doc = doc) === null || _doc === void 0 ? void 0 : _doc.removeEventListener(event, savedHandler.current, options);\n  };\n}\n\nexport { useEventListener };","map":{"version":3,"sources":["../../src/hooks/use-event-listener.ts"],"names":["useEventListener","event","handler","doc","isBrowser","options","savedHandler","useLatestRef","React","listener"],"mappings":";;;;SAcgBA,gB,CACdC,K,EACAC,O,EACAC,G,EACAE,O,EAAAA;MADAF,GAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,GAAAA,GAAuBC,SAAS,GAAA,QAAA,GAAc,IAA9CD;;;AAGA,MAAMG,YAAY,GAAGC,YAAY,CAAjC,OAAiC,CAAjC;AAEAC,EAAAA,SAAAA,CAAgB,YAAA;AACd,QAAI,CAAJ,GAAA,EAAU;;AAEV,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA;AACfH,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA;AADF,KAAA;;AAIAH,IAAAA,GAAG,CAAHA,gBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AAEA,WAAO,YAAA;AACLA,MAAAA,GAAG,CAAHA,mBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AADF,KAAA;AATFK,GAAAA,EAYG,CAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAZHA,YAYG,CAZHA,CAAAA;AAcA,SAAO,YAAA;;;AACL,KAAA,IAAA,GAAA,GAAA,MAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,EAAgCF,YAAY,CAA5C,OAAA,EAAA,OAAA,CAAA;AADF,GAAA;AAGD","sourcesContent":["import * as React from 'react';\nimport { isBrowser, FunctionArguments } from '../utils';\nimport { useLatestRef } from './use-latest-ref';\n\ntype AddEventListener = FunctionArguments<typeof document.addEventListener>;\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener(\n  event: keyof WindowEventMap,\n  handler: (event: any) => void,\n  doc: Document | null = isBrowser ? document : null,\n  options?: AddEventListener[2]\n) {\n  const savedHandler = useLatestRef(handler);\n\n  React.useEffect(() => {\n    if (!doc) return;\n\n    const listener = (event: any) => {\n      savedHandler.current(event);\n    };\n\n    doc.addEventListener(event, listener, options);\n\n    return () => {\n      doc.removeEventListener(event, listener, options);\n    };\n  }, [event, doc, options, savedHandler]);\n\n  return () => {\n    doc?.removeEventListener(event, savedHandler.current, options);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}