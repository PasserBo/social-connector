{"ast":null,"code":"import { useState } from 'react';\n\nvar copyToClipboard = function copyToClipboard(value) {\n  var el = document.createElement('textarea');\n  el.value = value;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  var curSelection = document.getSelection();\n  var selected = curSelection && curSelection.rangeCount > 0 ? curSelection.getRangeAt(0) : false;\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n\n  if (selected) {\n    var _document$getSelectio, _document$getSelectio2;\n\n    (_document$getSelectio = document.getSelection()) === null || _document$getSelectio === void 0 ? void 0 : _document$getSelectio.removeAllRanges();\n    (_document$getSelectio2 = document.getSelection()) === null || _document$getSelectio2 === void 0 ? void 0 : _document$getSelectio2.addRange(selected);\n  }\n};\n\nfunction useClipboard(value) {\n  var _useState = useState(false),\n      hasCopied = _useState[0],\n      setHasCopied = _useState[1];\n\n  var onCopy = function onCopy() {\n    copyToClipboard(value);\n    setHasCopied(true);\n    setTimeout(function () {\n      return setHasCopied(false);\n    }, 1500);\n  };\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}\n\nexport { useClipboard };","map":{"version":3,"sources":["../../src/use-clipboard/index.tsx"],"names":["copyToClipboard","el","document","curSelection","selected","hasCopied","setHasCopied","useState","onCopy","setTimeout","value"],"mappings":";;AAYA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA;AACtB,MAAMC,EAAE,GAAGC,QAAQ,CAARA,aAAAA,CAAX,UAAWA,CAAX;AACAD,EAAAA,EAAE,CAAFA,KAAAA,GAAAA,KAAAA;AACAA,EAAAA,EAAE,CAAFA,YAAAA,CAAAA,UAAAA,EAAAA,EAAAA;AACAA,EAAAA,EAAE,CAAFA,KAAAA,CAAAA,QAAAA,GAAAA,UAAAA;AACAA,EAAAA,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,GAAAA,SAAAA;AACAC,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,EAAAA;AAEA,MAAMC,YAAY,GAAGD,QAAQ,CAA7B,YAAqBA,EAArB;AACA,MAAME,QAAQ,GAAGD,YAAY,IAAIA,YAAY,CAAZA,UAAAA,GAAhBA,CAAAA,GAA8CA,YAAY,CAAZA,UAAAA,CAA9CA,CAA8CA,CAA9CA,GAAjB,KAAA;AACAF,EAAAA,EAAE,CAAFA,MAAAA;AAEAC,EAAAA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA;AACAA,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,EAAAA;;AACA,MAAA,QAAA,EAAc;AAAA,QAAA,qBAAA,EAAA,sBAAA;;AACZ,KAAA,qBAAA,GAAA,QAAQ,CAAR,YAAA,EAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,eAAA,EAAA;AACA,KAAA,sBAAA,GAAA,QAAQ,CAAR,YAAA,EAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,QAAA,CAAA,QAAA,CAAA;AACD;AAjBH,CAAA;;AAoBA,SAAA,YAAA,CAAA,KAAA,EAAA;kBACoCK,QAAQ,CAAA,KAAA,C;MAAnCF,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAWC,YAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AAElB,MAAME,MAAM,GAAG,SAATA,MAAS,GAAA;AACbR,IAAAA,eAAe,CAAfA,KAAe,CAAfA;AACAM,IAAAA,YAAY,CAAZA,IAAY,CAAZA;AACAG,IAAAA,UAAU,CAAC,YAAA;AAAA,aAAMH,YAAY,CAAlB,KAAkB,CAAlB;AAAD,KAAA,EAAVG,IAAU,CAAVA;AAHF,GAAA;;AAMA,SAAO;AAAEC,IAAAA,KAAK,EAAP,KAAA;AAASF,IAAAA,MAAM,EAAf,MAAA;AAAiBH,IAAAA,SAAS,EAATA;AAAjB,GAAP;AACD","sourcesContent":["import { useState } from 'react';\n\ninterface Clipboard {\n  value: string;\n  onCopy: () => void;\n  hasCopied: boolean;\n}\n\n/**\n *\n * @param {any} value - The content to add to clipboard\n */\nconst copyToClipboard = (value: string) => {\n  const el = document.createElement('textarea');\n  el.value = value;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n\n  const curSelection = document.getSelection();\n  const selected = curSelection && curSelection.rangeCount > 0 ? curSelection.getRangeAt(0) : false;\n  el.select();\n\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  if (selected) {\n    document.getSelection()?.removeAllRanges();\n    document.getSelection()?.addRange(selected);\n  }\n};\n\nfunction useClipboard(value: string): Clipboard {\n  const [hasCopied, setHasCopied] = useState(false);\n\n  const onCopy = () => {\n    copyToClipboard(value);\n    setHasCopied(true);\n    setTimeout(() => setHasCopied(false), 1500);\n  };\n\n  return { value, onCopy, hasCopied };\n}\n\nexport { useClipboard };\n"]},"metadata":{},"sourceType":"module"}