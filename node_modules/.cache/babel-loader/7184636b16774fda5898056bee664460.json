{"ast":null,"code":"// ** Checks if an object is empty (returns boolean)\nexport const isObjEmpty=obj=>Object.keys(obj).length===0;// ** Returns K format from a number\nexport const kFormatter=num=>num>999?\"\".concat((num/1000).toFixed(1),\"k\"):num;// ** Converts HTML to string\nexport const htmlToString=html=>html.replace(/<\\/?[^>]+(>|$)/g,'');// ** Checks if the passed date is today\nconst isToday=date=>{const today=new Date();return(/* eslint-disable operator-linebreak */date.getDate()===today.getDate()&&date.getMonth()===today.getMonth()&&date.getFullYear()===today.getFullYear()/* eslint-enable */);};/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */export const formatDate=function(value){let formatting=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{month:'short',day:'numeric',year:'numeric'};if(!value)return value;return new Intl.DateTimeFormat('en-US',formatting).format(new Date(value));};// ** Returns short month of passed date\nexport const formatDateToMonthShort=function(value){let toTimeForCurrentDay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const date=new Date(value);let formatting={month:'short',day:'numeric'};if(toTimeForCurrentDay&&isToday(date)){formatting={hour:'numeric',minute:'numeric'};}return new Intl.DateTimeFormat('en-US',formatting).format(new Date(value));};// ** React Select Theme Colors\nexport const selectThemeColors=theme=>({...theme,colors:{...theme.colors,primary25:'#7367f01a',// for option hover bg-color\nprimary:'#7367f0',// for selected option bg-color\nneutral10:'#7367f0',// for tags bg-color\nneutral20:'#ededed',// for input border-color\nneutral30:'#ededed'// for input hover border-color\n}});","map":{"version":3,"sources":["/Users/jvledesma/www-bitfari/src/utility/Utils.js"],"names":["isObjEmpty","obj","Object","keys","length","kFormatter","num","toFixed","htmlToString","html","replace","isToday","date","today","Date","getDate","getMonth","getFullYear","formatDate","value","formatting","month","day","year","Intl","DateTimeFormat","format","formatDateToMonthShort","toTimeForCurrentDay","hour","minute","selectThemeColors","theme","colors","primary25","primary","neutral10","neutral20","neutral30"],"mappings":"AAAA;AACA,MAAO,MAAMA,CAAAA,UAAU,CAAGC,GAAG,EAAIC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,GAA4B,CAAtD,CAEP;AACA,MAAO,MAAMC,CAAAA,UAAU,CAAGC,GAAG,EAAKA,GAAG,CAAG,GAAN,WAAe,CAACA,GAAG,CAAG,IAAP,EAAaC,OAAb,CAAqB,CAArB,CAAf,MAA4CD,GAAvE,CAEP;AACA,MAAO,MAAME,CAAAA,YAAY,CAAGC,IAAI,EAAIA,IAAI,CAACC,OAAL,CAAa,iBAAb,CAAgC,EAAhC,CAA7B,CAEP;AACA,KAAMC,CAAAA,OAAO,CAAGC,IAAI,EAAI,CACtB,KAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,IAAJ,EAAd,CACA,MACE,wCACAF,IAAI,CAACG,OAAL,KAAmBF,KAAK,CAACE,OAAN,EAAnB,EACAH,IAAI,CAACI,QAAL,KAAoBH,KAAK,CAACG,QAAN,EADpB,EAEAJ,IAAI,CAACK,WAAL,KAAuBJ,KAAK,CAACI,WAAN,EACvB,mBALF,EAOD,CATD,CAWA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAMC,CAAAA,UAAU,CAAG,SAACC,KAAD,CAA6E,IAArEC,CAAAA,UAAqE,2DAAxD,CAAEC,KAAK,CAAE,OAAT,CAAkBC,GAAG,CAAE,SAAvB,CAAkCC,IAAI,CAAE,SAAxC,CAAwD,CACrG,GAAI,CAACJ,KAAL,CAAY,MAAOA,CAAAA,KAAP,CACZ,MAAO,IAAIK,CAAAA,IAAI,CAACC,cAAT,CAAwB,OAAxB,CAAiCL,UAAjC,EAA6CM,MAA7C,CAAoD,GAAIZ,CAAAA,IAAJ,CAASK,KAAT,CAApD,CAAP,CACD,CAHM,CAKP;AACA,MAAO,MAAMQ,CAAAA,sBAAsB,CAAG,SAACR,KAAD,CAAuC,IAA/BS,CAAAA,mBAA+B,2DAAT,IAAS,CAC3E,KAAMhB,CAAAA,IAAI,CAAG,GAAIE,CAAAA,IAAJ,CAASK,KAAT,CAAb,CACA,GAAIC,CAAAA,UAAU,CAAG,CAAEC,KAAK,CAAE,OAAT,CAAkBC,GAAG,CAAE,SAAvB,CAAjB,CAEA,GAAIM,mBAAmB,EAAIjB,OAAO,CAACC,IAAD,CAAlC,CAA0C,CACxCQ,UAAU,CAAG,CAAES,IAAI,CAAE,SAAR,CAAmBC,MAAM,CAAE,SAA3B,CAAb,CACD,CAED,MAAO,IAAIN,CAAAA,IAAI,CAACC,cAAT,CAAwB,OAAxB,CAAiCL,UAAjC,EAA6CM,MAA7C,CAAoD,GAAIZ,CAAAA,IAAJ,CAASK,KAAT,CAApD,CAAP,CACD,CATM,CAWP;AACA,MAAO,MAAMY,CAAAA,iBAAiB,CAAGC,KAAK,GAAK,CACzC,GAAGA,KADsC,CAEzCC,MAAM,CAAE,CACN,GAAGD,KAAK,CAACC,MADH,CAENC,SAAS,CAAE,WAFL,CAEkB;AACxBC,OAAO,CAAE,SAHH,CAGc;AACpBC,SAAS,CAAE,SAJL,CAIgB;AACtBC,SAAS,CAAE,SALL,CAKgB;AACtBC,SAAS,CAAE,SAAU;AANf,CAFiC,CAAL,CAA/B","sourcesContent":["// ** Checks if an object is empty (returns boolean)\r\nexport const isObjEmpty = obj => Object.keys(obj).length === 0\r\n\r\n// ** Returns K format from a number\r\nexport const kFormatter = num => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\r\n\r\n// ** Converts HTML to string\r\nexport const htmlToString = html => html.replace(/<\\/?[^>]+(>|$)/g, '')\r\n\r\n// ** Checks if the passed date is today\r\nconst isToday = date => {\r\n  const today = new Date()\r\n  return (\r\n    /* eslint-disable operator-linebreak */\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n    /* eslint-enable */\r\n  )\r\n}\r\n\r\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\r\n  if (!value) return value\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n// ** Returns short month of passed date\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value)\r\n  let formatting = { month: 'short', day: 'numeric' }\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' }\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n// ** React Select Theme Colors\r\nexport const selectThemeColors = theme => ({\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary25: '#7367f01a', // for option hover bg-color\r\n    primary: '#7367f0', // for selected option bg-color\r\n    neutral10: '#7367f0', // for tags bg-color\r\n    neutral20: '#ededed', // for input border-color\r\n    neutral30: '#ededed' // for input hover border-color\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}