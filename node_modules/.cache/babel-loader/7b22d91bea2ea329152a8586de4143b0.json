{"ast":null,"code":"// ** Redux Imports\nimport{createSlice,createAsyncThunk}from'@reduxjs/toolkit';// ** Axios Imports\nimport axios from'axios';export const getMails=createAsyncThunk('appEmail/getMails',async params=>{const response=await axios.get('/apps/email/emails',{params});return{params,data:response.data};});export const updateMails=createAsyncThunk('appEmail/updateMails',async(_ref,_ref2)=>{let{emailIds,dataToUpdate}=_ref;let{dispatch,getState}=_ref2;const response=await axios.post('/apps/email/update-emails',{emailIds,dataToUpdate});await dispatch(getMails(getState().email.params));return{emailIds,dataToUpdate,data:response.data};});export const updateMailLabel=createAsyncThunk('appEmail/updateMailLabel',async(_ref3,_ref4)=>{let{emailIds,label}=_ref3;let{dispatch,getState}=_ref4;const response=await axios.post('/apps/email/update-emails-label',{emailIds,label});await dispatch(getMails(getState().email.params));return response.data;});export const paginateMail=createAsyncThunk('appEmail/paginateMail',async _ref5=>{let{dir,emailId}=_ref5;const response=await axios.get('/apps/email/paginate-email',{params:{dir,emailId}});return response.data;});export const selectCurrentMail=createAsyncThunk('appEmail/selectCurrentMail',async id=>{const response=await axios.get('/apps/email/get-email',{id});return response.data;});export const appEmailSlice=createSlice({name:'appEmail',initialState:{mails:[],params:{},emailsMeta:{},selectedMails:[],currentMail:null},reducers:{selectMail:(state,action)=>{const selectedMails=state.selectedMails;if(!selectedMails.includes(action.payload)){selectedMails.push(action.payload);}else{selectedMails.splice(selectedMails.indexOf(action.payload),1);}state.selectedMails=selectedMails;},selectAllMail:(state,action)=>{const selectAllMailsArr=[];if(action.payload){selectAllMailsArr.length=0;state.mails.forEach(mail=>selectAllMailsArr.push(mail.id));}else{selectAllMailsArr.length=0;}state.selectedMails=selectAllMailsArr;},resetSelectedMail:state=>{state.selectedMails=[];}},extraReducers:builder=>{builder.addCase(getMails.fulfilled,(state,action)=>{let currMail=null;if(state.currentMail!==null&&state.currentMail!==undefined){currMail=action.payload.data.emails.find(i=>i.id===state.currentMail.id);}state.currentMail=currMail;state.params=action.payload.params;state.mails=action.payload.data.emails;state.emailsMeta=action.payload.data.emailsMeta;}).addCase(updateMails.fulfilled,(state,action)=>{function updateMailData(email){Object.assign(email,action.payload.dataToUpdate);}state.mails.forEach(email=>{if(action.payload.emailIds.includes(email.id)){updateMailData(email);}});}).addCase(paginateMail.fulfilled,(state,action)=>{const data=action.payload;const dataIndex=state.mails.findIndex(i=>i.id===data.id);dataIndex===0?data.hasPreviousMail=false:data.hasPreviousMail=true;dataIndex===state.mails.length-1?data.hasNextMail=false:data.hasNextMail=true;state.currentMail=data;}).addCase(selectCurrentMail.fulfilled,(state,action)=>{state.currentMail=action.payload;});}});export const{selectMail,selectAllMail,resetSelectedMail}=appEmailSlice.actions;export default appEmailSlice.reducer;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/views/apps/tellfari/store/index.js"],"names":["createSlice","createAsyncThunk","axios","getMails","params","response","get","data","updateMails","emailIds","dataToUpdate","dispatch","getState","post","email","updateMailLabel","label","paginateMail","dir","emailId","selectCurrentMail","id","appEmailSlice","name","initialState","mails","emailsMeta","selectedMails","currentMail","reducers","selectMail","state","action","includes","payload","push","splice","indexOf","selectAllMail","selectAllMailsArr","length","forEach","mail","resetSelectedMail","extraReducers","builder","addCase","fulfilled","currMail","undefined","emails","find","i","updateMailData","Object","assign","dataIndex","findIndex","hasPreviousMail","hasNextMail","actions","reducer"],"mappings":"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","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\n\r\nexport const getMails = createAsyncThunk('appEmail/getMails', async params => {\r\n  const response = await axios.get('/apps/email/emails', { params })\r\n  return {\r\n    params,\r\n    data: response.data\r\n  }\r\n})\r\n\r\nexport const updateMails = createAsyncThunk(\r\n  'appEmail/updateMails',\r\n  async ({ emailIds, dataToUpdate }, { dispatch, getState }) => {\r\n    const response = await axios.post('/apps/email/update-emails', { emailIds, dataToUpdate })\r\n    await dispatch(getMails(getState().email.params))\r\n    return {\r\n      emailIds,\r\n      dataToUpdate,\r\n      data: response.data\r\n    }\r\n  }\r\n)\r\n\r\nexport const updateMailLabel = createAsyncThunk(\r\n  'appEmail/updateMailLabel',\r\n  async ({ emailIds, label }, { dispatch, getState }) => {\r\n    const response = await axios.post('/apps/email/update-emails-label', { emailIds, label })\r\n    await dispatch(getMails(getState().email.params))\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const paginateMail = createAsyncThunk('appEmail/paginateMail', async ({ dir, emailId }) => {\r\n  const response = await axios.get('/apps/email/paginate-email', { params: { dir, emailId } })\r\n  return response.data\r\n})\r\n\r\nexport const selectCurrentMail = createAsyncThunk('appEmail/selectCurrentMail', async id => {\r\n  const response = await axios.get('/apps/email/get-email', { id })\r\n  return response.data\r\n})\r\n\r\nexport const appEmailSlice = createSlice({\r\n  name: 'appEmail',\r\n  initialState: {\r\n    mails: [],\r\n    params: {},\r\n    emailsMeta: {},\r\n    selectedMails: [],\r\n    currentMail: null\r\n  },\r\n  reducers: {\r\n    selectMail: (state, action) => {\r\n      const selectedMails = state.selectedMails\r\n      if (!selectedMails.includes(action.payload)) {\r\n        selectedMails.push(action.payload)\r\n      } else {\r\n        selectedMails.splice(selectedMails.indexOf(action.payload), 1)\r\n      }\r\n      state.selectedMails = selectedMails\r\n    },\r\n    selectAllMail: (state, action) => {\r\n      const selectAllMailsArr = []\r\n      if (action.payload) {\r\n        selectAllMailsArr.length = 0\r\n        state.mails.forEach(mail => selectAllMailsArr.push(mail.id))\r\n      } else {\r\n        selectAllMailsArr.length = 0\r\n      }\r\n      state.selectedMails = selectAllMailsArr\r\n    },\r\n    resetSelectedMail: state => {\r\n      state.selectedMails = []\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getMails.fulfilled, (state, action) => {\r\n        let currMail = null\r\n        if (state.currentMail !== null && state.currentMail !== undefined) {\r\n          currMail = action.payload.data.emails.find(i => i.id === state.currentMail.id)\r\n        }\r\n        state.currentMail = currMail\r\n        state.params = action.payload.params\r\n        state.mails = action.payload.data.emails\r\n        state.emailsMeta = action.payload.data.emailsMeta\r\n      })\r\n      .addCase(updateMails.fulfilled, (state, action) => {\r\n        function updateMailData(email) {\r\n          Object.assign(email, action.payload.dataToUpdate)\r\n        }\r\n        state.mails.forEach(email => {\r\n          if (action.payload.emailIds.includes(email.id)) {\r\n            updateMailData(email)\r\n          }\r\n        })\r\n      })\r\n      .addCase(paginateMail.fulfilled, (state, action) => {\r\n        const data = action.payload\r\n        const dataIndex = state.mails.findIndex(i => i.id === data.id)\r\n        dataIndex === 0 ? (data.hasPreviousMail = false) : (data.hasPreviousMail = true)\r\n        dataIndex === state.mails.length - 1 ? (data.hasNextMail = false) : (data.hasNextMail = true)\r\n        state.currentMail = data\r\n      })\r\n      .addCase(selectCurrentMail.fulfilled, (state, action) => {\r\n        state.currentMail = action.payload\r\n      })\r\n  }\r\n})\r\n\r\nexport const { selectMail, selectAllMail, resetSelectedMail } = appEmailSlice.actions\r\n\r\nexport default appEmailSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}