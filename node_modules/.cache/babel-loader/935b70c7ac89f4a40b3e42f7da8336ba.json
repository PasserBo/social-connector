{"ast":null,"code":"// ** React Imports\nimport{Suspense,lazy,Fragment}from'react';// ** Utils\nimport{useLayout}from'@hooks/useLayout';import{useRouterTransition}from'@hooks/useRouterTransition';import{Session}from'../auth';// ** Custom Components\nimport LayoutWrapper from'@layouts/components/layout-wrapper';// ** Router Components\nimport{BrowserRouter as AppRouter,Route,Switch,Redirect}from'react-router-dom';// ** Routes & Default Routes\nimport{DefaultRoute,Routes}from'./routes';// ** Layouts\nimport BlankLayout from'@layouts/BlankLayout';import VerticalLayout from'@src/layouts/VerticalLayout';import HorizontalLayout from'@src/layouts/HorizontalLayout';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Router=()=>{// ** Hooks\nconst{layout,setLayout,setLastLayout}=useLayout();const{transition,setTransition}=useRouterTransition();// ** Default Layout\nconst DefaultLayout=layout==='horizontal'?'HorizontalLayout':'VerticalLayout';// ** All of the available layouts\nconst Layouts={BlankLayout,VerticalLayout,HorizontalLayout};// ** Current Active Item\nconst currentActiveItem=null;// ** Return Filtered Array of Routes & Paths\nconst LayoutRoutesAndPaths=layout=>{const LayoutRoutes=[];const LayoutPaths=[];if(Routes){Routes.filter(route=>{// ** Checks if Route layout or Default layout matches current layout\nif(route.layout===layout||route.layout===undefined&&DefaultLayout===layout){LayoutRoutes.push(route);LayoutPaths.push(route.path);}});}return{LayoutRoutes,LayoutPaths};};const NotAuthorized=/*#__PURE__*/lazy(()=>import('@src/views/pages/misc/NotAuthorized'));// ** Init Error Component\nconst Error=/*#__PURE__*/lazy(()=>import('@src/views/pages/misc/Error'));/**\r\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\r\n   */const FinalRoute=props=>{const route=props.route;if(!Session.isUserSignedIn()&&route.meta===undefined||!Session.isUserSignedIn()&&route.meta&&!route.meta.publicRoute){/**\r\n       ** If user is not Logged in & route meta is undefined\r\n       ** OR\r\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\r\n       ** Then redirect user to login\r\n       */return/*#__PURE__*/_jsx(Redirect,{to:\"/\"});}else if(route.meta&&Session.isUserSignedIn()){// ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\nreturn/*#__PURE__*/_jsx(Redirect,{to:\"/\"});}else{// ** If none of the above render component\nreturn/*#__PURE__*/_jsx(route.component,{...props});}};// ** Return Route to Render\nconst ResolveRoutes=()=>{return Object.keys(Layouts).map((layout,index)=>{// ** Convert Layout parameter to Layout Component\n// ? Note: make sure to keep layout and component name equal\nconst LayoutTag=Layouts[layout];// ** Get Routes and Paths of the Layout\nconst{LayoutRoutes,LayoutPaths}=LayoutRoutesAndPaths(layout);// ** We have freedom to display different layout for different route\n// ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n// ** that we want to implement like VerticalLayout or HorizontalLayout\n// ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n// ** RouterProps to pass them to Layouts\nconst routerProps={};return/*#__PURE__*/_jsx(Route,{path:LayoutPaths,children:/*#__PURE__*/_jsx(LayoutTag,{layout:layout,setLayout:setLayout,transition:transition,routerProps:routerProps,setLastLayout:setLastLayout,setTransition:setTransition,currentActiveItem:currentActiveItem,children:/*#__PURE__*/_jsx(Switch,{children:LayoutRoutes.map(route=>{return/*#__PURE__*/_jsx(Route,{path:route.path,exact:route.exact===true,render:props=>{// ** Assign props to routerProps\nObject.assign(routerProps,{...props,meta:route.meta});return/*#__PURE__*/_jsx(Fragment,{children:route.layout==='BlankLayout'?/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsx(FinalRoute,{route:route,...props})}):/*#__PURE__*/_jsx(LayoutWrapper,{layout:DefaultLayout,transition:transition,setTransition:setTransition/* Conditional props */ /*eslint-disable */,...(route.appLayout?{appLayout:route.appLayout}:{}),...(route.meta?{routeMeta:route.meta}:{}),...(route.className?{wrapperClass:route.className}:{}),children:/*#__PURE__*/_jsx(Suspense,{fallback:null,children:/*#__PURE__*/_jsx(FinalRoute,{route:route,...props})})})});}},route.path);})})})},index);});};return/*#__PURE__*/_jsx(AppRouter,{basename:process.env.REACT_APP_BASENAME,children:/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",render:()=>{return Session.isUserSignedIn()?/*#__PURE__*/_jsx(Redirect,{to:DefaultRoute}):/*#__PURE__*/_jsx(Redirect,{to:\"/\"});}}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/misc/not-authorized\",render:()=>/*#__PURE__*/_jsx(Layouts.BlankLayout,{children:/*#__PURE__*/_jsx(NotAuthorized,{})})}),ResolveRoutes(),/*#__PURE__*/_jsx(Route,{path:\"*\",component:Error})]})});};export default Router;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/bitfari-dev/www/src/router/Router.js"],"names":["Suspense","lazy","Fragment","useLayout","useRouterTransition","Session","LayoutWrapper","BrowserRouter","AppRouter","Route","Switch","Redirect","DefaultRoute","Routes","BlankLayout","VerticalLayout","HorizontalLayout","Router","layout","setLayout","setLastLayout","transition","setTransition","DefaultLayout","Layouts","currentActiveItem","LayoutRoutesAndPaths","LayoutRoutes","LayoutPaths","filter","route","undefined","push","path","NotAuthorized","Error","FinalRoute","props","isUserSignedIn","meta","publicRoute","ResolveRoutes","Object","keys","map","index","LayoutTag","routerProps","exact","assign","appLayout","routeMeta","className","wrapperClass","process","env","REACT_APP_BASENAME"],"mappings":"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","sourcesContent":["// ** React Imports\r\nimport { Suspense, lazy, Fragment } from 'react'\r\n\r\n// ** Utils\r\nimport { useLayout } from '@hooks/useLayout'\r\nimport { useRouterTransition } from '@hooks/useRouterTransition'\r\n\r\nimport { Session } from '../auth'\r\n\r\n// ** Custom Components\r\nimport LayoutWrapper from '@layouts/components/layout-wrapper'\r\n\r\n// ** Router Components\r\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from 'react-router-dom'\r\n\r\n// ** Routes & Default Routes\r\nimport { DefaultRoute, Routes } from './routes'\r\n\r\n// ** Layouts\r\nimport BlankLayout from '@layouts/BlankLayout'\r\nimport VerticalLayout from '@src/layouts/VerticalLayout'\r\nimport HorizontalLayout from '@src/layouts/HorizontalLayout'\r\n\r\nconst Router = () => {\r\n  // ** Hooks\r\n  const { layout, setLayout, setLastLayout } = useLayout()\r\n  const { transition, setTransition } = useRouterTransition()\r\n\r\n  // ** Default Layout\r\n  const DefaultLayout = layout === 'horizontal' ? 'HorizontalLayout' : 'VerticalLayout'\r\n\r\n  // ** All of the available layouts\r\n  const Layouts = { BlankLayout, VerticalLayout, HorizontalLayout }\r\n\r\n  // ** Current Active Item\r\n  const currentActiveItem = null\r\n\r\n  // ** Return Filtered Array of Routes & Paths\r\n  const LayoutRoutesAndPaths = layout => {\r\n    const LayoutRoutes = []\r\n    const LayoutPaths = []\r\n\r\n    if (Routes) {\r\n      Routes.filter(route => {\r\n        // ** Checks if Route layout or Default layout matches current layout\r\n        if (route.layout === layout || (route.layout === undefined && DefaultLayout === layout)) {\r\n          LayoutRoutes.push(route)\r\n          LayoutPaths.push(route.path)\r\n        }\r\n      })\r\n    }\r\n\r\n    return { LayoutRoutes, LayoutPaths }\r\n  }\r\n\r\n  const NotAuthorized = lazy(() => import('@src/views/pages/misc/NotAuthorized'))\r\n\r\n  // ** Init Error Component\r\n  const Error = lazy(() => import('@src/views/pages/misc/Error'))\r\n\r\n  /**\r\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\r\n   */\r\n  const FinalRoute = props => {\r\n    const route = props.route\r\n\r\n    if ( \r\n      (!Session.isUserSignedIn() && route.meta === undefined) ||\r\n      (!Session.isUserSignedIn() && route.meta && !route.meta.publicRoute)\r\n    ) {\r\n      /**\r\n       ** If user is not Logged in & route meta is undefined\r\n       ** OR\r\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\r\n       ** Then redirect user to login\r\n       */\r\n\r\n      return <Redirect to='/' />\r\n    } else if (route.meta && Session.isUserSignedIn()) {\r\n      // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\r\n      return <Redirect to='/' />\r\n    } else {\r\n      // ** If none of the above render component\r\n      return <route.component {...props} />\r\n    }\r\n  }\r\n\r\n  // ** Return Route to Render\r\n  const ResolveRoutes = () => {\r\n    return Object.keys(Layouts).map((layout, index) => {\r\n      // ** Convert Layout parameter to Layout Component\r\n      // ? Note: make sure to keep layout and component name equal\r\n\r\n      const LayoutTag = Layouts[layout]\r\n\r\n      // ** Get Routes and Paths of the Layout\r\n      const { LayoutRoutes, LayoutPaths } = LayoutRoutesAndPaths(layout)\r\n\r\n      // ** We have freedom to display different layout for different route\r\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\r\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\r\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\r\n\r\n      // ** RouterProps to pass them to Layouts\r\n      const routerProps = {}\r\n\r\n      return (\r\n        <Route path={LayoutPaths} key={index}>\r\n          <LayoutTag\r\n            layout={layout}\r\n            setLayout={setLayout}\r\n            transition={transition}\r\n            routerProps={routerProps}\r\n            setLastLayout={setLastLayout}\r\n            setTransition={setTransition}\r\n            currentActiveItem={currentActiveItem}\r\n          >\r\n            <Switch>\r\n              {LayoutRoutes.map(route => {\r\n                return (\r\n                  <Route\r\n                    key={route.path}\r\n                    path={route.path}\r\n                    exact={route.exact === true}\r\n                    render={props => {\r\n                      // ** Assign props to routerProps\r\n                      Object.assign(routerProps, {\r\n                        ...props,\r\n                        meta: route.meta\r\n                      })\r\n\r\n                      return (\r\n                        <Fragment>\r\n                          {/* Layout Wrapper to add classes based on route's layout, appLayout and className */}\r\n\r\n                          {route.layout === 'BlankLayout' ? (\r\n                            <Fragment>\r\n                              <FinalRoute route={route} {...props} />\r\n                            </Fragment>\r\n                          ) : (\r\n                            <LayoutWrapper\r\n                              layout={DefaultLayout}\r\n                              transition={transition}\r\n                              setTransition={setTransition}\r\n                              /* Conditional props */\r\n                              /*eslint-disable */\r\n                              {...(route.appLayout\r\n                                ? {\r\n                                    appLayout: route.appLayout\r\n                                  }\r\n                                : {})}\r\n                              {...(route.meta\r\n                                ? {\r\n                                    routeMeta: route.meta\r\n                                  }\r\n                                : {})}\r\n                              {...(route.className\r\n                                ? {\r\n                                    wrapperClass: route.className\r\n                                  }\r\n                                : {})}\r\n                              /*eslint-enable */\r\n                            >\r\n                              <Suspense fallback={null}>\r\n                                <FinalRoute route={route} {...props} />\r\n                              </Suspense>\r\n                            </LayoutWrapper>\r\n                          )}\r\n                        </Fragment>\r\n                      )\r\n                    }}\r\n                  />\r\n                )\r\n              })}\r\n            </Switch>\r\n          </LayoutTag>\r\n        </Route>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppRouter basename={process.env.REACT_APP_BASENAME}>\r\n      <Switch>\r\n        {/* If user is logged in Redirect user to DefaultRoute else to login */}\r\n        <Route\r\n          exact\r\n          path='/'\r\n          render={() => {\r\n            return Session.isUserSignedIn() ? <Redirect to={DefaultRoute} /> : <Redirect to='/' />\r\n          }}\r\n        />\r\n        {/* Not Auth Route */}\r\n        <Route\r\n          exact\r\n          path='/misc/not-authorized'\r\n          render={() => (\r\n            <Layouts.BlankLayout>\r\n              <NotAuthorized />\r\n            </Layouts.BlankLayout>\r\n          )}\r\n        />\r\n        {ResolveRoutes()}\r\n\r\n        {/* NotFound Error page */}\r\n        <Route path='*' component={Error} />\r\n      </Switch>\r\n    </AppRouter>\r\n  )\r\n}\r\n\r\nexport default Router\r\n"]},"metadata":{},"sourceType":"module"}