{"ast":null,"code":"import { useRef, useState, useEffect, useCallback } from 'react';\nimport { warn, runIfFn } from '../utils/index.esm.js';\n\nfunction useControllableProp(propValue, stateValue) {\n  var _React$useRef = useRef(propValue !== undefined),\n      isControlled = _React$useRef.current;\n\n  var value = isControlled && typeof propValue !== 'undefined' ? propValue : stateValue;\n  return [isControlled, value];\n}\n\nvar defaultPropsMap = {\n  value: 'value',\n  defaultValue: 'defaultValue',\n  onChange: 'onChange'\n};\n\nfunction useControllableState(props) {\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      _props$shouldUpdate = props.shouldUpdate,\n      shouldUpdate = _props$shouldUpdate === void 0 ? function () {\n    return true;\n  } : _props$shouldUpdate,\n      _props$name = props.name,\n      name = _props$name === void 0 ? 'Component' : _props$name,\n      _props$propsMap = props.propsMap,\n      propsMap = _props$propsMap === void 0 ? defaultPropsMap : _props$propsMap;\n\n  var _React$useState = useState(defaultValue),\n      valueState = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var _React$useRef2 = useRef(valueProp !== undefined),\n      isControlled = _React$useRef2.current;\n\n  useEffect(function () {\n    var nextIsControlled = valueProp !== undefined;\n    var nextMode = nextIsControlled ? 'a controlled' : 'an uncontrolled';\n    var mode = isControlled ? 'a controlled' : 'an uncontrolled';\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message: \"Warning: \" + name + \" is changing from \" + mode + \" to \" + nextMode + \" component. \" + 'Components should not switch from controlled to uncontrolled (or vice versa). ' + (\"Use the '\" + propsMap['value'] + \"' with an '\" + propsMap['onChange'] + \"' handler. \") + (\"If you want an uncontrolled component, remove the \" + propsMap['value'] + \" prop and use '\" + propsMap['defaultValue'] + \"' instead. \\\"\") + 'More info: https://fb.me/react-controlled-components'\n    });\n  }, [valueProp, isControlled, name]);\n\n  var _React$useRef3 = useRef(defaultValue),\n      _defaultValue = _React$useRef3.current;\n\n  useEffect(function () {\n    warn({\n      condition: _defaultValue !== defaultValue,\n      message: \"Warning: A component is changing the default value of an uncontrolled \" + name + \" after being initialized. \" + (\"To suppress this warning opt to use a controlled \" + name + \".\")\n    });\n  }, [JSON.stringify(defaultValue)]);\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = useCallback(function (next) {\n    var nextValue = runIfFn(next, value);\n    var shouldUpdateState = shouldUpdate(value, nextValue);\n    if (!shouldUpdateState) return;\n\n    if (!isControlled) {\n      setValue(next);\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);\n  }, [onChange, shouldUpdate, isControlled, value]);\n  return [value, updateValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"sources":["../../src/hooks/use-controllable.ts"],"names":["useControllableProp","propValue","stateValue","current","isControlled","React","value","defaultPropsMap","defaultValue","onChange","useControllableState","props","valueProp","shouldUpdate","name","propsMap","valueState","setValue","nextIsControlled","nextMode","mode","warn","condition","message","_defaultValue","JSON","updateValue","nextValue","runIfFn","shouldUpdateState"],"mappings":"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","sourcesContent":["import { runIfFn, warn } from '../utils';\nimport * as React from 'react';\n\nexport function useControllableProp<T>(propValue: T | undefined, stateValue: T) {\n  const { current: isControlled } = React.useRef(propValue !== undefined);\n  const value = isControlled && typeof propValue !== 'undefined' ? propValue : stateValue;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (nextValue: T) => void;\n  /**\n   * The condition to update the state\n   */\n  shouldUpdate?: (prevState: T, state: T) => boolean;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n  /**\n   * A mapping for the props to give more contextual warning messages.\n   *\n   * In some components `value` might be called `index`, and defaultValue\n   * might be called `defaultIndex`, so this map helps us generate\n   * contextual warning messages\n   */\n  propsMap?: {\n    value?: string;\n    defaultValue?: string;\n    onChange?: string;\n  };\n}\n\nconst defaultPropsMap = {\n  value: 'value',\n  defaultValue: 'defaultValue',\n  onChange: 'onChange',\n};\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = () => true,\n    name = 'Component',\n    propsMap = defaultPropsMap,\n  } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const { current: isControlled } = React.useRef(valueProp !== undefined);\n\n  // don't switch from controlled to uncontrolled\n  React.useEffect(() => {\n    const nextIsControlled = valueProp !== undefined;\n\n    const nextMode = nextIsControlled ? 'a controlled' : 'an uncontrolled';\n    const mode = isControlled ? 'a controlled' : 'an uncontrolled';\n\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message:\n        `Warning: ${name} is changing from ${mode} to ${nextMode} component. ` +\n        'Components should not switch from controlled to uncontrolled (or vice versa). ' +\n        `Use the '${propsMap['value']}' with an '${propsMap['onChange']}' handler. ` +\n        `If you want an uncontrolled component, remove the ${propsMap['value']} prop and use '${propsMap['defaultValue']}' instead. \"` +\n        'More info: https://fb.me/react-controlled-components',\n    });\n  }, [valueProp, isControlled, name]);\n\n  const { current: _defaultValue } = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    warn({\n      condition: _defaultValue !== defaultValue,\n      message:\n        `Warning: A component is changing the default value of an uncontrolled ${name} after being initialized. ` +\n        `To suppress this warning opt to use a controlled ${name}.`,\n    });\n  }, [JSON.stringify(defaultValue)]);\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value);\n      const shouldUpdateState = shouldUpdate(value, nextValue);\n\n      if (!shouldUpdateState) return;\n\n      if (!isControlled) {\n        setValue(next);\n      }\n\n      onChange?.(nextValue);\n    },\n    [onChange, shouldUpdate, isControlled, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"module"}