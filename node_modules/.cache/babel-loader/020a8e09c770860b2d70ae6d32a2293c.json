{"ast":null,"code":"// ** Redux Imports\nimport{createSlice}from'@reduxjs/toolkit';// ** UseJWT import to get config\nimport useJwt from'@src/auth/jwt/useJwt';const config=useJwt.jwtConfig;const initialUser=()=>{const item=window.localStorage.getItem('userData');//** Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):{};};export const authSlice=createSlice({name:'authentication',initialState:{userData:initialUser()},reducers:{handleLogin:(state,action)=>{state.userData=action.payload;state[config.storageTokenKeyName]=action.payload[config.storageTokenKeyName];state[config.storageRefreshTokenKeyName]=action.payload[config.storageRefreshTokenKeyName];localStorage.setItem('userData',JSON.stringify(action.payload));localStorage.setItem(config.storageTokenKeyName,JSON.stringify(action.payload.accessToken));localStorage.setItem(config.storageRefreshTokenKeyName,JSON.stringify(action.payload.refreshToken));},handleLogout:state=>{state.userData={};state[config.storageTokenKeyName]=null;state[config.storageRefreshTokenKeyName]=null;// ** Remove user, accessToken & refreshToken from localStorage\nlocalStorage.removeItem('userData');localStorage.removeItem(config.storageTokenKeyName);localStorage.removeItem(config.storageRefreshTokenKeyName);}}});export const{handleLogin,handleLogout}=authSlice.actions;export default authSlice.reducer;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/bitfari-dev/www/src/redux/authentication.js"],"names":["createSlice","useJwt","config","jwtConfig","initialUser","item","window","localStorage","getItem","JSON","parse","authSlice","name","initialState","userData","reducers","handleLogin","state","action","payload","storageTokenKeyName","storageRefreshTokenKeyName","setItem","stringify","accessToken","refreshToken","handleLogout","removeItem","actions","reducer"],"mappings":"AAAA;AACA,OAASA,WAAT,KAA4B,kBAA5B,CAEA;AACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CAEA,KAAMC,CAAAA,MAAM,CAAGD,MAAM,CAACE,SAAtB,CAEA,KAAMC,CAAAA,WAAW,CAAG,IAAM,CACxB,KAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAb,CACA;AACA,MAAOH,CAAAA,IAAI,CAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,CAAsB,EAAjC,CACD,CAJD,CAMA,MAAO,MAAMM,CAAAA,SAAS,CAAGX,WAAW,CAAC,CACnCY,IAAI,CAAE,gBAD6B,CAEnCC,YAAY,CAAE,CACZC,QAAQ,CAAEV,WAAW,EADT,CAFqB,CAKnCW,QAAQ,CAAE,CACRC,WAAW,CAAE,CAACC,KAAD,CAAQC,MAAR,GAAmB,CAC9BD,KAAK,CAACH,QAAN,CAAiBI,MAAM,CAACC,OAAxB,CACAF,KAAK,CAACf,MAAM,CAACkB,mBAAR,CAAL,CAAoCF,MAAM,CAACC,OAAP,CAAejB,MAAM,CAACkB,mBAAtB,CAApC,CACAH,KAAK,CAACf,MAAM,CAACmB,0BAAR,CAAL,CAA2CH,MAAM,CAACC,OAAP,CAAejB,MAAM,CAACmB,0BAAtB,CAA3C,CACAd,YAAY,CAACe,OAAb,CAAqB,UAArB,CAAiCb,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAtB,CAAjC,EACAZ,YAAY,CAACe,OAAb,CAAqBpB,MAAM,CAACkB,mBAA5B,CAAiDX,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAP,CAAeK,WAA9B,CAAjD,EACAjB,YAAY,CAACe,OAAb,CAAqBpB,MAAM,CAACmB,0BAA5B,CAAwDZ,IAAI,CAACc,SAAL,CAAeL,MAAM,CAACC,OAAP,CAAeM,YAA9B,CAAxD,EACD,CARO,CASRC,YAAY,CAAET,KAAK,EAAI,CACrBA,KAAK,CAACH,QAAN,CAAiB,EAAjB,CACAG,KAAK,CAACf,MAAM,CAACkB,mBAAR,CAAL,CAAoC,IAApC,CACAH,KAAK,CAACf,MAAM,CAACmB,0BAAR,CAAL,CAA2C,IAA3C,CACA;AACAd,YAAY,CAACoB,UAAb,CAAwB,UAAxB,EACApB,YAAY,CAACoB,UAAb,CAAwBzB,MAAM,CAACkB,mBAA/B,EACAb,YAAY,CAACoB,UAAb,CAAwBzB,MAAM,CAACmB,0BAA/B,EACD,CAjBO,CALyB,CAAD,CAA7B,CA0BP,MAAO,MAAM,CAAEL,WAAF,CAAeU,YAAf,EAAgCf,SAAS,CAACiB,OAAhD,CAEP,cAAejB,CAAAA,SAAS,CAACkB,OAAzB","sourcesContent":["// ** Redux Imports\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\n// ** UseJWT import to get config\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\nconst config = useJwt.jwtConfig\r\n\r\nconst initialUser = () => {\r\n  const item = window.localStorage.getItem('userData')\r\n  //** Parse stored json or if none return initialValue\r\n  return item ? JSON.parse(item) : {}\r\n}\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'authentication',\r\n  initialState: {\r\n    userData: initialUser()\r\n  },\r\n  reducers: {\r\n    handleLogin: (state, action) => {\r\n      state.userData = action.payload\r\n      state[config.storageTokenKeyName] = action.payload[config.storageTokenKeyName]\r\n      state[config.storageRefreshTokenKeyName] = action.payload[config.storageRefreshTokenKeyName]\r\n      localStorage.setItem('userData', JSON.stringify(action.payload))\r\n      localStorage.setItem(config.storageTokenKeyName, JSON.stringify(action.payload.accessToken))\r\n      localStorage.setItem(config.storageRefreshTokenKeyName, JSON.stringify(action.payload.refreshToken))\r\n    },\r\n    handleLogout: state => {\r\n      state.userData = {}\r\n      state[config.storageTokenKeyName] = null\r\n      state[config.storageRefreshTokenKeyName] = null\r\n      // ** Remove user, accessToken & refreshToken from localStorage\r\n      localStorage.removeItem('userData')\r\n      localStorage.removeItem(config.storageTokenKeyName)\r\n      localStorage.removeItem(config.storageRefreshTokenKeyName)\r\n    }\r\n  }\r\n})\r\n\r\nexport const { handleLogin, handleLogout } = authSlice.actions\r\n\r\nexport default authSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}