{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _toConsumableArray = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar bip174_1 = require('bip174');\n\nvar varuint = require('bip174/src/lib/converter/varint');\n\nvar utils_1 = require('bip174/src/lib/utils');\n\nvar address_1 = require('./address');\n\nvar bufferutils_1 = require('./bufferutils');\n\nvar crypto_1 = require('./crypto');\n\nvar ecpair_1 = require('./ecpair');\n\nvar networks_1 = require('./networks');\n\nvar payments = require('./payments');\n\nvar bscript = require('./script');\n\nvar transaction_1 = require('./transaction');\n/**\n * These are the default arguments for a Psbt instance.\n */\n\n\nvar DEFAULT_OPTS = {\n  /**\n   * A bitcoinjs Network object. This is only used if you pass an `address`\n   * parameter to addOutput. Otherwise it is not needed and can be left default.\n   */\n  network: networks_1.bitcoin,\n\n  /**\n   * When extractTransaction is called, the fee rate is checked.\n   * THIS IS NOT TO BE RELIED ON.\n   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.\n   */\n  maximumFeeRate: 5000\n};\n/**\n * Psbt class can parse and generate a PSBT binary based off of the BIP174.\n * There are 6 roles that this class fulfills. (Explained in BIP174)\n *\n * Creator: This can be done with `new Psbt()`\n * Updater: This can be done with `psbt.addInput(input)`, `psbt.addInputs(inputs)`,\n *   `psbt.addOutput(output)`, `psbt.addOutputs(outputs)` when you are looking to\n *   add new inputs and outputs to the PSBT, and `psbt.updateGlobal(itemObject)`,\n *   `psbt.updateInput(itemObject)`, `psbt.updateOutput(itemObject)`\n *   addInput requires hash: Buffer | string; and index: number; as attributes\n *   and can also include any attributes that are used in updateInput method.\n *   addOutput requires script: Buffer; and value: number; and likewise can include\n *   data for updateOutput.\n *   For a list of what attributes should be what types. Check the bip174 library.\n *   Also, check the integration tests for some examples of usage.\n * Signer: There are a few methods. signAllInputs and signAllInputsAsync, which will search all input\n *   information for your pubkey or pubkeyhash, and only sign inputs where it finds\n *   your info. Or you can explicitly sign a specific input with signInput and\n *   signInputAsync. For the async methods you can create a SignerAsync object\n *   and use something like a hardware wallet to sign with. (You must implement this)\n * Combiner: psbts can be combined easily with `psbt.combine(psbt2, psbt3, psbt4 ...)`\n *   the psbt calling combine will always have precedence when a conflict occurs.\n *   Combine checks if the internal bitcoin transaction is the same, so be sure that\n *   all sequences, version, locktime, etc. are the same before combining.\n * Input Finalizer: This role is fairly important. Not only does it need to construct\n *   the input scriptSigs and witnesses, but it SHOULD verify the signatures etc.\n *   Before running `psbt.finalizeAllInputs()` please run `psbt.validateSignaturesOfAllInputs()`\n *   Running any finalize method will delete any data in the input(s) that are no longer\n *   needed due to the finalized scripts containing the information.\n * Transaction Extractor: This role will perform some checks before returning a\n *   Transaction object. Such as fee rate not being larger than maximumFeeRate etc.\n */\n\nvar Psbt = /*#__PURE__*/function () {\n  function Psbt() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new bip174_1.Psbt(new PsbtTransaction());\n\n    _classCallCheck(this, Psbt);\n\n    this.data = data; // set defaults\n\n    this.opts = Object.assign({}, DEFAULT_OPTS, opts);\n    this.__CACHE = {\n      __NON_WITNESS_UTXO_TX_CACHE: [],\n      __NON_WITNESS_UTXO_BUF_CACHE: [],\n      __TX_IN_CACHE: {},\n      __TX: this.data.globalMap.unsignedTx.tx,\n      // Old TransactionBuilder behavior was to not confirm input values\n      // before signing. Even though we highly encourage people to get\n      // the full parent transaction to verify values, the ability to\n      // sign non-segwit inputs without the full transaction was often\n      // requested. So the only way to activate is to use @ts-ignore.\n      // We will disable exporting the Psbt when unsafe sign is active.\n      // because it is not BIP174 compliant.\n      __UNSAFE_SIGN_NONSEGWIT: false\n    };\n    if (this.data.inputs.length === 0) this.setVersion(2); // Make data hidden when enumerating\n\n    var dpew = function dpew(obj, attr, enumerable, writable) {\n      return Object.defineProperty(obj, attr, {\n        enumerable: enumerable,\n        writable: writable\n      });\n    };\n\n    dpew(this, '__CACHE', false, true);\n    dpew(this, 'opts', false, true);\n  }\n\n  _createClass(Psbt, [{\n    key: \"inputCount\",\n    get: function get() {\n      return this.data.inputs.length;\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.__CACHE.__TX.version;\n    },\n    set: function set(version) {\n      this.setVersion(version);\n    }\n  }, {\n    key: \"locktime\",\n    get: function get() {\n      return this.__CACHE.__TX.locktime;\n    },\n    set: function set(locktime) {\n      this.setLocktime(locktime);\n    }\n  }, {\n    key: \"txInputs\",\n    get: function get() {\n      return this.__CACHE.__TX.ins.map(function (input) {\n        return {\n          hash: bufferutils_1.cloneBuffer(input.hash),\n          index: input.index,\n          sequence: input.sequence\n        };\n      });\n    }\n  }, {\n    key: \"txOutputs\",\n    get: function get() {\n      var _this = this;\n\n      return this.__CACHE.__TX.outs.map(function (output) {\n        var address;\n\n        try {\n          address = address_1.fromOutputScript(output.script, _this.opts.network);\n        } catch (_) {}\n\n        return {\n          script: bufferutils_1.cloneBuffer(output.script),\n          value: output.value,\n          address: address\n        };\n      });\n    }\n  }, {\n    key: \"combine\",\n    value: function combine() {\n      var _this$data;\n\n      for (var _len = arguments.length, those = new Array(_len), _key = 0; _key < _len; _key++) {\n        those[_key] = arguments[_key];\n      }\n\n      (_this$data = this.data).combine.apply(_this$data, _toConsumableArray(those.map(function (o) {\n        return o.data;\n      })));\n\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      // TODO: more efficient cloning\n      var res = Psbt.fromBuffer(this.data.toBuffer());\n      res.opts = JSON.parse(JSON.stringify(this.opts));\n      return res;\n    }\n  }, {\n    key: \"setMaximumFeeRate\",\n    value: function setMaximumFeeRate(satoshiPerByte) {\n      check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw\n\n      this.opts.maximumFeeRate = satoshiPerByte;\n    }\n  }, {\n    key: \"setVersion\",\n    value: function setVersion(version) {\n      check32Bit(version);\n      checkInputsForPartialSig(this.data.inputs, 'setVersion');\n      var c = this.__CACHE;\n      c.__TX.version = version;\n      c.__EXTRACTED_TX = undefined;\n      return this;\n    }\n  }, {\n    key: \"setLocktime\",\n    value: function setLocktime(locktime) {\n      check32Bit(locktime);\n      checkInputsForPartialSig(this.data.inputs, 'setLocktime');\n      var c = this.__CACHE;\n      c.__TX.locktime = locktime;\n      c.__EXTRACTED_TX = undefined;\n      return this;\n    }\n  }, {\n    key: \"setInputSequence\",\n    value: function setInputSequence(inputIndex, sequence) {\n      check32Bit(sequence);\n      checkInputsForPartialSig(this.data.inputs, 'setInputSequence');\n      var c = this.__CACHE;\n\n      if (c.__TX.ins.length <= inputIndex) {\n        throw new Error('Input index too high');\n      }\n\n      c.__TX.ins[inputIndex].sequence = sequence;\n      c.__EXTRACTED_TX = undefined;\n      return this;\n    }\n  }, {\n    key: \"addInputs\",\n    value: function addInputs(inputDatas) {\n      var _this2 = this;\n\n      inputDatas.forEach(function (inputData) {\n        return _this2.addInput(inputData);\n      });\n      return this;\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(inputData) {\n      if (arguments.length > 1 || !inputData || inputData.hash === undefined || inputData.index === undefined) {\n        throw new Error(\"Invalid arguments for Psbt.addInput. \" + \"Requires single object with at least [hash] and [index]\");\n      }\n\n      checkInputsForPartialSig(this.data.inputs, 'addInput');\n      if (inputData.witnessScript) checkInvalidP2WSH(inputData.witnessScript);\n      var c = this.__CACHE;\n      this.data.addInput(inputData);\n      var txIn = c.__TX.ins[c.__TX.ins.length - 1];\n      checkTxInputCache(c, txIn);\n      var inputIndex = this.data.inputs.length - 1;\n      var input = this.data.inputs[inputIndex];\n\n      if (input.nonWitnessUtxo) {\n        addNonWitnessTxCache(this.__CACHE, input, inputIndex);\n      }\n\n      c.__FEE = undefined;\n      c.__FEE_RATE = undefined;\n      c.__EXTRACTED_TX = undefined;\n      return this;\n    }\n  }, {\n    key: \"addOutputs\",\n    value: function addOutputs(outputDatas) {\n      var _this3 = this;\n\n      outputDatas.forEach(function (outputData) {\n        return _this3.addOutput(outputData);\n      });\n      return this;\n    }\n  }, {\n    key: \"addOutput\",\n    value: function addOutput(outputData) {\n      if (arguments.length > 1 || !outputData || outputData.value === undefined || outputData.address === undefined && outputData.script === undefined) {\n        throw new Error(\"Invalid arguments for Psbt.addOutput. \" + \"Requires single object with at least [script or address] and [value]\");\n      }\n\n      checkInputsForPartialSig(this.data.inputs, 'addOutput');\n      var _outputData = outputData,\n          address = _outputData.address;\n\n      if (typeof address === 'string') {\n        var network = this.opts.network;\n        var script = address_1.toOutputScript(address, network);\n        outputData = Object.assign(outputData, {\n          script: script\n        });\n      }\n\n      var c = this.__CACHE;\n      this.data.addOutput(outputData);\n      c.__FEE = undefined;\n      c.__FEE_RATE = undefined;\n      c.__EXTRACTED_TX = undefined;\n      return this;\n    }\n  }, {\n    key: \"extractTransaction\",\n    value: function extractTransaction(disableFeeCheck) {\n      if (!this.data.inputs.every(isFinalized)) throw new Error('Not finalized');\n      var c = this.__CACHE;\n\n      if (!disableFeeCheck) {\n        checkFees(this, c, this.opts);\n      }\n\n      if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;\n\n      var tx = c.__TX.clone();\n\n      inputFinalizeGetAmts(this.data.inputs, tx, c, true);\n      return tx;\n    }\n  }, {\n    key: \"getFeeRate\",\n    value: function getFeeRate() {\n      return getTxCacheValue('__FEE_RATE', 'fee rate', this.data.inputs, this.__CACHE);\n    }\n  }, {\n    key: \"getFee\",\n    value: function getFee() {\n      return getTxCacheValue('__FEE', 'fee', this.data.inputs, this.__CACHE);\n    }\n  }, {\n    key: \"finalizeAllInputs\",\n    value: function finalizeAllInputs() {\n      var _this4 = this;\n\n      utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one\n\n      range(this.data.inputs.length).forEach(function (idx) {\n        return _this4.finalizeInput(idx);\n      });\n      return this;\n    }\n  }, {\n    key: \"finalizeInput\",\n    value: function finalizeInput(inputIndex) {\n      var finalScriptsFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getFinalScripts;\n      var input = utils_1.checkForInput(this.data.inputs, inputIndex);\n\n      var _getScriptFromInput = getScriptFromInput(inputIndex, input, this.__CACHE),\n          script = _getScriptFromInput.script,\n          isP2SH = _getScriptFromInput.isP2SH,\n          isP2WSH = _getScriptFromInput.isP2WSH,\n          isSegwit = _getScriptFromInput.isSegwit;\n\n      if (!script) throw new Error(\"No script found for input #\".concat(inputIndex));\n      checkPartialSigSighashes(input);\n\n      var _finalScriptsFunc = finalScriptsFunc(inputIndex, input, script, isSegwit, isP2SH, isP2WSH),\n          finalScriptSig = _finalScriptsFunc.finalScriptSig,\n          finalScriptWitness = _finalScriptsFunc.finalScriptWitness;\n\n      if (finalScriptSig) this.data.updateInput(inputIndex, {\n        finalScriptSig: finalScriptSig\n      });\n      if (finalScriptWitness) this.data.updateInput(inputIndex, {\n        finalScriptWitness: finalScriptWitness\n      });\n      if (!finalScriptSig && !finalScriptWitness) throw new Error(\"Unknown error finalizing input #\".concat(inputIndex));\n      this.data.clearFinalizedInput(inputIndex);\n      return this;\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType(inputIndex) {\n      var input = utils_1.checkForInput(this.data.inputs, inputIndex);\n      var script = getScriptFromUtxo(inputIndex, input, this.__CACHE);\n      var result = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig), input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness));\n      var type = result.type === 'raw' ? '' : result.type + '-';\n      var mainType = classifyScript(result.meaningfulScript);\n      return type + mainType;\n    }\n  }, {\n    key: \"inputHasPubkey\",\n    value: function inputHasPubkey(inputIndex, pubkey) {\n      var input = utils_1.checkForInput(this.data.inputs, inputIndex);\n      return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);\n    }\n  }, {\n    key: \"inputHasHDKey\",\n    value: function inputHasHDKey(inputIndex, root) {\n      var input = utils_1.checkForInput(this.data.inputs, inputIndex);\n      var derivationIsMine = bip32DerivationIsMine(root);\n      return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);\n    }\n  }, {\n    key: \"outputHasPubkey\",\n    value: function outputHasPubkey(outputIndex, pubkey) {\n      var output = utils_1.checkForOutput(this.data.outputs, outputIndex);\n      return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);\n    }\n  }, {\n    key: \"outputHasHDKey\",\n    value: function outputHasHDKey(outputIndex, root) {\n      var output = utils_1.checkForOutput(this.data.outputs, outputIndex);\n      var derivationIsMine = bip32DerivationIsMine(root);\n      return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);\n    }\n  }, {\n    key: \"validateSignaturesOfAllInputs\",\n    value: function validateSignaturesOfAllInputs() {\n      var _this5 = this;\n\n      utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one\n\n      var results = range(this.data.inputs.length).map(function (idx) {\n        return _this5.validateSignaturesOfInput(idx);\n      });\n      return results.reduce(function (final, res) {\n        return res === true && final;\n      }, true);\n    }\n  }, {\n    key: \"validateSignaturesOfInput\",\n    value: function validateSignaturesOfInput(inputIndex, pubkey) {\n      var input = this.data.inputs[inputIndex];\n      var partialSig = (input || {}).partialSig;\n      if (!input || !partialSig || partialSig.length < 1) throw new Error('No signatures to validate');\n      var mySigs = pubkey ? partialSig.filter(function (sig) {\n        return sig.pubkey.equals(pubkey);\n      }) : partialSig;\n      if (mySigs.length < 1) throw new Error('No signatures for this pubkey');\n      var results = [];\n      var hashCache;\n      var scriptCache;\n      var sighashCache;\n\n      var _iterator = _createForOfIteratorHelper(mySigs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pSig = _step.value;\n          var sig = bscript.signature.decode(pSig.signature);\n\n          var _ref = sighashCache !== sig.hashType ? getHashForSig(inputIndex, Object.assign({}, input, {\n            sighashType: sig.hashType\n          }), this.__CACHE, true) : {\n            hash: hashCache,\n            script: scriptCache\n          },\n              hash = _ref.hash,\n              script = _ref.script;\n\n          sighashCache = sig.hashType;\n          hashCache = hash;\n          scriptCache = script;\n          checkScriptForPubkey(pSig.pubkey, script, 'verify');\n          var keypair = ecpair_1.fromPublicKey(pSig.pubkey);\n          results.push(keypair.verify(hash, sig.signature));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return results.every(function (res) {\n        return res === true;\n      });\n    }\n  }, {\n    key: \"signAllInputsHD\",\n    value: function signAllInputsHD(hdKeyPair) {\n      var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [transaction_1.Transaction.SIGHASH_ALL];\n\n      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n        throw new Error('Need HDSigner to sign input');\n      }\n\n      var results = [];\n\n      var _iterator2 = _createForOfIteratorHelper(range(this.data.inputs.length)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var i = _step2.value;\n\n          try {\n            this.signInputHD(i, hdKeyPair, sighashTypes);\n            results.push(true);\n          } catch (err) {\n            results.push(false);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (results.every(function (v) {\n        return v === false;\n      })) {\n        throw new Error('No inputs were signed');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"signAllInputsHDAsync\",\n    value: function signAllInputsHDAsync(hdKeyPair) {\n      var _this6 = this;\n\n      var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [transaction_1.Transaction.SIGHASH_ALL];\n      return new Promise(function (resolve, reject) {\n        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n          return reject(new Error('Need HDSigner to sign input'));\n        }\n\n        var results = [];\n        var promises = [];\n\n        var _iterator3 = _createForOfIteratorHelper(range(_this6.data.inputs.length)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var i = _step3.value;\n            promises.push(_this6.signInputHDAsync(i, hdKeyPair, sighashTypes).then(function () {\n              results.push(true);\n            }, function () {\n              results.push(false);\n            }));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return Promise.all(promises).then(function () {\n          if (results.every(function (v) {\n            return v === false;\n          })) {\n            return reject(new Error('No inputs were signed'));\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"signInputHD\",\n    value: function signInputHD(inputIndex, hdKeyPair) {\n      var _this7 = this;\n\n      var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [transaction_1.Transaction.SIGHASH_ALL];\n\n      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n        throw new Error('Need HDSigner to sign input');\n      }\n\n      var signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);\n      signers.forEach(function (signer) {\n        return _this7.signInput(inputIndex, signer, sighashTypes);\n      });\n      return this;\n    }\n  }, {\n    key: \"signInputHDAsync\",\n    value: function signInputHDAsync(inputIndex, hdKeyPair) {\n      var _this8 = this;\n\n      var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [transaction_1.Transaction.SIGHASH_ALL];\n      return new Promise(function (resolve, reject) {\n        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n          return reject(new Error('Need HDSigner to sign input'));\n        }\n\n        var signers = getSignersFromHD(inputIndex, _this8.data.inputs, hdKeyPair);\n        var promises = signers.map(function (signer) {\n          return _this8.signInputAsync(inputIndex, signer, sighashTypes);\n        });\n        return Promise.all(promises).then(function () {\n          resolve();\n        }).catch(reject);\n      });\n    }\n  }, {\n    key: \"signAllInputs\",\n    value: function signAllInputs(keyPair) {\n      var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [transaction_1.Transaction.SIGHASH_ALL];\n      if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input'); // TODO: Add a pubkey/pubkeyhash cache to each input\n      // as input information is added, then eventually\n      // optimize this method.\n\n      var results = [];\n\n      var _iterator4 = _createForOfIteratorHelper(range(this.data.inputs.length)),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var i = _step4.value;\n\n          try {\n            this.signInput(i, keyPair, sighashTypes);\n            results.push(true);\n          } catch (err) {\n            results.push(false);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (results.every(function (v) {\n        return v === false;\n      })) {\n        throw new Error('No inputs were signed');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"signAllInputsAsync\",\n    value: function signAllInputsAsync(keyPair) {\n      var _this9 = this;\n\n      var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [transaction_1.Transaction.SIGHASH_ALL];\n      return new Promise(function (resolve, reject) {\n        if (!keyPair || !keyPair.publicKey) return reject(new Error('Need Signer to sign input')); // TODO: Add a pubkey/pubkeyhash cache to each input\n        // as input information is added, then eventually\n        // optimize this method.\n\n        var results = [];\n        var promises = [];\n\n        var _iterator5 = _createForOfIteratorHelper(_this9.data.inputs.entries()),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 1),\n                i = _step5$value[0];\n\n            promises.push(_this9.signInputAsync(i, keyPair, sighashTypes).then(function () {\n              results.push(true);\n            }, function () {\n              results.push(false);\n            }));\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        return Promise.all(promises).then(function () {\n          if (results.every(function (v) {\n            return v === false;\n          })) {\n            return reject(new Error('No inputs were signed'));\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"signInput\",\n    value: function signInput(inputIndex, keyPair) {\n      var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [transaction_1.Transaction.SIGHASH_ALL];\n      if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n\n      var _getHashAndSighashTyp = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes),\n          hash = _getHashAndSighashTyp.hash,\n          sighashType = _getHashAndSighashTyp.sighashType;\n\n      var partialSig = [{\n        pubkey: keyPair.publicKey,\n        signature: bscript.signature.encode(keyPair.sign(hash), sighashType)\n      }];\n      this.data.updateInput(inputIndex, {\n        partialSig: partialSig\n      });\n      return this;\n    }\n  }, {\n    key: \"signInputAsync\",\n    value: function signInputAsync(inputIndex, keyPair) {\n      var _this10 = this;\n\n      var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [transaction_1.Transaction.SIGHASH_ALL];\n      return Promise.resolve().then(function () {\n        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n\n        var _getHashAndSighashTyp2 = getHashAndSighashType(_this10.data.inputs, inputIndex, keyPair.publicKey, _this10.__CACHE, sighashTypes),\n            hash = _getHashAndSighashTyp2.hash,\n            sighashType = _getHashAndSighashTyp2.sighashType;\n\n        return Promise.resolve(keyPair.sign(hash)).then(function (signature) {\n          var partialSig = [{\n            pubkey: keyPair.publicKey,\n            signature: bscript.signature.encode(signature, sighashType)\n          }];\n\n          _this10.data.updateInput(inputIndex, {\n            partialSig: partialSig\n          });\n        });\n      });\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      checkCache(this.__CACHE);\n      return this.data.toBuffer();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      checkCache(this.__CACHE);\n      return this.data.toHex();\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      checkCache(this.__CACHE);\n      return this.data.toBase64();\n    }\n  }, {\n    key: \"updateGlobal\",\n    value: function updateGlobal(updateData) {\n      this.data.updateGlobal(updateData);\n      return this;\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(inputIndex, updateData) {\n      if (updateData.witnessScript) checkInvalidP2WSH(updateData.witnessScript);\n      this.data.updateInput(inputIndex, updateData);\n\n      if (updateData.nonWitnessUtxo) {\n        addNonWitnessTxCache(this.__CACHE, this.data.inputs[inputIndex], inputIndex);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateOutput\",\n    value: function updateOutput(outputIndex, updateData) {\n      this.data.updateOutput(outputIndex, updateData);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToGlobal\",\n    value: function addUnknownKeyValToGlobal(keyVal) {\n      this.data.addUnknownKeyValToGlobal(keyVal);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToInput\",\n    value: function addUnknownKeyValToInput(inputIndex, keyVal) {\n      this.data.addUnknownKeyValToInput(inputIndex, keyVal);\n      return this;\n    }\n  }, {\n    key: \"addUnknownKeyValToOutput\",\n    value: function addUnknownKeyValToOutput(outputIndex, keyVal) {\n      this.data.addUnknownKeyValToOutput(outputIndex, keyVal);\n      return this;\n    }\n  }, {\n    key: \"clearFinalizedInput\",\n    value: function clearFinalizedInput(inputIndex) {\n      this.data.clearFinalizedInput(inputIndex);\n      return this;\n    }\n  }], [{\n    key: \"fromBase64\",\n    value: function fromBase64(data) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var buffer = Buffer.from(data, 'base64');\n      return this.fromBuffer(buffer, opts);\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(data) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var buffer = Buffer.from(data, 'hex');\n      return this.fromBuffer(buffer, opts);\n    }\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var psbtBase = bip174_1.Psbt.fromBuffer(buffer, transactionFromBuffer);\n      var psbt = new Psbt(opts, psbtBase);\n      checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);\n      return psbt;\n    }\n  }]);\n\n  return Psbt;\n}();\n\nexports.Psbt = Psbt;\n/**\n * This function is needed to pass to the bip174 base class's fromBuffer.\n * It takes the \"transaction buffer\" portion of the psbt buffer and returns a\n * Transaction (From the bip174 library) interface.\n */\n\nvar transactionFromBuffer = function transactionFromBuffer(buffer) {\n  return new PsbtTransaction(buffer);\n};\n/**\n * This class implements the Transaction interface from bip174 library.\n * It contains a bitcoinjs-lib Transaction object.\n */\n\n\nvar PsbtTransaction = /*#__PURE__*/function () {\n  function PsbtTransaction() {\n    var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\n    _classCallCheck(this, PsbtTransaction);\n\n    this.tx = transaction_1.Transaction.fromBuffer(buffer);\n    checkTxEmpty(this.tx);\n    Object.defineProperty(this, 'tx', {\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  _createClass(PsbtTransaction, [{\n    key: \"getInputOutputCounts\",\n    value: function getInputOutputCounts() {\n      return {\n        inputCount: this.tx.ins.length,\n        outputCount: this.tx.outs.length\n      };\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(input) {\n      if (input.hash === undefined || input.index === undefined || !Buffer.isBuffer(input.hash) && typeof input.hash !== 'string' || typeof input.index !== 'number') {\n        throw new Error('Error adding input.');\n      }\n\n      var hash = typeof input.hash === 'string' ? bufferutils_1.reverseBuffer(Buffer.from(input.hash, 'hex')) : input.hash;\n      this.tx.addInput(hash, input.index, input.sequence);\n    }\n  }, {\n    key: \"addOutput\",\n    value: function addOutput(output) {\n      if (output.script === undefined || output.value === undefined || !Buffer.isBuffer(output.script) || typeof output.value !== 'number') {\n        throw new Error('Error adding output.');\n      }\n\n      this.tx.addOutput(output.script, output.value);\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this.tx.toBuffer();\n    }\n  }]);\n\n  return PsbtTransaction;\n}();\n\nfunction canFinalize(input, script, scriptType) {\n  switch (scriptType) {\n    case 'pubkey':\n    case 'pubkeyhash':\n    case 'witnesspubkeyhash':\n      return hasSigs(1, input.partialSig);\n\n    case 'multisig':\n      var p2ms = payments.p2ms({\n        output: script\n      });\n      return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);\n\n    default:\n      return false;\n  }\n}\n\nfunction checkCache(cache) {\n  if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {\n    throw new Error('Not BIP174 compliant, can not export');\n  }\n}\n\nfunction hasSigs(neededSigs, partialSig, pubkeys) {\n  if (!partialSig) return false;\n  var sigs;\n\n  if (pubkeys) {\n    sigs = pubkeys.map(function (pkey) {\n      var pubkey = ecpair_1.fromPublicKey(pkey, {\n        compressed: true\n      }).publicKey;\n      return partialSig.find(function (pSig) {\n        return pSig.pubkey.equals(pubkey);\n      });\n    }).filter(function (v) {\n      return !!v;\n    });\n  } else {\n    sigs = partialSig;\n  }\n\n  if (sigs.length > neededSigs) throw new Error('Too many signatures');\n  return sigs.length === neededSigs;\n}\n\nfunction isFinalized(input) {\n  return !!input.finalScriptSig || !!input.finalScriptWitness;\n}\n\nfunction isPaymentFactory(payment) {\n  return function (script) {\n    try {\n      payment({\n        output: script\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n}\n\nvar isP2MS = isPaymentFactory(payments.p2ms);\nvar isP2PK = isPaymentFactory(payments.p2pk);\nvar isP2PKH = isPaymentFactory(payments.p2pkh);\nvar isP2WPKH = isPaymentFactory(payments.p2wpkh);\nvar isP2WSHScript = isPaymentFactory(payments.p2wsh);\nvar isP2SHScript = isPaymentFactory(payments.p2sh);\n\nfunction bip32DerivationIsMine(root) {\n  return function (d) {\n    if (!d.masterFingerprint.equals(root.fingerprint)) return false;\n    if (!root.derivePath(d.path).publicKey.equals(d.pubkey)) return false;\n    return true;\n  };\n}\n\nfunction check32Bit(num) {\n  if (typeof num !== 'number' || num !== Math.floor(num) || num > 0xffffffff || num < 0) {\n    throw new Error('Invalid 32 bit integer');\n  }\n}\n\nfunction checkFees(psbt, cache, opts) {\n  var feeRate = cache.__FEE_RATE || psbt.getFeeRate();\n\n  var vsize = cache.__EXTRACTED_TX.virtualSize();\n\n  var satoshis = feeRate * vsize;\n\n  if (feeRate >= opts.maximumFeeRate) {\n    throw new Error(\"Warning: You are paying around \".concat((satoshis / 1e8).toFixed(8), \" in \") + \"fees, which is \".concat(feeRate, \" satoshi per byte for a transaction \") + \"with a VSize of \".concat(vsize, \" bytes (segwit counted as 0.25 byte per \") + \"byte). Use setMaximumFeeRate method to raise your threshold, or \" + \"pass true to the first arg of extractTransaction.\");\n  }\n}\n\nfunction checkInputsForPartialSig(inputs, action) {\n  inputs.forEach(function (input) {\n    var throws = false;\n    var pSigs = [];\n\n    if ((input.partialSig || []).length === 0) {\n      if (!input.finalScriptSig && !input.finalScriptWitness) return;\n      pSigs = getPsigsFromInputFinalScripts(input);\n    } else {\n      pSigs = input.partialSig;\n    }\n\n    pSigs.forEach(function (pSig) {\n      var _bscript$signature$de = bscript.signature.decode(pSig.signature),\n          hashType = _bscript$signature$de.hashType;\n\n      var whitelist = [];\n      var isAnyoneCanPay = hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;\n      if (isAnyoneCanPay) whitelist.push('addInput');\n      var hashMod = hashType & 0x1f;\n\n      switch (hashMod) {\n        case transaction_1.Transaction.SIGHASH_ALL:\n          break;\n\n        case transaction_1.Transaction.SIGHASH_SINGLE:\n        case transaction_1.Transaction.SIGHASH_NONE:\n          whitelist.push('addOutput');\n          whitelist.push('setInputSequence');\n          break;\n      }\n\n      if (whitelist.indexOf(action) === -1) {\n        throws = true;\n      }\n    });\n\n    if (throws) {\n      throw new Error('Can not modify transaction, signatures exist.');\n    }\n  });\n}\n\nfunction checkPartialSigSighashes(input) {\n  if (!input.sighashType || !input.partialSig) return;\n  var partialSig = input.partialSig,\n      sighashType = input.sighashType;\n  partialSig.forEach(function (pSig) {\n    var _bscript$signature$de2 = bscript.signature.decode(pSig.signature),\n        hashType = _bscript$signature$de2.hashType;\n\n    if (sighashType !== hashType) {\n      throw new Error('Signature sighash does not match input sighash type');\n    }\n  });\n}\n\nfunction checkScriptForPubkey(pubkey, script, action) {\n  if (!pubkeyInScript(pubkey, script)) {\n    throw new Error(\"Can not \".concat(action, \" for this input with the key \").concat(pubkey.toString('hex')));\n  }\n}\n\nfunction checkTxEmpty(tx) {\n  var isEmpty = tx.ins.every(function (input) {\n    return input.script && input.script.length === 0 && input.witness && input.witness.length === 0;\n  });\n\n  if (!isEmpty) {\n    throw new Error('Format Error: Transaction ScriptSigs are not empty');\n  }\n}\n\nfunction checkTxForDupeIns(tx, cache) {\n  tx.ins.forEach(function (input) {\n    checkTxInputCache(cache, input);\n  });\n}\n\nfunction checkTxInputCache(cache, input) {\n  var key = bufferutils_1.reverseBuffer(Buffer.from(input.hash)).toString('hex') + ':' + input.index;\n  if (cache.__TX_IN_CACHE[key]) throw new Error('Duplicate input detected.');\n  cache.__TX_IN_CACHE[key] = 1;\n}\n\nfunction scriptCheckerFactory(payment, paymentScriptName) {\n  return function (inputIndex, scriptPubKey, redeemScript, ioType) {\n    var redeemScriptOutput = payment({\n      redeem: {\n        output: redeemScript\n      }\n    }).output;\n\n    if (!scriptPubKey.equals(redeemScriptOutput)) {\n      throw new Error(\"\".concat(paymentScriptName, \" for \").concat(ioType, \" #\").concat(inputIndex, \" doesn't match the scriptPubKey in the prevout\"));\n    }\n  };\n}\n\nvar checkRedeemScript = scriptCheckerFactory(payments.p2sh, 'Redeem script');\nvar checkWitnessScript = scriptCheckerFactory(payments.p2wsh, 'Witness script');\n\nfunction getTxCacheValue(key, name, inputs, c) {\n  if (!inputs.every(isFinalized)) throw new Error(\"PSBT must be finalized to calculate \".concat(name));\n  if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;\n  if (key === '__FEE' && c.__FEE) return c.__FEE;\n  var tx;\n  var mustFinalize = true;\n\n  if (c.__EXTRACTED_TX) {\n    tx = c.__EXTRACTED_TX;\n    mustFinalize = false;\n  } else {\n    tx = c.__TX.clone();\n  }\n\n  inputFinalizeGetAmts(inputs, tx, c, mustFinalize);\n  if (key === '__FEE_RATE') return c.__FEE_RATE;else if (key === '__FEE') return c.__FEE;\n}\n\nfunction getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {\n  var scriptType = classifyScript(script);\n  if (!canFinalize(input, script, scriptType)) throw new Error(\"Can not finalize input #\".concat(inputIndex));\n  return prepareFinalScripts(script, scriptType, input.partialSig, isSegwit, isP2SH, isP2WSH);\n}\n\nfunction prepareFinalScripts(script, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {\n  var finalScriptSig;\n  var finalScriptWitness; // Wow, the payments API is very handy\n\n  var payment = getPayment(script, scriptType, partialSig);\n  var p2wsh = !isP2WSH ? null : payments.p2wsh({\n    redeem: payment\n  });\n  var p2sh = !isP2SH ? null : payments.p2sh({\n    redeem: p2wsh || payment\n  });\n\n  if (isSegwit) {\n    if (p2wsh) {\n      finalScriptWitness = witnessStackToScriptWitness(p2wsh.witness);\n    } else {\n      finalScriptWitness = witnessStackToScriptWitness(payment.witness);\n    }\n\n    if (p2sh) {\n      finalScriptSig = p2sh.input;\n    }\n  } else {\n    if (p2sh) {\n      finalScriptSig = p2sh.input;\n    } else {\n      finalScriptSig = payment.input;\n    }\n  }\n\n  return {\n    finalScriptSig: finalScriptSig,\n    finalScriptWitness: finalScriptWitness\n  };\n}\n\nfunction getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes) {\n  var input = utils_1.checkForInput(inputs, inputIndex);\n\n  var _getHashForSig = getHashForSig(inputIndex, input, cache, false, sighashTypes),\n      hash = _getHashForSig.hash,\n      sighashType = _getHashForSig.sighashType,\n      script = _getHashForSig.script;\n\n  checkScriptForPubkey(pubkey, script, 'sign');\n  return {\n    hash: hash,\n    sighashType: sighashType\n  };\n}\n\nfunction getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {\n  var unsignedTx = cache.__TX;\n  var sighashType = input.sighashType || transaction_1.Transaction.SIGHASH_ALL;\n\n  if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {\n    var str = sighashTypeToString(sighashType);\n    throw new Error(\"Sighash type is not allowed. Retry the sign method passing the \" + \"sighashTypes array of whitelisted types. Sighash type: \".concat(str));\n  }\n\n  var hash;\n  var prevout;\n\n  if (input.nonWitnessUtxo) {\n    var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n    var prevoutHash = unsignedTx.ins[inputIndex].hash;\n    var utxoHash = nonWitnessUtxoTx.getHash(); // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout\n\n    if (!prevoutHash.equals(utxoHash)) {\n      throw new Error(\"Non-witness UTXO hash for input #\".concat(inputIndex, \" doesn't match the hash specified in the prevout\"));\n    }\n\n    var prevoutIndex = unsignedTx.ins[inputIndex].index;\n    prevout = nonWitnessUtxoTx.outs[prevoutIndex];\n  } else if (input.witnessUtxo) {\n    prevout = input.witnessUtxo;\n  } else {\n    throw new Error('Need a Utxo input item for signing');\n  }\n\n  var _getMeaningfulScript = getMeaningfulScript(prevout.script, inputIndex, 'input', input.redeemScript, input.witnessScript),\n      meaningfulScript = _getMeaningfulScript.meaningfulScript,\n      type = _getMeaningfulScript.type;\n\n  if (['p2sh-p2wsh', 'p2wsh'].indexOf(type) >= 0) {\n    hash = unsignedTx.hashForWitnessV0(inputIndex, meaningfulScript, prevout.value, sighashType);\n  } else if (isP2WPKH(meaningfulScript)) {\n    // P2WPKH uses the P2PKH template for prevoutScript when signing\n    var signingScript = payments.p2pkh({\n      hash: meaningfulScript.slice(2)\n    }).output;\n    hash = unsignedTx.hashForWitnessV0(inputIndex, signingScript, prevout.value, sighashType);\n  } else {\n    // non-segwit\n    if (input.nonWitnessUtxo === undefined && cache.__UNSAFE_SIGN_NONSEGWIT === false) throw new Error(\"Input #\".concat(inputIndex, \" has witnessUtxo but non-segwit script: \") + \"\".concat(meaningfulScript.toString('hex')));\n    if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false) console.warn('Warning: Signing non-segwit inputs without the full parent transaction ' + 'means there is a chance that a miner could feed you incorrect information ' + 'to trick you into paying large fees. This behavior is the same as the old ' + 'TransactionBuilder class when signing non-segwit scripts. You are not ' + 'able to export this Psbt with toBuffer|toBase64|toHex since it is not ' + 'BIP174 compliant.\\n*********************\\nPROCEED WITH CAUTION!\\n' + '*********************');\n    hash = unsignedTx.hashForSignature(inputIndex, meaningfulScript, sighashType);\n  }\n\n  return {\n    script: meaningfulScript,\n    sighashType: sighashType,\n    hash: hash\n  };\n}\n\nfunction getPayment(script, scriptType, partialSig) {\n  var payment;\n\n  switch (scriptType) {\n    case 'multisig':\n      var sigs = getSortedSigs(script, partialSig);\n      payment = payments.p2ms({\n        output: script,\n        signatures: sigs\n      });\n      break;\n\n    case 'pubkey':\n      payment = payments.p2pk({\n        output: script,\n        signature: partialSig[0].signature\n      });\n      break;\n\n    case 'pubkeyhash':\n      payment = payments.p2pkh({\n        output: script,\n        pubkey: partialSig[0].pubkey,\n        signature: partialSig[0].signature\n      });\n      break;\n\n    case 'witnesspubkeyhash':\n      payment = payments.p2wpkh({\n        output: script,\n        pubkey: partialSig[0].pubkey,\n        signature: partialSig[0].signature\n      });\n      break;\n  }\n\n  return payment;\n}\n\nfunction getPsigsFromInputFinalScripts(input) {\n  var scriptItems = !input.finalScriptSig ? [] : bscript.decompile(input.finalScriptSig) || [];\n  var witnessItems = !input.finalScriptWitness ? [] : bscript.decompile(input.finalScriptWitness) || [];\n  return scriptItems.concat(witnessItems).filter(function (item) {\n    return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);\n  }).map(function (sig) {\n    return {\n      signature: sig\n    };\n  });\n}\n\nfunction getScriptFromInput(inputIndex, input, cache) {\n  var unsignedTx = cache.__TX;\n  var res = {\n    script: null,\n    isSegwit: false,\n    isP2SH: false,\n    isP2WSH: false\n  };\n  res.isP2SH = !!input.redeemScript;\n  res.isP2WSH = !!input.witnessScript;\n\n  if (input.witnessScript) {\n    res.script = input.witnessScript;\n  } else if (input.redeemScript) {\n    res.script = input.redeemScript;\n  } else {\n    if (input.nonWitnessUtxo) {\n      var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n      var prevoutIndex = unsignedTx.ins[inputIndex].index;\n      res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;\n    } else if (input.witnessUtxo) {\n      res.script = input.witnessUtxo.script;\n    }\n  }\n\n  if (input.witnessScript || isP2WPKH(res.script)) {\n    res.isSegwit = true;\n  }\n\n  return res;\n}\n\nfunction getSignersFromHD(inputIndex, inputs, hdKeyPair) {\n  var input = utils_1.checkForInput(inputs, inputIndex);\n\n  if (!input.bip32Derivation || input.bip32Derivation.length === 0) {\n    throw new Error('Need bip32Derivation to sign with HD');\n  }\n\n  var myDerivations = input.bip32Derivation.map(function (bipDv) {\n    if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {\n      return bipDv;\n    } else {\n      return;\n    }\n  }).filter(function (v) {\n    return !!v;\n  });\n\n  if (myDerivations.length === 0) {\n    throw new Error('Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint');\n  }\n\n  var signers = myDerivations.map(function (bipDv) {\n    var node = hdKeyPair.derivePath(bipDv.path);\n\n    if (!bipDv.pubkey.equals(node.publicKey)) {\n      throw new Error('pubkey did not match bip32Derivation');\n    }\n\n    return node;\n  });\n  return signers;\n}\n\nfunction getSortedSigs(script, partialSig) {\n  var p2ms = payments.p2ms({\n    output: script\n  }); // for each pubkey in order of p2ms script\n\n  return p2ms.pubkeys.map(function (pk) {\n    // filter partialSig array by pubkey being equal\n    return (partialSig.filter(function (ps) {\n      return ps.pubkey.equals(pk);\n    })[0] || {}).signature; // Any pubkey without a match will return undefined\n    // this last filter removes all the undefined items in the array.\n  }).filter(function (v) {\n    return !!v;\n  });\n}\n\nfunction scriptWitnessToWitnessStack(buffer) {\n  var offset = 0;\n\n  function readSlice(n) {\n    offset += n;\n    return buffer.slice(offset - n, offset);\n  }\n\n  function readVarInt() {\n    var vi = varuint.decode(buffer, offset);\n    offset += varuint.decode.bytes;\n    return vi;\n  }\n\n  function readVarSlice() {\n    return readSlice(readVarInt());\n  }\n\n  function readVector() {\n    var count = readVarInt();\n    var vector = [];\n\n    for (var i = 0; i < count; i++) {\n      vector.push(readVarSlice());\n    }\n\n    return vector;\n  }\n\n  return readVector();\n}\n\nfunction sighashTypeToString(sighashType) {\n  var text = sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY ? 'SIGHASH_ANYONECANPAY | ' : '';\n  var sigMod = sighashType & 0x1f;\n\n  switch (sigMod) {\n    case transaction_1.Transaction.SIGHASH_ALL:\n      text += 'SIGHASH_ALL';\n      break;\n\n    case transaction_1.Transaction.SIGHASH_SINGLE:\n      text += 'SIGHASH_SINGLE';\n      break;\n\n    case transaction_1.Transaction.SIGHASH_NONE:\n      text += 'SIGHASH_NONE';\n      break;\n  }\n\n  return text;\n}\n\nfunction witnessStackToScriptWitness(witness) {\n  var buffer = Buffer.allocUnsafe(0);\n\n  function writeSlice(slice) {\n    buffer = Buffer.concat([buffer, Buffer.from(slice)]);\n  }\n\n  function writeVarInt(i) {\n    var currentLen = buffer.length;\n    var varintLen = varuint.encodingLength(i);\n    buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\n    varuint.encode(i, buffer, currentLen);\n  }\n\n  function writeVarSlice(slice) {\n    writeVarInt(slice.length);\n    writeSlice(slice);\n  }\n\n  function writeVector(vector) {\n    writeVarInt(vector.length);\n    vector.forEach(writeVarSlice);\n  }\n\n  writeVector(witness);\n  return buffer;\n}\n\nfunction addNonWitnessTxCache(cache, input, inputIndex) {\n  cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;\n  var tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);\n  cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;\n  var self = cache;\n  var selfIndex = inputIndex;\n  delete input.nonWitnessUtxo;\n  Object.defineProperty(input, 'nonWitnessUtxo', {\n    enumerable: true,\n    get: function get() {\n      var buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];\n      var txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];\n\n      if (buf !== undefined) {\n        return buf;\n      } else {\n        var newBuf = txCache.toBuffer();\n        self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;\n        return newBuf;\n      }\n    },\n    set: function set(data) {\n      self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;\n    }\n  });\n}\n\nfunction inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {\n  var inputAmount = 0;\n  inputs.forEach(function (input, idx) {\n    if (mustFinalize && input.finalScriptSig) tx.ins[idx].script = input.finalScriptSig;\n\n    if (mustFinalize && input.finalScriptWitness) {\n      tx.ins[idx].witness = scriptWitnessToWitnessStack(input.finalScriptWitness);\n    }\n\n    if (input.witnessUtxo) {\n      inputAmount += input.witnessUtxo.value;\n    } else if (input.nonWitnessUtxo) {\n      var nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);\n      var vout = tx.ins[idx].index;\n      var out = nwTx.outs[vout];\n      inputAmount += out.value;\n    }\n  });\n  var outputAmount = tx.outs.reduce(function (total, o) {\n    return total + o.value;\n  }, 0);\n  var fee = inputAmount - outputAmount;\n\n  if (fee < 0) {\n    throw new Error('Outputs are spending more than Inputs');\n  }\n\n  var bytes = tx.virtualSize();\n  cache.__FEE = fee;\n  cache.__EXTRACTED_TX = tx;\n  cache.__FEE_RATE = Math.floor(fee / bytes);\n}\n\nfunction nonWitnessUtxoTxFromCache(cache, input, inputIndex) {\n  var c = cache.__NON_WITNESS_UTXO_TX_CACHE;\n\n  if (!c[inputIndex]) {\n    addNonWitnessTxCache(cache, input, inputIndex);\n  }\n\n  return c[inputIndex];\n}\n\nfunction getScriptFromUtxo(inputIndex, input, cache) {\n  if (input.witnessUtxo !== undefined) {\n    return input.witnessUtxo.script;\n  } else if (input.nonWitnessUtxo !== undefined) {\n    var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n    return nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index].script;\n  } else {\n    throw new Error(\"Can't find pubkey in input without Utxo data\");\n  }\n}\n\nfunction pubkeyInInput(pubkey, input, inputIndex, cache) {\n  var script = getScriptFromUtxo(inputIndex, input, cache);\n\n  var _getMeaningfulScript2 = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript, input.witnessScript),\n      meaningfulScript = _getMeaningfulScript2.meaningfulScript;\n\n  return pubkeyInScript(pubkey, meaningfulScript);\n}\n\nfunction pubkeyInOutput(pubkey, output, outputIndex, cache) {\n  var script = cache.__TX.outs[outputIndex].script;\n\n  var _getMeaningfulScript3 = getMeaningfulScript(script, outputIndex, 'output', output.redeemScript, output.witnessScript),\n      meaningfulScript = _getMeaningfulScript3.meaningfulScript;\n\n  return pubkeyInScript(pubkey, meaningfulScript);\n}\n\nfunction redeemFromFinalScriptSig(finalScript) {\n  if (!finalScript) return;\n  var decomp = bscript.decompile(finalScript);\n  if (!decomp) return;\n  var lastItem = decomp[decomp.length - 1];\n  if (!Buffer.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem)) return;\n  var sDecomp = bscript.decompile(lastItem);\n  if (!sDecomp) return;\n  return lastItem;\n}\n\nfunction redeemFromFinalWitnessScript(finalScript) {\n  if (!finalScript) return;\n  var decomp = scriptWitnessToWitnessStack(finalScript);\n  var lastItem = decomp[decomp.length - 1];\n  if (isPubkeyLike(lastItem)) return;\n  var sDecomp = bscript.decompile(lastItem);\n  if (!sDecomp) return;\n  return lastItem;\n}\n\nfunction isPubkeyLike(buf) {\n  return buf.length === 33 && bscript.isCanonicalPubKey(buf);\n}\n\nfunction isSigLike(buf) {\n  return bscript.isCanonicalScriptSignature(buf);\n}\n\nfunction getMeaningfulScript(script, index, ioType, redeemScript, witnessScript) {\n  var isP2SH = isP2SHScript(script);\n  var isP2SHP2WSH = isP2SH && redeemScript && isP2WSHScript(redeemScript);\n  var isP2WSH = isP2WSHScript(script);\n  if (isP2SH && redeemScript === undefined) throw new Error('scriptPubkey is P2SH but redeemScript missing');\n  if ((isP2WSH || isP2SHP2WSH) && witnessScript === undefined) throw new Error('scriptPubkey or redeemScript is P2WSH but witnessScript missing');\n  var meaningfulScript;\n\n  if (isP2SHP2WSH) {\n    meaningfulScript = witnessScript;\n    checkRedeemScript(index, script, redeemScript, ioType);\n    checkWitnessScript(index, redeemScript, witnessScript, ioType);\n    checkInvalidP2WSH(meaningfulScript);\n  } else if (isP2WSH) {\n    meaningfulScript = witnessScript;\n    checkWitnessScript(index, script, witnessScript, ioType);\n    checkInvalidP2WSH(meaningfulScript);\n  } else if (isP2SH) {\n    meaningfulScript = redeemScript;\n    checkRedeemScript(index, script, redeemScript, ioType);\n  } else {\n    meaningfulScript = script;\n  }\n\n  return {\n    meaningfulScript: meaningfulScript,\n    type: isP2SHP2WSH ? 'p2sh-p2wsh' : isP2SH ? 'p2sh' : isP2WSH ? 'p2wsh' : 'raw'\n  };\n}\n\nfunction checkInvalidP2WSH(script) {\n  if (isP2WPKH(script) || isP2SHScript(script)) {\n    throw new Error('P2WPKH or P2SH can not be contained within P2WSH');\n  }\n}\n\nfunction pubkeyInScript(pubkey, script) {\n  var pubkeyHash = crypto_1.hash160(pubkey);\n  var decompiled = bscript.decompile(script);\n  if (decompiled === null) throw new Error('Unknown script error');\n  return decompiled.some(function (element) {\n    if (typeof element === 'number') return false;\n    return element.equals(pubkey) || element.equals(pubkeyHash);\n  });\n}\n\nfunction classifyScript(script) {\n  if (isP2WPKH(script)) return 'witnesspubkeyhash';\n  if (isP2PKH(script)) return 'pubkeyhash';\n  if (isP2MS(script)) return 'multisig';\n  if (isP2PK(script)) return 'pubkey';\n  return 'nonstandard';\n}\n\nfunction range(n) {\n  return _toConsumableArray(Array(n).keys());\n}","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/bitcoinjs-lib/src/psbt.js"],"names":["Object","defineProperty","exports","value","bip174_1","require","varuint","utils_1","address_1","bufferutils_1","crypto_1","ecpair_1","networks_1","payments","bscript","transaction_1","DEFAULT_OPTS","network","bitcoin","maximumFeeRate","Psbt","opts","data","PsbtTransaction","assign","__CACHE","__NON_WITNESS_UTXO_TX_CACHE","__NON_WITNESS_UTXO_BUF_CACHE","__TX_IN_CACHE","__TX","globalMap","unsignedTx","tx","__UNSAFE_SIGN_NONSEGWIT","inputs","length","setVersion","dpew","obj","attr","enumerable","writable","version","locktime","setLocktime","ins","map","input","hash","cloneBuffer","index","sequence","outs","output","address","fromOutputScript","script","_","those","combine","o","res","fromBuffer","toBuffer","JSON","parse","stringify","satoshiPerByte","check32Bit","checkInputsForPartialSig","c","__EXTRACTED_TX","undefined","inputIndex","Error","inputDatas","forEach","inputData","addInput","arguments","witnessScript","checkInvalidP2WSH","txIn","checkTxInputCache","nonWitnessUtxo","addNonWitnessTxCache","__FEE","__FEE_RATE","outputDatas","outputData","addOutput","toOutputScript","disableFeeCheck","every","isFinalized","checkFees","clone","inputFinalizeGetAmts","getTxCacheValue","checkForInput","range","idx","finalizeInput","finalScriptsFunc","getFinalScripts","getScriptFromInput","isP2SH","isP2WSH","isSegwit","checkPartialSigSighashes","finalScriptSig","finalScriptWitness","updateInput","clearFinalizedInput","getScriptFromUtxo","result","getMeaningfulScript","redeemScript","redeemFromFinalScriptSig","redeemFromFinalWitnessScript","type","mainType","classifyScript","meaningfulScript","pubkey","pubkeyInInput","root","derivationIsMine","bip32DerivationIsMine","bip32Derivation","some","outputIndex","checkForOutput","outputs","pubkeyInOutput","results","validateSignaturesOfInput","reduce","final","partialSig","mySigs","filter","sig","equals","hashCache","scriptCache","sighashCache","pSig","signature","decode","hashType","getHashForSig","sighashType","checkScriptForPubkey","keypair","fromPublicKey","push","verify","hdKeyPair","sighashTypes","Transaction","SIGHASH_ALL","publicKey","fingerprint","i","signInputHD","err","v","Promise","resolve","reject","promises","signInputHDAsync","then","all","signers","getSignersFromHD","signer","signInput","signInputAsync","catch","keyPair","entries","getHashAndSighashType","encode","sign","checkCache","toHex","toBase64","updateData","updateGlobal","updateOutput","keyVal","addUnknownKeyValToGlobal","addUnknownKeyValToInput","addUnknownKeyValToOutput","buffer","Buffer","from","psbtBase","transactionFromBuffer","psbt","checkTxForDupeIns","checkTxEmpty","inputCount","outputCount","isBuffer","reverseBuffer","canFinalize","scriptType","hasSigs","p2ms","m","pubkeys","cache","neededSigs","sigs","pkey","compressed","find","isPaymentFactory","payment","isP2MS","isP2PK","p2pk","isP2PKH","p2pkh","isP2WPKH","p2wpkh","isP2WSHScript","p2wsh","isP2SHScript","p2sh","d","masterFingerprint","derivePath","path","num","Math","floor","feeRate","getFeeRate","vsize","virtualSize","satoshis","toFixed","action","throws","pSigs","getPsigsFromInputFinalScripts","whitelist","isAnyoneCanPay","SIGHASH_ANYONECANPAY","hashMod","SIGHASH_SINGLE","SIGHASH_NONE","indexOf","pubkeyInScript","toString","isEmpty","witness","key","scriptCheckerFactory","paymentScriptName","scriptPubKey","ioType","redeemScriptOutput","redeem","checkRedeemScript","checkWitnessScript","name","mustFinalize","prepareFinalScripts","getPayment","witnessStackToScriptWitness","forValidate","str","sighashTypeToString","prevout","nonWitnessUtxoTx","nonWitnessUtxoTxFromCache","prevoutHash","utxoHash","getHash","prevoutIndex","witnessUtxo","hashForWitnessV0","signingScript","slice","console","warn","hashForSignature","getSortedSigs","signatures","scriptItems","decompile","witnessItems","concat","item","isCanonicalScriptSignature","myDerivations","bipDv","node","pk","ps","scriptWitnessToWitnessStack","offset","readSlice","n","readVarInt","vi","bytes","readVarSlice","readVector","count","vector","text","sigMod","allocUnsafe","writeSlice","writeVarInt","currentLen","varintLen","encodingLength","writeVarSlice","writeVector","self","selfIndex","get","buf","txCache","newBuf","set","inputAmount","nwTx","vout","out","outputAmount","total","fee","finalScript","decomp","lastItem","isPubkeyLike","isSigLike","sDecomp","isCanonicalPubKey","isP2SHP2WSH","pubkeyHash","hash160","decompiled","element","Array","keys"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bip174_1 = require('bip174');\nconst varuint = require('bip174/src/lib/converter/varint');\nconst utils_1 = require('bip174/src/lib/utils');\nconst address_1 = require('./address');\nconst bufferutils_1 = require('./bufferutils');\nconst crypto_1 = require('./crypto');\nconst ecpair_1 = require('./ecpair');\nconst networks_1 = require('./networks');\nconst payments = require('./payments');\nconst bscript = require('./script');\nconst transaction_1 = require('./transaction');\n/**\n * These are the default arguments for a Psbt instance.\n */\nconst DEFAULT_OPTS = {\n  /**\n   * A bitcoinjs Network object. This is only used if you pass an `address`\n   * parameter to addOutput. Otherwise it is not needed and can be left default.\n   */\n  network: networks_1.bitcoin,\n  /**\n   * When extractTransaction is called, the fee rate is checked.\n   * THIS IS NOT TO BE RELIED ON.\n   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.\n   */\n  maximumFeeRate: 5000,\n};\n/**\n * Psbt class can parse and generate a PSBT binary based off of the BIP174.\n * There are 6 roles that this class fulfills. (Explained in BIP174)\n *\n * Creator: This can be done with `new Psbt()`\n * Updater: This can be done with `psbt.addInput(input)`, `psbt.addInputs(inputs)`,\n *   `psbt.addOutput(output)`, `psbt.addOutputs(outputs)` when you are looking to\n *   add new inputs and outputs to the PSBT, and `psbt.updateGlobal(itemObject)`,\n *   `psbt.updateInput(itemObject)`, `psbt.updateOutput(itemObject)`\n *   addInput requires hash: Buffer | string; and index: number; as attributes\n *   and can also include any attributes that are used in updateInput method.\n *   addOutput requires script: Buffer; and value: number; and likewise can include\n *   data for updateOutput.\n *   For a list of what attributes should be what types. Check the bip174 library.\n *   Also, check the integration tests for some examples of usage.\n * Signer: There are a few methods. signAllInputs and signAllInputsAsync, which will search all input\n *   information for your pubkey or pubkeyhash, and only sign inputs where it finds\n *   your info. Or you can explicitly sign a specific input with signInput and\n *   signInputAsync. For the async methods you can create a SignerAsync object\n *   and use something like a hardware wallet to sign with. (You must implement this)\n * Combiner: psbts can be combined easily with `psbt.combine(psbt2, psbt3, psbt4 ...)`\n *   the psbt calling combine will always have precedence when a conflict occurs.\n *   Combine checks if the internal bitcoin transaction is the same, so be sure that\n *   all sequences, version, locktime, etc. are the same before combining.\n * Input Finalizer: This role is fairly important. Not only does it need to construct\n *   the input scriptSigs and witnesses, but it SHOULD verify the signatures etc.\n *   Before running `psbt.finalizeAllInputs()` please run `psbt.validateSignaturesOfAllInputs()`\n *   Running any finalize method will delete any data in the input(s) that are no longer\n *   needed due to the finalized scripts containing the information.\n * Transaction Extractor: This role will perform some checks before returning a\n *   Transaction object. Such as fee rate not being larger than maximumFeeRate etc.\n */\nclass Psbt {\n  constructor(opts = {}, data = new bip174_1.Psbt(new PsbtTransaction())) {\n    this.data = data;\n    // set defaults\n    this.opts = Object.assign({}, DEFAULT_OPTS, opts);\n    this.__CACHE = {\n      __NON_WITNESS_UTXO_TX_CACHE: [],\n      __NON_WITNESS_UTXO_BUF_CACHE: [],\n      __TX_IN_CACHE: {},\n      __TX: this.data.globalMap.unsignedTx.tx,\n      // Old TransactionBuilder behavior was to not confirm input values\n      // before signing. Even though we highly encourage people to get\n      // the full parent transaction to verify values, the ability to\n      // sign non-segwit inputs without the full transaction was often\n      // requested. So the only way to activate is to use @ts-ignore.\n      // We will disable exporting the Psbt when unsafe sign is active.\n      // because it is not BIP174 compliant.\n      __UNSAFE_SIGN_NONSEGWIT: false,\n    };\n    if (this.data.inputs.length === 0) this.setVersion(2);\n    // Make data hidden when enumerating\n    const dpew = (obj, attr, enumerable, writable) =>\n      Object.defineProperty(obj, attr, {\n        enumerable,\n        writable,\n      });\n    dpew(this, '__CACHE', false, true);\n    dpew(this, 'opts', false, true);\n  }\n  static fromBase64(data, opts = {}) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, opts);\n  }\n  static fromHex(data, opts = {}) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, opts);\n  }\n  static fromBuffer(buffer, opts = {}) {\n    const psbtBase = bip174_1.Psbt.fromBuffer(buffer, transactionFromBuffer);\n    const psbt = new Psbt(opts, psbtBase);\n    checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);\n    return psbt;\n  }\n  get inputCount() {\n    return this.data.inputs.length;\n  }\n  get version() {\n    return this.__CACHE.__TX.version;\n  }\n  set version(version) {\n    this.setVersion(version);\n  }\n  get locktime() {\n    return this.__CACHE.__TX.locktime;\n  }\n  set locktime(locktime) {\n    this.setLocktime(locktime);\n  }\n  get txInputs() {\n    return this.__CACHE.__TX.ins.map(input => ({\n      hash: bufferutils_1.cloneBuffer(input.hash),\n      index: input.index,\n      sequence: input.sequence,\n    }));\n  }\n  get txOutputs() {\n    return this.__CACHE.__TX.outs.map(output => {\n      let address;\n      try {\n        address = address_1.fromOutputScript(output.script, this.opts.network);\n      } catch (_) {}\n      return {\n        script: bufferutils_1.cloneBuffer(output.script),\n        value: output.value,\n        address,\n      };\n    });\n  }\n  combine(...those) {\n    this.data.combine(...those.map(o => o.data));\n    return this;\n  }\n  clone() {\n    // TODO: more efficient cloning\n    const res = Psbt.fromBuffer(this.data.toBuffer());\n    res.opts = JSON.parse(JSON.stringify(this.opts));\n    return res;\n  }\n  setMaximumFeeRate(satoshiPerByte) {\n    check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw\n    this.opts.maximumFeeRate = satoshiPerByte;\n  }\n  setVersion(version) {\n    check32Bit(version);\n    checkInputsForPartialSig(this.data.inputs, 'setVersion');\n    const c = this.__CACHE;\n    c.__TX.version = version;\n    c.__EXTRACTED_TX = undefined;\n    return this;\n  }\n  setLocktime(locktime) {\n    check32Bit(locktime);\n    checkInputsForPartialSig(this.data.inputs, 'setLocktime');\n    const c = this.__CACHE;\n    c.__TX.locktime = locktime;\n    c.__EXTRACTED_TX = undefined;\n    return this;\n  }\n  setInputSequence(inputIndex, sequence) {\n    check32Bit(sequence);\n    checkInputsForPartialSig(this.data.inputs, 'setInputSequence');\n    const c = this.__CACHE;\n    if (c.__TX.ins.length <= inputIndex) {\n      throw new Error('Input index too high');\n    }\n    c.__TX.ins[inputIndex].sequence = sequence;\n    c.__EXTRACTED_TX = undefined;\n    return this;\n  }\n  addInputs(inputDatas) {\n    inputDatas.forEach(inputData => this.addInput(inputData));\n    return this;\n  }\n  addInput(inputData) {\n    if (\n      arguments.length > 1 ||\n      !inputData ||\n      inputData.hash === undefined ||\n      inputData.index === undefined\n    ) {\n      throw new Error(\n        `Invalid arguments for Psbt.addInput. ` +\n          `Requires single object with at least [hash] and [index]`,\n      );\n    }\n    checkInputsForPartialSig(this.data.inputs, 'addInput');\n    if (inputData.witnessScript) checkInvalidP2WSH(inputData.witnessScript);\n    const c = this.__CACHE;\n    this.data.addInput(inputData);\n    const txIn = c.__TX.ins[c.__TX.ins.length - 1];\n    checkTxInputCache(c, txIn);\n    const inputIndex = this.data.inputs.length - 1;\n    const input = this.data.inputs[inputIndex];\n    if (input.nonWitnessUtxo) {\n      addNonWitnessTxCache(this.__CACHE, input, inputIndex);\n    }\n    c.__FEE = undefined;\n    c.__FEE_RATE = undefined;\n    c.__EXTRACTED_TX = undefined;\n    return this;\n  }\n  addOutputs(outputDatas) {\n    outputDatas.forEach(outputData => this.addOutput(outputData));\n    return this;\n  }\n  addOutput(outputData) {\n    if (\n      arguments.length > 1 ||\n      !outputData ||\n      outputData.value === undefined ||\n      (outputData.address === undefined && outputData.script === undefined)\n    ) {\n      throw new Error(\n        `Invalid arguments for Psbt.addOutput. ` +\n          `Requires single object with at least [script or address] and [value]`,\n      );\n    }\n    checkInputsForPartialSig(this.data.inputs, 'addOutput');\n    const { address } = outputData;\n    if (typeof address === 'string') {\n      const { network } = this.opts;\n      const script = address_1.toOutputScript(address, network);\n      outputData = Object.assign(outputData, { script });\n    }\n    const c = this.__CACHE;\n    this.data.addOutput(outputData);\n    c.__FEE = undefined;\n    c.__FEE_RATE = undefined;\n    c.__EXTRACTED_TX = undefined;\n    return this;\n  }\n  extractTransaction(disableFeeCheck) {\n    if (!this.data.inputs.every(isFinalized)) throw new Error('Not finalized');\n    const c = this.__CACHE;\n    if (!disableFeeCheck) {\n      checkFees(this, c, this.opts);\n    }\n    if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;\n    const tx = c.__TX.clone();\n    inputFinalizeGetAmts(this.data.inputs, tx, c, true);\n    return tx;\n  }\n  getFeeRate() {\n    return getTxCacheValue(\n      '__FEE_RATE',\n      'fee rate',\n      this.data.inputs,\n      this.__CACHE,\n    );\n  }\n  getFee() {\n    return getTxCacheValue('__FEE', 'fee', this.data.inputs, this.__CACHE);\n  }\n  finalizeAllInputs() {\n    utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one\n    range(this.data.inputs.length).forEach(idx => this.finalizeInput(idx));\n    return this;\n  }\n  finalizeInput(inputIndex, finalScriptsFunc = getFinalScripts) {\n    const input = utils_1.checkForInput(this.data.inputs, inputIndex);\n    const { script, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(\n      inputIndex,\n      input,\n      this.__CACHE,\n    );\n    if (!script) throw new Error(`No script found for input #${inputIndex}`);\n    checkPartialSigSighashes(input);\n    const { finalScriptSig, finalScriptWitness } = finalScriptsFunc(\n      inputIndex,\n      input,\n      script,\n      isSegwit,\n      isP2SH,\n      isP2WSH,\n    );\n    if (finalScriptSig) this.data.updateInput(inputIndex, { finalScriptSig });\n    if (finalScriptWitness)\n      this.data.updateInput(inputIndex, { finalScriptWitness });\n    if (!finalScriptSig && !finalScriptWitness)\n      throw new Error(`Unknown error finalizing input #${inputIndex}`);\n    this.data.clearFinalizedInput(inputIndex);\n    return this;\n  }\n  getInputType(inputIndex) {\n    const input = utils_1.checkForInput(this.data.inputs, inputIndex);\n    const script = getScriptFromUtxo(inputIndex, input, this.__CACHE);\n    const result = getMeaningfulScript(\n      script,\n      inputIndex,\n      'input',\n      input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig),\n      input.witnessScript ||\n        redeemFromFinalWitnessScript(input.finalScriptWitness),\n    );\n    const type = result.type === 'raw' ? '' : result.type + '-';\n    const mainType = classifyScript(result.meaningfulScript);\n    return type + mainType;\n  }\n  inputHasPubkey(inputIndex, pubkey) {\n    const input = utils_1.checkForInput(this.data.inputs, inputIndex);\n    return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);\n  }\n  inputHasHDKey(inputIndex, root) {\n    const input = utils_1.checkForInput(this.data.inputs, inputIndex);\n    const derivationIsMine = bip32DerivationIsMine(root);\n    return (\n      !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine)\n    );\n  }\n  outputHasPubkey(outputIndex, pubkey) {\n    const output = utils_1.checkForOutput(this.data.outputs, outputIndex);\n    return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);\n  }\n  outputHasHDKey(outputIndex, root) {\n    const output = utils_1.checkForOutput(this.data.outputs, outputIndex);\n    const derivationIsMine = bip32DerivationIsMine(root);\n    return (\n      !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine)\n    );\n  }\n  validateSignaturesOfAllInputs() {\n    utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one\n    const results = range(this.data.inputs.length).map(idx =>\n      this.validateSignaturesOfInput(idx),\n    );\n    return results.reduce((final, res) => res === true && final, true);\n  }\n  validateSignaturesOfInput(inputIndex, pubkey) {\n    const input = this.data.inputs[inputIndex];\n    const partialSig = (input || {}).partialSig;\n    if (!input || !partialSig || partialSig.length < 1)\n      throw new Error('No signatures to validate');\n    const mySigs = pubkey\n      ? partialSig.filter(sig => sig.pubkey.equals(pubkey))\n      : partialSig;\n    if (mySigs.length < 1) throw new Error('No signatures for this pubkey');\n    const results = [];\n    let hashCache;\n    let scriptCache;\n    let sighashCache;\n    for (const pSig of mySigs) {\n      const sig = bscript.signature.decode(pSig.signature);\n      const { hash, script } =\n        sighashCache !== sig.hashType\n          ? getHashForSig(\n              inputIndex,\n              Object.assign({}, input, { sighashType: sig.hashType }),\n              this.__CACHE,\n              true,\n            )\n          : { hash: hashCache, script: scriptCache };\n      sighashCache = sig.hashType;\n      hashCache = hash;\n      scriptCache = script;\n      checkScriptForPubkey(pSig.pubkey, script, 'verify');\n      const keypair = ecpair_1.fromPublicKey(pSig.pubkey);\n      results.push(keypair.verify(hash, sig.signature));\n    }\n    return results.every(res => res === true);\n  }\n  signAllInputsHD(\n    hdKeyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n      throw new Error('Need HDSigner to sign input');\n    }\n    const results = [];\n    for (const i of range(this.data.inputs.length)) {\n      try {\n        this.signInputHD(i, hdKeyPair, sighashTypes);\n        results.push(true);\n      } catch (err) {\n        results.push(false);\n      }\n    }\n    if (results.every(v => v === false)) {\n      throw new Error('No inputs were signed');\n    }\n    return this;\n  }\n  signAllInputsHDAsync(\n    hdKeyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n        return reject(new Error('Need HDSigner to sign input'));\n      }\n      const results = [];\n      const promises = [];\n      for (const i of range(this.data.inputs.length)) {\n        promises.push(\n          this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(\n            () => {\n              results.push(true);\n            },\n            () => {\n              results.push(false);\n            },\n          ),\n        );\n      }\n      return Promise.all(promises).then(() => {\n        if (results.every(v => v === false)) {\n          return reject(new Error('No inputs were signed'));\n        }\n        resolve();\n      });\n    });\n  }\n  signInputHD(\n    inputIndex,\n    hdKeyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n      throw new Error('Need HDSigner to sign input');\n    }\n    const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);\n    signers.forEach(signer => this.signInput(inputIndex, signer, sighashTypes));\n    return this;\n  }\n  signInputHDAsync(\n    inputIndex,\n    hdKeyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n        return reject(new Error('Need HDSigner to sign input'));\n      }\n      const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);\n      const promises = signers.map(signer =>\n        this.signInputAsync(inputIndex, signer, sighashTypes),\n      );\n      return Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n  signAllInputs(\n    keyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    if (!keyPair || !keyPair.publicKey)\n      throw new Error('Need Signer to sign input');\n    // TODO: Add a pubkey/pubkeyhash cache to each input\n    // as input information is added, then eventually\n    // optimize this method.\n    const results = [];\n    for (const i of range(this.data.inputs.length)) {\n      try {\n        this.signInput(i, keyPair, sighashTypes);\n        results.push(true);\n      } catch (err) {\n        results.push(false);\n      }\n    }\n    if (results.every(v => v === false)) {\n      throw new Error('No inputs were signed');\n    }\n    return this;\n  }\n  signAllInputsAsync(\n    keyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!keyPair || !keyPair.publicKey)\n        return reject(new Error('Need Signer to sign input'));\n      // TODO: Add a pubkey/pubkeyhash cache to each input\n      // as input information is added, then eventually\n      // optimize this method.\n      const results = [];\n      const promises = [];\n      for (const [i] of this.data.inputs.entries()) {\n        promises.push(\n          this.signInputAsync(i, keyPair, sighashTypes).then(\n            () => {\n              results.push(true);\n            },\n            () => {\n              results.push(false);\n            },\n          ),\n        );\n      }\n      return Promise.all(promises).then(() => {\n        if (results.every(v => v === false)) {\n          return reject(new Error('No inputs were signed'));\n        }\n        resolve();\n      });\n    });\n  }\n  signInput(\n    inputIndex,\n    keyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    if (!keyPair || !keyPair.publicKey)\n      throw new Error('Need Signer to sign input');\n    const { hash, sighashType } = getHashAndSighashType(\n      this.data.inputs,\n      inputIndex,\n      keyPair.publicKey,\n      this.__CACHE,\n      sighashTypes,\n    );\n    const partialSig = [\n      {\n        pubkey: keyPair.publicKey,\n        signature: bscript.signature.encode(keyPair.sign(hash), sighashType),\n      },\n    ];\n    this.data.updateInput(inputIndex, { partialSig });\n    return this;\n  }\n  signInputAsync(\n    inputIndex,\n    keyPair,\n    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],\n  ) {\n    return Promise.resolve().then(() => {\n      if (!keyPair || !keyPair.publicKey)\n        throw new Error('Need Signer to sign input');\n      const { hash, sighashType } = getHashAndSighashType(\n        this.data.inputs,\n        inputIndex,\n        keyPair.publicKey,\n        this.__CACHE,\n        sighashTypes,\n      );\n      return Promise.resolve(keyPair.sign(hash)).then(signature => {\n        const partialSig = [\n          {\n            pubkey: keyPair.publicKey,\n            signature: bscript.signature.encode(signature, sighashType),\n          },\n        ];\n        this.data.updateInput(inputIndex, { partialSig });\n      });\n    });\n  }\n  toBuffer() {\n    checkCache(this.__CACHE);\n    return this.data.toBuffer();\n  }\n  toHex() {\n    checkCache(this.__CACHE);\n    return this.data.toHex();\n  }\n  toBase64() {\n    checkCache(this.__CACHE);\n    return this.data.toBase64();\n  }\n  updateGlobal(updateData) {\n    this.data.updateGlobal(updateData);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    if (updateData.witnessScript) checkInvalidP2WSH(updateData.witnessScript);\n    this.data.updateInput(inputIndex, updateData);\n    if (updateData.nonWitnessUtxo) {\n      addNonWitnessTxCache(\n        this.__CACHE,\n        this.data.inputs[inputIndex],\n        inputIndex,\n      );\n    }\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    this.data.updateOutput(outputIndex, updateData);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    this.data.addUnknownKeyValToGlobal(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    this.data.addUnknownKeyValToInput(inputIndex, keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    this.data.addUnknownKeyValToOutput(outputIndex, keyVal);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    this.data.clearFinalizedInput(inputIndex);\n    return this;\n  }\n}\nexports.Psbt = Psbt;\n/**\n * This function is needed to pass to the bip174 base class's fromBuffer.\n * It takes the \"transaction buffer\" portion of the psbt buffer and returns a\n * Transaction (From the bip174 library) interface.\n */\nconst transactionFromBuffer = buffer => new PsbtTransaction(buffer);\n/**\n * This class implements the Transaction interface from bip174 library.\n * It contains a bitcoinjs-lib Transaction object.\n */\nclass PsbtTransaction {\n  constructor(buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {\n    this.tx = transaction_1.Transaction.fromBuffer(buffer);\n    checkTxEmpty(this.tx);\n    Object.defineProperty(this, 'tx', {\n      enumerable: false,\n      writable: true,\n    });\n  }\n  getInputOutputCounts() {\n    return {\n      inputCount: this.tx.ins.length,\n      outputCount: this.tx.outs.length,\n    };\n  }\n  addInput(input) {\n    if (\n      input.hash === undefined ||\n      input.index === undefined ||\n      (!Buffer.isBuffer(input.hash) && typeof input.hash !== 'string') ||\n      typeof input.index !== 'number'\n    ) {\n      throw new Error('Error adding input.');\n    }\n    const hash =\n      typeof input.hash === 'string'\n        ? bufferutils_1.reverseBuffer(Buffer.from(input.hash, 'hex'))\n        : input.hash;\n    this.tx.addInput(hash, input.index, input.sequence);\n  }\n  addOutput(output) {\n    if (\n      output.script === undefined ||\n      output.value === undefined ||\n      !Buffer.isBuffer(output.script) ||\n      typeof output.value !== 'number'\n    ) {\n      throw new Error('Error adding output.');\n    }\n    this.tx.addOutput(output.script, output.value);\n  }\n  toBuffer() {\n    return this.tx.toBuffer();\n  }\n}\nfunction canFinalize(input, script, scriptType) {\n  switch (scriptType) {\n    case 'pubkey':\n    case 'pubkeyhash':\n    case 'witnesspubkeyhash':\n      return hasSigs(1, input.partialSig);\n    case 'multisig':\n      const p2ms = payments.p2ms({ output: script });\n      return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);\n    default:\n      return false;\n  }\n}\nfunction checkCache(cache) {\n  if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {\n    throw new Error('Not BIP174 compliant, can not export');\n  }\n}\nfunction hasSigs(neededSigs, partialSig, pubkeys) {\n  if (!partialSig) return false;\n  let sigs;\n  if (pubkeys) {\n    sigs = pubkeys\n      .map(pkey => {\n        const pubkey = ecpair_1.fromPublicKey(pkey, { compressed: true })\n          .publicKey;\n        return partialSig.find(pSig => pSig.pubkey.equals(pubkey));\n      })\n      .filter(v => !!v);\n  } else {\n    sigs = partialSig;\n  }\n  if (sigs.length > neededSigs) throw new Error('Too many signatures');\n  return sigs.length === neededSigs;\n}\nfunction isFinalized(input) {\n  return !!input.finalScriptSig || !!input.finalScriptWitness;\n}\nfunction isPaymentFactory(payment) {\n  return script => {\n    try {\n      payment({ output: script });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n}\nconst isP2MS = isPaymentFactory(payments.p2ms);\nconst isP2PK = isPaymentFactory(payments.p2pk);\nconst isP2PKH = isPaymentFactory(payments.p2pkh);\nconst isP2WPKH = isPaymentFactory(payments.p2wpkh);\nconst isP2WSHScript = isPaymentFactory(payments.p2wsh);\nconst isP2SHScript = isPaymentFactory(payments.p2sh);\nfunction bip32DerivationIsMine(root) {\n  return d => {\n    if (!d.masterFingerprint.equals(root.fingerprint)) return false;\n    if (!root.derivePath(d.path).publicKey.equals(d.pubkey)) return false;\n    return true;\n  };\n}\nfunction check32Bit(num) {\n  if (\n    typeof num !== 'number' ||\n    num !== Math.floor(num) ||\n    num > 0xffffffff ||\n    num < 0\n  ) {\n    throw new Error('Invalid 32 bit integer');\n  }\n}\nfunction checkFees(psbt, cache, opts) {\n  const feeRate = cache.__FEE_RATE || psbt.getFeeRate();\n  const vsize = cache.__EXTRACTED_TX.virtualSize();\n  const satoshis = feeRate * vsize;\n  if (feeRate >= opts.maximumFeeRate) {\n    throw new Error(\n      `Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in ` +\n        `fees, which is ${feeRate} satoshi per byte for a transaction ` +\n        `with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per ` +\n        `byte). Use setMaximumFeeRate method to raise your threshold, or ` +\n        `pass true to the first arg of extractTransaction.`,\n    );\n  }\n}\nfunction checkInputsForPartialSig(inputs, action) {\n  inputs.forEach(input => {\n    let throws = false;\n    let pSigs = [];\n    if ((input.partialSig || []).length === 0) {\n      if (!input.finalScriptSig && !input.finalScriptWitness) return;\n      pSigs = getPsigsFromInputFinalScripts(input);\n    } else {\n      pSigs = input.partialSig;\n    }\n    pSigs.forEach(pSig => {\n      const { hashType } = bscript.signature.decode(pSig.signature);\n      const whitelist = [];\n      const isAnyoneCanPay =\n        hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;\n      if (isAnyoneCanPay) whitelist.push('addInput');\n      const hashMod = hashType & 0x1f;\n      switch (hashMod) {\n        case transaction_1.Transaction.SIGHASH_ALL:\n          break;\n        case transaction_1.Transaction.SIGHASH_SINGLE:\n        case transaction_1.Transaction.SIGHASH_NONE:\n          whitelist.push('addOutput');\n          whitelist.push('setInputSequence');\n          break;\n      }\n      if (whitelist.indexOf(action) === -1) {\n        throws = true;\n      }\n    });\n    if (throws) {\n      throw new Error('Can not modify transaction, signatures exist.');\n    }\n  });\n}\nfunction checkPartialSigSighashes(input) {\n  if (!input.sighashType || !input.partialSig) return;\n  const { partialSig, sighashType } = input;\n  partialSig.forEach(pSig => {\n    const { hashType } = bscript.signature.decode(pSig.signature);\n    if (sighashType !== hashType) {\n      throw new Error('Signature sighash does not match input sighash type');\n    }\n  });\n}\nfunction checkScriptForPubkey(pubkey, script, action) {\n  if (!pubkeyInScript(pubkey, script)) {\n    throw new Error(\n      `Can not ${action} for this input with the key ${pubkey.toString('hex')}`,\n    );\n  }\n}\nfunction checkTxEmpty(tx) {\n  const isEmpty = tx.ins.every(\n    input =>\n      input.script &&\n      input.script.length === 0 &&\n      input.witness &&\n      input.witness.length === 0,\n  );\n  if (!isEmpty) {\n    throw new Error('Format Error: Transaction ScriptSigs are not empty');\n  }\n}\nfunction checkTxForDupeIns(tx, cache) {\n  tx.ins.forEach(input => {\n    checkTxInputCache(cache, input);\n  });\n}\nfunction checkTxInputCache(cache, input) {\n  const key =\n    bufferutils_1.reverseBuffer(Buffer.from(input.hash)).toString('hex') +\n    ':' +\n    input.index;\n  if (cache.__TX_IN_CACHE[key]) throw new Error('Duplicate input detected.');\n  cache.__TX_IN_CACHE[key] = 1;\n}\nfunction scriptCheckerFactory(payment, paymentScriptName) {\n  return (inputIndex, scriptPubKey, redeemScript, ioType) => {\n    const redeemScriptOutput = payment({\n      redeem: { output: redeemScript },\n    }).output;\n    if (!scriptPubKey.equals(redeemScriptOutput)) {\n      throw new Error(\n        `${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`,\n      );\n    }\n  };\n}\nconst checkRedeemScript = scriptCheckerFactory(payments.p2sh, 'Redeem script');\nconst checkWitnessScript = scriptCheckerFactory(\n  payments.p2wsh,\n  'Witness script',\n);\nfunction getTxCacheValue(key, name, inputs, c) {\n  if (!inputs.every(isFinalized))\n    throw new Error(`PSBT must be finalized to calculate ${name}`);\n  if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;\n  if (key === '__FEE' && c.__FEE) return c.__FEE;\n  let tx;\n  let mustFinalize = true;\n  if (c.__EXTRACTED_TX) {\n    tx = c.__EXTRACTED_TX;\n    mustFinalize = false;\n  } else {\n    tx = c.__TX.clone();\n  }\n  inputFinalizeGetAmts(inputs, tx, c, mustFinalize);\n  if (key === '__FEE_RATE') return c.__FEE_RATE;\n  else if (key === '__FEE') return c.__FEE;\n}\nfunction getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {\n  const scriptType = classifyScript(script);\n  if (!canFinalize(input, script, scriptType))\n    throw new Error(`Can not finalize input #${inputIndex}`);\n  return prepareFinalScripts(\n    script,\n    scriptType,\n    input.partialSig,\n    isSegwit,\n    isP2SH,\n    isP2WSH,\n  );\n}\nfunction prepareFinalScripts(\n  script,\n  scriptType,\n  partialSig,\n  isSegwit,\n  isP2SH,\n  isP2WSH,\n) {\n  let finalScriptSig;\n  let finalScriptWitness;\n  // Wow, the payments API is very handy\n  const payment = getPayment(script, scriptType, partialSig);\n  const p2wsh = !isP2WSH ? null : payments.p2wsh({ redeem: payment });\n  const p2sh = !isP2SH ? null : payments.p2sh({ redeem: p2wsh || payment });\n  if (isSegwit) {\n    if (p2wsh) {\n      finalScriptWitness = witnessStackToScriptWitness(p2wsh.witness);\n    } else {\n      finalScriptWitness = witnessStackToScriptWitness(payment.witness);\n    }\n    if (p2sh) {\n      finalScriptSig = p2sh.input;\n    }\n  } else {\n    if (p2sh) {\n      finalScriptSig = p2sh.input;\n    } else {\n      finalScriptSig = payment.input;\n    }\n  }\n  return {\n    finalScriptSig,\n    finalScriptWitness,\n  };\n}\nfunction getHashAndSighashType(\n  inputs,\n  inputIndex,\n  pubkey,\n  cache,\n  sighashTypes,\n) {\n  const input = utils_1.checkForInput(inputs, inputIndex);\n  const { hash, sighashType, script } = getHashForSig(\n    inputIndex,\n    input,\n    cache,\n    false,\n    sighashTypes,\n  );\n  checkScriptForPubkey(pubkey, script, 'sign');\n  return {\n    hash,\n    sighashType,\n  };\n}\nfunction getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {\n  const unsignedTx = cache.__TX;\n  const sighashType =\n    input.sighashType || transaction_1.Transaction.SIGHASH_ALL;\n  if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {\n    const str = sighashTypeToString(sighashType);\n    throw new Error(\n      `Sighash type is not allowed. Retry the sign method passing the ` +\n        `sighashTypes array of whitelisted types. Sighash type: ${str}`,\n    );\n  }\n  let hash;\n  let prevout;\n  if (input.nonWitnessUtxo) {\n    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(\n      cache,\n      input,\n      inputIndex,\n    );\n    const prevoutHash = unsignedTx.ins[inputIndex].hash;\n    const utxoHash = nonWitnessUtxoTx.getHash();\n    // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout\n    if (!prevoutHash.equals(utxoHash)) {\n      throw new Error(\n        `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`,\n      );\n    }\n    const prevoutIndex = unsignedTx.ins[inputIndex].index;\n    prevout = nonWitnessUtxoTx.outs[prevoutIndex];\n  } else if (input.witnessUtxo) {\n    prevout = input.witnessUtxo;\n  } else {\n    throw new Error('Need a Utxo input item for signing');\n  }\n  const { meaningfulScript, type } = getMeaningfulScript(\n    prevout.script,\n    inputIndex,\n    'input',\n    input.redeemScript,\n    input.witnessScript,\n  );\n  if (['p2sh-p2wsh', 'p2wsh'].indexOf(type) >= 0) {\n    hash = unsignedTx.hashForWitnessV0(\n      inputIndex,\n      meaningfulScript,\n      prevout.value,\n      sighashType,\n    );\n  } else if (isP2WPKH(meaningfulScript)) {\n    // P2WPKH uses the P2PKH template for prevoutScript when signing\n    const signingScript = payments.p2pkh({ hash: meaningfulScript.slice(2) })\n      .output;\n    hash = unsignedTx.hashForWitnessV0(\n      inputIndex,\n      signingScript,\n      prevout.value,\n      sighashType,\n    );\n  } else {\n    // non-segwit\n    if (\n      input.nonWitnessUtxo === undefined &&\n      cache.__UNSAFE_SIGN_NONSEGWIT === false\n    )\n      throw new Error(\n        `Input #${inputIndex} has witnessUtxo but non-segwit script: ` +\n          `${meaningfulScript.toString('hex')}`,\n      );\n    if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)\n      console.warn(\n        'Warning: Signing non-segwit inputs without the full parent transaction ' +\n          'means there is a chance that a miner could feed you incorrect information ' +\n          'to trick you into paying large fees. This behavior is the same as the old ' +\n          'TransactionBuilder class when signing non-segwit scripts. You are not ' +\n          'able to export this Psbt with toBuffer|toBase64|toHex since it is not ' +\n          'BIP174 compliant.\\n*********************\\nPROCEED WITH CAUTION!\\n' +\n          '*********************',\n      );\n    hash = unsignedTx.hashForSignature(\n      inputIndex,\n      meaningfulScript,\n      sighashType,\n    );\n  }\n  return {\n    script: meaningfulScript,\n    sighashType,\n    hash,\n  };\n}\nfunction getPayment(script, scriptType, partialSig) {\n  let payment;\n  switch (scriptType) {\n    case 'multisig':\n      const sigs = getSortedSigs(script, partialSig);\n      payment = payments.p2ms({\n        output: script,\n        signatures: sigs,\n      });\n      break;\n    case 'pubkey':\n      payment = payments.p2pk({\n        output: script,\n        signature: partialSig[0].signature,\n      });\n      break;\n    case 'pubkeyhash':\n      payment = payments.p2pkh({\n        output: script,\n        pubkey: partialSig[0].pubkey,\n        signature: partialSig[0].signature,\n      });\n      break;\n    case 'witnesspubkeyhash':\n      payment = payments.p2wpkh({\n        output: script,\n        pubkey: partialSig[0].pubkey,\n        signature: partialSig[0].signature,\n      });\n      break;\n  }\n  return payment;\n}\nfunction getPsigsFromInputFinalScripts(input) {\n  const scriptItems = !input.finalScriptSig\n    ? []\n    : bscript.decompile(input.finalScriptSig) || [];\n  const witnessItems = !input.finalScriptWitness\n    ? []\n    : bscript.decompile(input.finalScriptWitness) || [];\n  return scriptItems\n    .concat(witnessItems)\n    .filter(item => {\n      return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);\n    })\n    .map(sig => ({ signature: sig }));\n}\nfunction getScriptFromInput(inputIndex, input, cache) {\n  const unsignedTx = cache.__TX;\n  const res = {\n    script: null,\n    isSegwit: false,\n    isP2SH: false,\n    isP2WSH: false,\n  };\n  res.isP2SH = !!input.redeemScript;\n  res.isP2WSH = !!input.witnessScript;\n  if (input.witnessScript) {\n    res.script = input.witnessScript;\n  } else if (input.redeemScript) {\n    res.script = input.redeemScript;\n  } else {\n    if (input.nonWitnessUtxo) {\n      const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(\n        cache,\n        input,\n        inputIndex,\n      );\n      const prevoutIndex = unsignedTx.ins[inputIndex].index;\n      res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;\n    } else if (input.witnessUtxo) {\n      res.script = input.witnessUtxo.script;\n    }\n  }\n  if (input.witnessScript || isP2WPKH(res.script)) {\n    res.isSegwit = true;\n  }\n  return res;\n}\nfunction getSignersFromHD(inputIndex, inputs, hdKeyPair) {\n  const input = utils_1.checkForInput(inputs, inputIndex);\n  if (!input.bip32Derivation || input.bip32Derivation.length === 0) {\n    throw new Error('Need bip32Derivation to sign with HD');\n  }\n  const myDerivations = input.bip32Derivation\n    .map(bipDv => {\n      if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {\n        return bipDv;\n      } else {\n        return;\n      }\n    })\n    .filter(v => !!v);\n  if (myDerivations.length === 0) {\n    throw new Error(\n      'Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint',\n    );\n  }\n  const signers = myDerivations.map(bipDv => {\n    const node = hdKeyPair.derivePath(bipDv.path);\n    if (!bipDv.pubkey.equals(node.publicKey)) {\n      throw new Error('pubkey did not match bip32Derivation');\n    }\n    return node;\n  });\n  return signers;\n}\nfunction getSortedSigs(script, partialSig) {\n  const p2ms = payments.p2ms({ output: script });\n  // for each pubkey in order of p2ms script\n  return p2ms.pubkeys\n    .map(pk => {\n      // filter partialSig array by pubkey being equal\n      return (\n        partialSig.filter(ps => {\n          return ps.pubkey.equals(pk);\n        })[0] || {}\n      ).signature;\n      // Any pubkey without a match will return undefined\n      // this last filter removes all the undefined items in the array.\n    })\n    .filter(v => !!v);\n}\nfunction scriptWitnessToWitnessStack(buffer) {\n  let offset = 0;\n  function readSlice(n) {\n    offset += n;\n    return buffer.slice(offset - n, offset);\n  }\n  function readVarInt() {\n    const vi = varuint.decode(buffer, offset);\n    offset += varuint.decode.bytes;\n    return vi;\n  }\n  function readVarSlice() {\n    return readSlice(readVarInt());\n  }\n  function readVector() {\n    const count = readVarInt();\n    const vector = [];\n    for (let i = 0; i < count; i++) vector.push(readVarSlice());\n    return vector;\n  }\n  return readVector();\n}\nfunction sighashTypeToString(sighashType) {\n  let text =\n    sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY\n      ? 'SIGHASH_ANYONECANPAY | '\n      : '';\n  const sigMod = sighashType & 0x1f;\n  switch (sigMod) {\n    case transaction_1.Transaction.SIGHASH_ALL:\n      text += 'SIGHASH_ALL';\n      break;\n    case transaction_1.Transaction.SIGHASH_SINGLE:\n      text += 'SIGHASH_SINGLE';\n      break;\n    case transaction_1.Transaction.SIGHASH_NONE:\n      text += 'SIGHASH_NONE';\n      break;\n  }\n  return text;\n}\nfunction witnessStackToScriptWitness(witness) {\n  let buffer = Buffer.allocUnsafe(0);\n  function writeSlice(slice) {\n    buffer = Buffer.concat([buffer, Buffer.from(slice)]);\n  }\n  function writeVarInt(i) {\n    const currentLen = buffer.length;\n    const varintLen = varuint.encodingLength(i);\n    buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\n    varuint.encode(i, buffer, currentLen);\n  }\n  function writeVarSlice(slice) {\n    writeVarInt(slice.length);\n    writeSlice(slice);\n  }\n  function writeVector(vector) {\n    writeVarInt(vector.length);\n    vector.forEach(writeVarSlice);\n  }\n  writeVector(witness);\n  return buffer;\n}\nfunction addNonWitnessTxCache(cache, input, inputIndex) {\n  cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;\n  const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);\n  cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;\n  const self = cache;\n  const selfIndex = inputIndex;\n  delete input.nonWitnessUtxo;\n  Object.defineProperty(input, 'nonWitnessUtxo', {\n    enumerable: true,\n    get() {\n      const buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];\n      const txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];\n      if (buf !== undefined) {\n        return buf;\n      } else {\n        const newBuf = txCache.toBuffer();\n        self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;\n        return newBuf;\n      }\n    },\n    set(data) {\n      self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;\n    },\n  });\n}\nfunction inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {\n  let inputAmount = 0;\n  inputs.forEach((input, idx) => {\n    if (mustFinalize && input.finalScriptSig)\n      tx.ins[idx].script = input.finalScriptSig;\n    if (mustFinalize && input.finalScriptWitness) {\n      tx.ins[idx].witness = scriptWitnessToWitnessStack(\n        input.finalScriptWitness,\n      );\n    }\n    if (input.witnessUtxo) {\n      inputAmount += input.witnessUtxo.value;\n    } else if (input.nonWitnessUtxo) {\n      const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);\n      const vout = tx.ins[idx].index;\n      const out = nwTx.outs[vout];\n      inputAmount += out.value;\n    }\n  });\n  const outputAmount = tx.outs.reduce((total, o) => total + o.value, 0);\n  const fee = inputAmount - outputAmount;\n  if (fee < 0) {\n    throw new Error('Outputs are spending more than Inputs');\n  }\n  const bytes = tx.virtualSize();\n  cache.__FEE = fee;\n  cache.__EXTRACTED_TX = tx;\n  cache.__FEE_RATE = Math.floor(fee / bytes);\n}\nfunction nonWitnessUtxoTxFromCache(cache, input, inputIndex) {\n  const c = cache.__NON_WITNESS_UTXO_TX_CACHE;\n  if (!c[inputIndex]) {\n    addNonWitnessTxCache(cache, input, inputIndex);\n  }\n  return c[inputIndex];\n}\nfunction getScriptFromUtxo(inputIndex, input, cache) {\n  if (input.witnessUtxo !== undefined) {\n    return input.witnessUtxo.script;\n  } else if (input.nonWitnessUtxo !== undefined) {\n    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(\n      cache,\n      input,\n      inputIndex,\n    );\n    return nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index].script;\n  } else {\n    throw new Error(\"Can't find pubkey in input without Utxo data\");\n  }\n}\nfunction pubkeyInInput(pubkey, input, inputIndex, cache) {\n  const script = getScriptFromUtxo(inputIndex, input, cache);\n  const { meaningfulScript } = getMeaningfulScript(\n    script,\n    inputIndex,\n    'input',\n    input.redeemScript,\n    input.witnessScript,\n  );\n  return pubkeyInScript(pubkey, meaningfulScript);\n}\nfunction pubkeyInOutput(pubkey, output, outputIndex, cache) {\n  const script = cache.__TX.outs[outputIndex].script;\n  const { meaningfulScript } = getMeaningfulScript(\n    script,\n    outputIndex,\n    'output',\n    output.redeemScript,\n    output.witnessScript,\n  );\n  return pubkeyInScript(pubkey, meaningfulScript);\n}\nfunction redeemFromFinalScriptSig(finalScript) {\n  if (!finalScript) return;\n  const decomp = bscript.decompile(finalScript);\n  if (!decomp) return;\n  const lastItem = decomp[decomp.length - 1];\n  if (\n    !Buffer.isBuffer(lastItem) ||\n    isPubkeyLike(lastItem) ||\n    isSigLike(lastItem)\n  )\n    return;\n  const sDecomp = bscript.decompile(lastItem);\n  if (!sDecomp) return;\n  return lastItem;\n}\nfunction redeemFromFinalWitnessScript(finalScript) {\n  if (!finalScript) return;\n  const decomp = scriptWitnessToWitnessStack(finalScript);\n  const lastItem = decomp[decomp.length - 1];\n  if (isPubkeyLike(lastItem)) return;\n  const sDecomp = bscript.decompile(lastItem);\n  if (!sDecomp) return;\n  return lastItem;\n}\nfunction isPubkeyLike(buf) {\n  return buf.length === 33 && bscript.isCanonicalPubKey(buf);\n}\nfunction isSigLike(buf) {\n  return bscript.isCanonicalScriptSignature(buf);\n}\nfunction getMeaningfulScript(\n  script,\n  index,\n  ioType,\n  redeemScript,\n  witnessScript,\n) {\n  const isP2SH = isP2SHScript(script);\n  const isP2SHP2WSH = isP2SH && redeemScript && isP2WSHScript(redeemScript);\n  const isP2WSH = isP2WSHScript(script);\n  if (isP2SH && redeemScript === undefined)\n    throw new Error('scriptPubkey is P2SH but redeemScript missing');\n  if ((isP2WSH || isP2SHP2WSH) && witnessScript === undefined)\n    throw new Error(\n      'scriptPubkey or redeemScript is P2WSH but witnessScript missing',\n    );\n  let meaningfulScript;\n  if (isP2SHP2WSH) {\n    meaningfulScript = witnessScript;\n    checkRedeemScript(index, script, redeemScript, ioType);\n    checkWitnessScript(index, redeemScript, witnessScript, ioType);\n    checkInvalidP2WSH(meaningfulScript);\n  } else if (isP2WSH) {\n    meaningfulScript = witnessScript;\n    checkWitnessScript(index, script, witnessScript, ioType);\n    checkInvalidP2WSH(meaningfulScript);\n  } else if (isP2SH) {\n    meaningfulScript = redeemScript;\n    checkRedeemScript(index, script, redeemScript, ioType);\n  } else {\n    meaningfulScript = script;\n  }\n  return {\n    meaningfulScript,\n    type: isP2SHP2WSH\n      ? 'p2sh-p2wsh'\n      : isP2SH\n      ? 'p2sh'\n      : isP2WSH\n      ? 'p2wsh'\n      : 'raw',\n  };\n}\nfunction checkInvalidP2WSH(script) {\n  if (isP2WPKH(script) || isP2SHScript(script)) {\n    throw new Error('P2WPKH or P2SH can not be contained within P2WSH');\n  }\n}\nfunction pubkeyInScript(pubkey, script) {\n  const pubkeyHash = crypto_1.hash160(pubkey);\n  const decompiled = bscript.decompile(script);\n  if (decompiled === null) throw new Error('Unknown script error');\n  return decompiled.some(element => {\n    if (typeof element === 'number') return false;\n    return element.equals(pubkey) || element.equals(pubkeyHash);\n  });\n}\nfunction classifyScript(script) {\n  if (isP2WPKH(script)) return 'witnesspubkeyhash';\n  if (isP2PKH(script)) return 'pubkeyhash';\n  if (isP2MS(script)) return 'multisig';\n  if (isP2PK(script)) return 'pubkey';\n  return 'nonstandard';\n}\nfunction range(n) {\n  return [...Array(n).keys()];\n}\n"]},"metadata":{},"sourceType":"script"}