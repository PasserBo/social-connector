{"ast":null,"code":"// ** React Imports\nimport{useState,useEffect}from'react';// ** Third Party Components\nimport classnames from'classnames';// ** Reactstrap Imports\nimport{Button}from'reactstrap';// ** Styles\nimport'./ripple-button.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const RippleButton=_ref=>{let{className,children,onClick,...rest}=_ref;// ** States\nconst[mounted,setMounted]=useState(false);const[isRippling,setIsRippling]=useState(false);const[coords,setCoords]=useState({x:-1,y:-1});// ** Toggle mounted on mount & unmount\nuseEffect(()=>{setMounted(true);return()=>setMounted(false);},[]);// ** Check for coords and set ripple\nuseEffect(()=>{if(mounted){if(coords.x!==-1&&coords.y!==-1){setIsRippling(true);setTimeout(()=>setIsRippling(false),500);}else{setIsRippling(false);}}},[coords]);// ** Reset Coords on ripple end\nuseEffect(()=>{if(mounted){if(!isRippling)setCoords({x:-1,y:-1});}},[isRippling]);return/*#__PURE__*/_jsxs(Button,{className:classnames('waves-effect',{[className]:className}),onClick:e=>{const rect=e.target.getBoundingClientRect();setCoords({x:e.clientX-rect.left,y:e.clientY-rect.top});if(onClick){onClick(e);}},...rest,children:[children,isRippling?/*#__PURE__*/_jsx(\"span\",{className:\"waves-ripple\",style:{left:coords.x,top:coords.y}}):null]});};// ** PropTypes\nButton.Ripple=RippleButton;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/bitfari-dev/www/src/@core/components/ripple-button/index.js"],"names":["useState","useEffect","classnames","Button","RippleButton","className","children","onClick","rest","mounted","setMounted","isRippling","setIsRippling","coords","setCoords","x","y","setTimeout","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","Ripple"],"mappings":"AAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA;AACA,OAASC,MAAT,KAAuB,YAAvB,CAEA;AACA,MAAO,sBAAP,C,wFAEA,KAAMC,CAAAA,YAAY,CAAG,MAA+C,IAA9C,CAAEC,SAAF,CAAaC,QAAb,CAAuBC,OAAvB,CAAgC,GAAGC,IAAnC,CAA8C,MAClE;AACA,KAAM,CAACC,OAAD,CAAUC,UAAV,EAAwBV,QAAQ,CAAC,KAAD,CAAtC,CACA,KAAM,CAACW,UAAD,CAAaC,aAAb,EAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CACA,KAAM,CAACa,MAAD,CAASC,SAAT,EAAsBd,QAAQ,CAAC,CAAEe,CAAC,CAAE,CAAC,CAAN,CAASC,CAAC,CAAE,CAAC,CAAb,CAAD,CAApC,CAEA;AACAf,SAAS,CAAC,IAAM,CACdS,UAAU,CAAC,IAAD,CAAV,CACA,MAAO,IAAMA,UAAU,CAAC,KAAD,CAAvB,CACD,CAHQ,CAGN,EAHM,CAAT,CAKA;AACAT,SAAS,CAAC,IAAM,CACd,GAAIQ,OAAJ,CAAa,CACX,GAAII,MAAM,CAACE,CAAP,GAAa,CAAC,CAAd,EAAmBF,MAAM,CAACG,CAAP,GAAa,CAAC,CAArC,CAAwC,CACtCJ,aAAa,CAAC,IAAD,CAAb,CACAK,UAAU,CAAC,IAAML,aAAa,CAAC,KAAD,CAApB,CAA6B,GAA7B,CAAV,CACD,CAHD,IAGO,CACLA,aAAa,CAAC,KAAD,CAAb,CACD,CACF,CACF,CATQ,CASN,CAACC,MAAD,CATM,CAAT,CAWA;AACAZ,SAAS,CAAC,IAAM,CACd,GAAIQ,OAAJ,CAAa,CACX,GAAI,CAACE,UAAL,CAAiBG,SAAS,CAAC,CAAEC,CAAC,CAAE,CAAC,CAAN,CAASC,CAAC,CAAE,CAAC,CAAb,CAAD,CAAT,CAClB,CACF,CAJQ,CAIN,CAACL,UAAD,CAJM,CAAT,CAMA,mBACE,MAAC,MAAD,EACE,SAAS,CAAET,UAAU,CAAC,cAAD,CAAiB,CACpC,CAACG,SAAD,EAAaA,SADuB,CAAjB,CADvB,CAIE,OAAO,CAAEa,CAAC,EAAI,CACZ,KAAMC,CAAAA,IAAI,CAAGD,CAAC,CAACE,MAAF,CAASC,qBAAT,EAAb,CACAP,SAAS,CAAC,CAAEC,CAAC,CAAEG,CAAC,CAACI,OAAF,CAAYH,IAAI,CAACI,IAAtB,CAA4BP,CAAC,CAAEE,CAAC,CAACM,OAAF,CAAYL,IAAI,CAACM,GAAhD,CAAD,CAAT,CACA,GAAIlB,OAAJ,CAAa,CACXA,OAAO,CAACW,CAAD,CAAP,CACD,CACF,CAVH,IAWMV,IAXN,WAaGF,QAbH,CAcGK,UAAU,cACT,aACE,SAAS,CAAC,cADZ,CAEE,KAAK,CAAE,CACLY,IAAI,CAAEV,MAAM,CAACE,CADR,CAELU,GAAG,CAAEZ,MAAM,CAACG,CAFP,CAFT,EADS,CAQP,IAtBN,GADF,CA0BD,CAzDD,CA2DA;AAKAb,MAAM,CAACuB,MAAP,CAAgBtB,YAAhB","sourcesContent":["// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport './ripple-button.scss'\r\n\r\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\r\n  // ** States\r\n  const [mounted, setMounted] = useState(false)\r\n  const [isRippling, setIsRippling] = useState(false)\r\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\r\n\r\n  // ** Toggle mounted on mount & unmount\r\n  useEffect(() => {\r\n    setMounted(true)\r\n    return () => setMounted(false)\r\n  }, [])\r\n\r\n  // ** Check for coords and set ripple\r\n  useEffect(() => {\r\n    if (mounted) {\r\n      if (coords.x !== -1 && coords.y !== -1) {\r\n        setIsRippling(true)\r\n        setTimeout(() => setIsRippling(false), 500)\r\n      } else {\r\n        setIsRippling(false)\r\n      }\r\n    }\r\n  }, [coords])\r\n\r\n  // ** Reset Coords on ripple end\r\n  useEffect(() => {\r\n    if (mounted) {\r\n      if (!isRippling) setCoords({ x: -1, y: -1 })\r\n    }\r\n  }, [isRippling])\r\n\r\n  return (\r\n    <Button\r\n      className={classnames('waves-effect', {\r\n        [className]: className\r\n      })}\r\n      onClick={e => {\r\n        const rect = e.target.getBoundingClientRect()\r\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\r\n        if (onClick) {\r\n          onClick(e)\r\n        }\r\n      }}\r\n      {...rest}\r\n    >\r\n      {children}\r\n      {isRippling ? (\r\n        <span\r\n          className='waves-ripple'\r\n          style={{\r\n            left: coords.x,\r\n            top: coords.y\r\n          }}\r\n        ></span>\r\n      ) : null}\r\n    </Button>\r\n  )\r\n}\r\n\r\n// ** PropTypes\r\nRippleButton.propTypes = {\r\n  ...Button.propTypes\r\n}\r\n\r\nButton.Ripple = RippleButton\r\n"]},"metadata":{},"sourceType":"module"}