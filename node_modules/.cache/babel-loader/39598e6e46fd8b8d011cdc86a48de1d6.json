{"ast":null,"code":"import _objectSpread from\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _defineProperty from\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"label\",\"hideIcon\",\"showIcon\",\"visible\",\"className\",\"htmlFor\",\"placeholder\",\"iconSize\",\"inputClassName\",\"invalid\"];// ** React Imports\nimport{Fragment,useState,forwardRef}from'react';// ** Third Party Components\nimport classnames from'classnames';import{Eye,EyeOff}from'react-feather';// ** Reactstrap Imports\nimport{InputGroup,Input,InputGroupText,Label}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InputPasswordToggle=/*#__PURE__*/forwardRef(function(props,ref){var _classnames;// ** Props\nvar label=props.label,hideIcon=props.hideIcon,showIcon=props.showIcon,visible=props.visible,className=props.className,htmlFor=props.htmlFor,placeholder=props.placeholder,iconSize=props.iconSize,inputClassName=props.inputClassName,invalid=props.invalid,rest=_objectWithoutProperties(props,_excluded);// ** State\nvar _useState=useState(visible),_useState2=_slicedToArray(_useState,2),inputVisibility=_useState2[0],setInputVisibility=_useState2[1];// ** Renders Icon Based On Visibility\nvar renderIcon=function renderIcon(){var size=iconSize?iconSize:14;if(inputVisibility===false){return hideIcon?hideIcon:/*#__PURE__*/_jsx(Eye,{size:size});}else{return showIcon?showIcon:/*#__PURE__*/_jsx(EyeOff,{size:size});}};return/*#__PURE__*/_jsxs(Fragment,{children:[label?/*#__PURE__*/_jsx(Label,{className:\"form-label\",for:htmlFor,children:label}):null,/*#__PURE__*/_jsxs(InputGroup,{className:classnames((_classnames={},_defineProperty(_classnames,className,className),_defineProperty(_classnames,'is-invalid',invalid),_classnames)),children:[/*#__PURE__*/_jsx(Input,_objectSpread(_objectSpread({ref:ref,invalid:invalid,type:inputVisibility===false?'password':'text',placeholder:placeholder?placeholder:'············',className:classnames(_defineProperty({},inputClassName,inputClassName))/*eslint-disable */},label&&htmlFor?{id:htmlFor}:{}),rest)),/*#__PURE__*/_jsx(InputGroupText,{className:\"cursor-pointer\",onClick:function onClick(){return setInputVisibility(!inputVisibility);},children:renderIcon()})]})]});});export default InputPasswordToggle;// ** PropTypes\n// ** Default Props\nInputPasswordToggle.defaultProps={visible:false};","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/@core/components/input-password-toggle/index.js"],"names":["Fragment","useState","forwardRef","classnames","Eye","EyeOff","InputGroup","Input","InputGroupText","Label","InputPasswordToggle","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","inputVisibility","setInputVisibility","renderIcon","size","id","defaultProps"],"mappings":"2zBAAA;AACA,OAASA,QAAT,CAAmBC,QAAnB,CAA6BC,UAA7B,KAA+C,OAA/C,CAEA;AAEA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,GAAT,CAAcC,MAAd,KAA4B,eAA5B,CAEA;AACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,CAA4CC,KAA5C,KAAyD,YAAzD,C,wFAEA,GAAMC,CAAAA,mBAAmB,cAAGR,UAAU,CAAC,SAACS,KAAD,CAAQC,GAAR,CAAgB,iBACrD;AACA,GACEC,CAAAA,KADF,CAYIF,KAZJ,CACEE,KADF,CAEEC,QAFF,CAYIH,KAZJ,CAEEG,QAFF,CAGEC,QAHF,CAYIJ,KAZJ,CAGEI,QAHF,CAIEC,OAJF,CAYIL,KAZJ,CAIEK,OAJF,CAKEC,SALF,CAYIN,KAZJ,CAKEM,SALF,CAMEC,OANF,CAYIP,KAZJ,CAMEO,OANF,CAOEC,WAPF,CAYIR,KAZJ,CAOEQ,WAPF,CAQEC,QARF,CAYIT,KAZJ,CAQES,QARF,CASEC,cATF,CAYIV,KAZJ,CASEU,cATF,CAUEC,OAVF,CAYIX,KAZJ,CAUEW,OAVF,CAWKC,IAXL,0BAYIZ,KAZJ,YAcA;AACA,cAA8CV,QAAQ,CAACe,OAAD,CAAtD,wCAAOQ,eAAP,eAAwBC,kBAAxB,eAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAMC,CAAAA,IAAI,CAAGP,QAAQ,CAAGA,QAAH,CAAc,EAAnC,CAEA,GAAII,eAAe,GAAK,KAAxB,CAA+B,CAC7B,MAAOV,CAAAA,QAAQ,CAAGA,QAAH,cAAc,KAAC,GAAD,EAAK,IAAI,CAAEa,IAAX,EAA7B,CACD,CAFD,IAEO,CACL,MAAOZ,CAAAA,QAAQ,CAAGA,QAAH,cAAc,KAAC,MAAD,EAAQ,IAAI,CAAEY,IAAd,EAA7B,CACD,CACF,CARD,CAUA,mBACE,MAAC,QAAD,YACGd,KAAK,cACJ,KAAC,KAAD,EAAO,SAAS,CAAC,YAAjB,CAA8B,GAAG,CAAEK,OAAnC,UACGL,KADH,EADI,CAIF,IALN,cAME,MAAC,UAAD,EACE,SAAS,CAAEV,UAAU,6CAClBc,SADkB,CACNA,SADM,8BAEnB,YAFmB,CAELK,OAFK,eADvB,wBAME,KAAC,KAAD,8BACE,GAAG,CAAEV,GADP,CAEE,OAAO,CAAEU,OAFX,CAGE,IAAI,CAAEE,eAAe,GAAK,KAApB,CAA4B,UAA5B,CAAyC,MAHjD,CAIE,WAAW,CAAEL,WAAW,CAAGA,WAAH,CAAiB,cAJ3C,CAKE,SAAS,CAAEhB,UAAU,oBAClBkB,cADkB,CACDA,cADC,EAGrB,mBARF,EASOR,KAAK,EAAIK,OAAT,CACD,CACEU,EAAE,CAAEV,OADN,CADC,CAID,EAbN,EAcMK,IAdN,EANF,cAuBE,KAAC,cAAD,EAAgB,SAAS,CAAC,gBAA1B,CAA2C,OAAO,CAAE,yBAAME,CAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAxB,EAApD,UACGE,UAAU,EADb,EAvBF,GANF,GADF,CAoCD,CAlEqC,CAAtC,CAoEA,cAAehB,CAAAA,mBAAf,CAEA;AAwBA;AACAA,mBAAmB,CAACmB,YAApB,CAAmC,CACjCb,OAAO,CAAE,KADwB,CAAnC","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"]},"metadata":{},"sourceType":"module"}