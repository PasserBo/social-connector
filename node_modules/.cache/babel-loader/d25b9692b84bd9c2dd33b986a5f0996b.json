{"ast":null,"code":"/*eslint-disable */\nimport mock from '../mock';\nconst date = new Date();\nconst nextDay = new Date(new Date().getTime() + 24 * 60 * 60 * 1000); // prettier-ignore\n\nconst nextMonth = date.getMonth() === 11 ? new Date(date.getFullYear() + 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() + 1, 1); // prettier-ignore\n\nconst prevMonth = date.getMonth() === 11 ? new Date(date.getFullYear() - 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() - 1, 1);\nconst data = {\n  events: []\n}; // ------------------------------------------------\n// GET: Return calendar events\n// ------------------------------------------------\n\nmock.onGet('/apps/book/events').reply(config => {\n  // Get requested calendars as Array\n  const calendars = config.calendars;\n  return [200, data.events.filter(event => calendars.includes(event.extendedProps.calendar))];\n}); // ------------------------------------------------\n// POST: Add new event\n// ------------------------------------------------\n\nmock.onPost('/apps/book/add-event').reply(config => {\n  // Get event from post data\n  const {\n    event\n  } = JSON.parse(config.data);\n  const {\n    length\n  } = data.events;\n  let lastIndex = 0;\n\n  if (length) {\n    lastIndex = data.events[length - 1].id;\n  }\n\n  event.id = lastIndex + 1;\n  data.events.push(event);\n  return [201, {\n    event\n  }];\n}); // ------------------------------------------------\n// POST: Update Event\n// ------------------------------------------------\n\nmock.onPost('/apps/book/update-event').reply(config => {\n  const {\n    event: eventData\n  } = JSON.parse(config.data); // Convert Id to number\n\n  eventData.id = Number(eventData.id);\n  const event = data.events.find(ev => ev.id === Number(eventData.id));\n  Object.assign(event, eventData);\n  return [200, {\n    event\n  }];\n}); // ------------------------------------------------\n// DELETE: Remove Event\n// ------------------------------------------------\n\nmock.onDelete('/apps/book/remove-event').reply(config => {\n  // Get event id from URL\n  let {\n    id\n  } = config; // Convert Id to number\n\n  const eventId = Number(id);\n  const eventIndex = data.events.findIndex(ev => ev.id === eventId);\n  data.events.splice(eventIndex, 1);\n  return [200];\n});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/@local-db/apps/book.js"],"names":["mock","date","Date","nextDay","getTime","nextMonth","getMonth","getFullYear","prevMonth","data","events","onGet","reply","config","calendars","filter","event","includes","extendedProps","calendar","onPost","JSON","parse","length","lastIndex","id","push","eventData","Number","find","ev","Object","assign","onDelete","eventId","eventIndex","findIndex","splice"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport mock from '../mock'\n\nconst date = new Date()\nconst nextDay = new Date(new Date().getTime() + 24 * 60 * 60 * 1000)\n\n// prettier-ignore\nconst nextMonth = date.getMonth() === 11 ? new Date(date.getFullYear() + 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() + 1, 1)\n// prettier-ignore\nconst prevMonth = date.getMonth() === 11 ? new Date(date.getFullYear() - 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() - 1, 1)\n\nconst data = {\n  events: [\n\n  ]\n}\n\n// ------------------------------------------------\n// GET: Return calendar events\n// ------------------------------------------------\nmock.onGet('/apps/book/events').reply(config => {\n  // Get requested calendars as Array\n  const calendars = config.calendars\n\n  return [200, data.events.filter(event => calendars.includes(event.extendedProps.calendar))]\n})\n\n// ------------------------------------------------\n// POST: Add new event\n// ------------------------------------------------\nmock.onPost('/apps/book/add-event').reply(config => {\n  // Get event from post data\n  const { event } = JSON.parse(config.data)\n\n  const { length } = data.events\n  let lastIndex = 0\n  if (length) {\n    lastIndex = data.events[length - 1].id\n  }\n  event.id = lastIndex + 1\n\n  data.events.push(event)\n\n  return [201, { event }]\n})\n\n// ------------------------------------------------\n// POST: Update Event\n// ------------------------------------------------\nmock.onPost('/apps/book/update-event').reply(config => {\n  const { event: eventData } = JSON.parse(config.data)\n\n  // Convert Id to number\n  eventData.id = Number(eventData.id)\n\n  const event = data.events.find(ev => ev.id === Number(eventData.id))\n  Object.assign(event, eventData)\n\n  return [200, { event }]\n})\n\n// ------------------------------------------------\n// DELETE: Remove Event\n// ------------------------------------------------\nmock.onDelete('/apps/book/remove-event').reply(config => {\n  // Get event id from URL\n  let { id } = config\n\n  // Convert Id to number\n  const eventId = Number(id)\n\n  const eventIndex = data.events.findIndex(ev => ev.id === eventId)\n  data.events.splice(eventIndex, 1)\n  return [200]\n})\n"]},"metadata":{},"sourceType":"module"}