{"ast":null,"code":"import _slicedToArray from\"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// ** React Imports\nimport{useState}from'react';// ** Reactstrap Imports\nimport{Accordion,AccordionBody,AccordionHeader,AccordionItem}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AccordionControlled=function AccordionControlled(){// ** State\nvar _useState=useState('1'),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var toggle=function toggle(id){open===id?setOpen():setOpen(id);};return/*#__PURE__*/_jsxs(Accordion,{open:open,toggle:toggle,children:[/*#__PURE__*/_jsxs(AccordionItem,{children:[/*#__PURE__*/_jsx(AccordionHeader,{targetId:\"1\",children:\"Accordion Item 1\"}),/*#__PURE__*/_jsxs(AccordionBody,{accordionId:\"1\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",' ',/*#__PURE__*/_jsx(\"code\",{children:\"<AccordionBody>\"}),\", though the transition does limit overflow.\"]})]}),/*#__PURE__*/_jsxs(AccordionItem,{children:[/*#__PURE__*/_jsx(AccordionHeader,{targetId:\"2\",children:\"Accordion Item 2\"}),/*#__PURE__*/_jsxs(AccordionBody,{accordionId:\"2\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",' ',/*#__PURE__*/_jsx(\"code\",{children:\"<AccordionBody>\"}),\", though the transition does limit overflow.\"]})]}),/*#__PURE__*/_jsxs(AccordionItem,{children:[/*#__PURE__*/_jsx(AccordionHeader,{targetId:\"3\",children:\"Accordion Item 3\"}),/*#__PURE__*/_jsxs(AccordionBody,{accordionId:\"3\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",' ',/*#__PURE__*/_jsx(\"code\",{children:\"<AccordionBody>\"}),\", though the transition does limit overflow.\"]})]})]});};export default AccordionControlled;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/views/components/accordion/AccordionControlled.js"],"names":["useState","Accordion","AccordionBody","AccordionHeader","AccordionItem","AccordionControlled","open","setOpen","toggle","id"],"mappings":"yKAAA;AACA,OAASA,QAAT,KAAyB,OAAzB,CAEA;AACA,OAASC,SAAT,CAAoBC,aAApB,CAAmCC,eAAnC,CAAoDC,aAApD,KAAyE,YAAzE,C,wFAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChC;AACA,cAAwBL,QAAQ,CAAC,GAAD,CAAhC,wCAAOM,IAAP,eAAaC,OAAb,eAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,EAAE,CAAI,CACnBH,IAAI,GAAKG,EAAT,CAAcF,OAAO,EAArB,CAA0BA,OAAO,CAACE,EAAD,CAAjC,CACD,CAFD,CAIA,mBACE,MAAC,SAAD,EAAW,IAAI,CAAEH,IAAjB,CAAuB,MAAM,CAAEE,MAA/B,wBACE,MAAC,aAAD,yBACE,KAAC,eAAD,EAAiB,QAAQ,CAAC,GAA1B,8BADF,cAEE,MAAC,aAAD,EAAe,WAAW,CAAC,GAA3B,wBACE,oEADF,sJAEsG,GAFtG,cAGE,yCAHF,kDAFF,GADF,cASE,MAAC,aAAD,yBACE,KAAC,eAAD,EAAiB,QAAQ,CAAC,GAA1B,8BADF,cAEE,MAAC,aAAD,EAAe,WAAW,CAAC,GAA3B,wBACE,qEADF,sJAEsG,GAFtG,cAGE,yCAHF,kDAFF,GATF,cAiBE,MAAC,aAAD,yBACE,KAAC,eAAD,EAAiB,QAAQ,CAAC,GAA1B,8BADF,cAEE,MAAC,aAAD,EAAe,WAAW,CAAC,GAA3B,wBACE,oEADF,sJAEsG,GAFtG,cAGE,yCAHF,kDAFF,GAjBF,GADF,CA4BD,CApCD,CAsCA,cAAeH,CAAAA,mBAAf","sourcesContent":["// ** React Imports\r\nimport { useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\r\n\r\nconst AccordionControlled = () => {\r\n  // ** State\r\n  const [open, setOpen] = useState('1')\r\n\r\n  const toggle = id => {\r\n    open === id ? setOpen() : setOpen(id)\r\n  }\r\n\r\n  return (\r\n    <Accordion open={open} toggle={toggle}>\r\n      <AccordionItem>\r\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\r\n        <AccordionBody accordionId='1'>\r\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\r\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\r\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\r\n        </AccordionBody>\r\n      </AccordionItem>\r\n      <AccordionItem>\r\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\r\n        <AccordionBody accordionId='2'>\r\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\r\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\r\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\r\n        </AccordionBody>\r\n      </AccordionItem>\r\n      <AccordionItem>\r\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\r\n        <AccordionBody accordionId='3'>\r\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\r\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\r\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\r\n        </AccordionBody>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default AccordionControlled\r\n"]},"metadata":{},"sourceType":"module"}