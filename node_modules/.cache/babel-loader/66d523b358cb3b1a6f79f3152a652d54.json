{"ast":null,"code":"/*eslint-disable */import mock from'../mock';const date=new Date();const nextDay=new Date(new Date().getTime()+24*60*60*1000);// prettier-ignore\nconst nextMonth=date.getMonth()===11?new Date(date.getFullYear()+1,0,1):new Date(date.getFullYear(),date.getMonth()+1,1);// prettier-ignore\nconst prevMonth=date.getMonth()===11?new Date(date.getFullYear()-1,0,1):new Date(date.getFullYear(),date.getMonth()-1,1);const data={events:[{id:1,url:'',title:'Place your Ad Here!',start:date,end:nextDay,allDay:true,extendedProps:{calendar:'Business'}}]};// ------------------------------------------------\n// GET: Return calendar events\n// ------------------------------------------------\nmock.onGet('/apps/book/events').reply(config=>{// Get requested calendars as Array\nconst calendars=config.calendars;return[200,data.events.filter(event=>calendars.includes(event.extendedProps.calendar))];});// ------------------------------------------------\n// POST: Add new event\n// ------------------------------------------------\nmock.onPost('/apps/book/add-event').reply(config=>{// Get event from post data\nconst{event}=JSON.parse(config.data);const{length}=data.events;let lastIndex=0;if(length){lastIndex=data.events[length-1].id;}event.id=lastIndex+1;data.events.push(event);return[201,{event}];});// ------------------------------------------------\n// POST: Update Event\n// ------------------------------------------------\nmock.onPost('/apps/book/update-event').reply(config=>{const{event:eventData}=JSON.parse(config.data);// Convert Id to number\neventData.id=Number(eventData.id);const event=data.events.find(ev=>ev.id===Number(eventData.id));Object.assign(event,eventData);return[200,{event}];});// ------------------------------------------------\n// DELETE: Remove Event\n// ------------------------------------------------\nmock.onDelete('/apps/book/remove-event').reply(config=>{// Get event id from URL\nlet{id}=config;// Convert Id to number\nconst eventId=Number(id);const eventIndex=data.events.findIndex(ev=>ev.id===eventId);data.events.splice(eventIndex,1);return[200];});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/@local-db/apps/book.js"],"names":["mock","date","Date","nextDay","getTime","nextMonth","getMonth","getFullYear","prevMonth","data","events","id","url","title","start","end","allDay","extendedProps","calendar","onGet","reply","config","calendars","filter","event","includes","onPost","JSON","parse","length","lastIndex","push","eventData","Number","find","ev","Object","assign","onDelete","eventId","eventIndex","findIndex","splice"],"mappings":"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","sourcesContent":["/*eslint-disable */\nimport mock from '../mock'\n\nconst date = new Date()\nconst nextDay = new Date(new Date().getTime() + 24 * 60 * 60 * 1000)\n\n// prettier-ignore\nconst nextMonth = date.getMonth() === 11 ? new Date(date.getFullYear() + 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() + 1, 1)\n// prettier-ignore\nconst prevMonth = date.getMonth() === 11 ? new Date(date.getFullYear() - 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() - 1, 1)\n\nconst data = {\n  events: [\n    {\n      id: 1,\n      url: '',\n      title: 'Place your Ad Here!',\n      start: date,\n      end: nextDay,\n      allDay: true,\n      extendedProps: {\n        calendar: 'Business'\n      }\n      }\n  ]\n}\n\n// ------------------------------------------------\n// GET: Return calendar events\n// ------------------------------------------------\nmock.onGet('/apps/book/events').reply(config => {\n  // Get requested calendars as Array\n  const calendars = config.calendars\n\n  return [200, data.events.filter(event => calendars.includes(event.extendedProps.calendar))]\n})\n\n// ------------------------------------------------\n// POST: Add new event\n// ------------------------------------------------\nmock.onPost('/apps/book/add-event').reply(config => {\n  // Get event from post data\n  const { event } = JSON.parse(config.data)\n\n  const { length } = data.events\n  let lastIndex = 0\n  if (length) {\n    lastIndex = data.events[length - 1].id\n  }\n  event.id = lastIndex + 1\n\n  data.events.push(event)\n\n  return [201, { event }]\n})\n\n// ------------------------------------------------\n// POST: Update Event\n// ------------------------------------------------\nmock.onPost('/apps/book/update-event').reply(config => {\n  const { event: eventData } = JSON.parse(config.data)\n\n  // Convert Id to number\n  eventData.id = Number(eventData.id)\n\n  const event = data.events.find(ev => ev.id === Number(eventData.id))\n  Object.assign(event, eventData)\n\n  return [200, { event }]\n})\n\n// ------------------------------------------------\n// DELETE: Remove Event\n// ------------------------------------------------\nmock.onDelete('/apps/book/remove-event').reply(config => {\n  // Get event id from URL\n  let { id } = config\n\n  // Convert Id to number\n  const eventId = Number(id)\n\n  const eventIndex = data.events.findIndex(ev => ev.id === eventId)\n  data.events.splice(eventIndex, 1)\n  return [200]\n})\n"]},"metadata":{},"sourceType":"module"}