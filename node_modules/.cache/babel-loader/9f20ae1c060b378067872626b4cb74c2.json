{"ast":null,"code":"import { objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useContext, useCallback, createContext, useReducer } from 'react';\nimport { Portal } from '../portal/index.esm.js';\nimport { Toaster } from './toaster.esm.js';\nvar toastCounter = 0;\nvar ToastControllerContext = /*#__PURE__*/createContext(null);\nvar QUEUE_TOAST = 0;\nvar REMOVE_TOAST = 1;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case QUEUE_TOAST:\n      {\n        return _objectSpread2({}, state, {\n          toasts: [].concat(state.toasts, [action.payload])\n        });\n      }\n\n    case REMOVE_TOAST:\n      {\n        var toasts = state.toasts.filter(function (_ref) {\n          var id = _ref.id;\n          return id !== action.payload;\n        });\n        return _objectSpread2({}, state, {\n          toasts: toasts\n        });\n      }\n  }\n\n  return state;\n}\n\nvar InternalToastProvider = function InternalToastProvider(_ref2) {\n  var children = _ref2.children;\n\n  var _useReducer = useReducer(reducer, {\n    toasts: []\n  }),\n      toasts = _useReducer[0].toasts,\n      dispatch = _useReducer[1];\n\n  var addToast = useCallback(function (props) {\n    return dispatch({\n      type: QUEUE_TOAST,\n      payload: props\n    });\n  }, []);\n  var removeToast = useCallback(function (id) {\n    return dispatch({\n      type: REMOVE_TOAST,\n      payload: id\n    });\n  }, []);\n  return React__default.createElement(ToastControllerContext.Provider, {\n    value: addToast\n  }, children, React__default.createElement(Portal, null, React__default.createElement(Toaster, {\n    toasts: toasts,\n    removeToast: removeToast\n  })));\n};\n\nvar ToastProvider = function ToastProvider(_ref3) {\n  var children = _ref3.children;\n  var currentContext = useContext(ToastControllerContext);\n\n  if (currentContext !== null) {\n    return React__default.createElement(React__default.Fragment, null, children);\n  }\n\n  return React__default.createElement(InternalToastProvider, null, children);\n};\n\nvar useToast = function useToast() {\n  var addToast = useContext(ToastControllerContext);\n\n  if (addToast === null) {\n    throw new Error('No \"ToastProvider\" configured');\n  }\n\n  return useCallback(function (props) {\n    return addToast(_objectSpread2({}, props, {\n      id: \"\" + toastCounter++\n    }));\n  }, [addToast]);\n};\n\nexport { ToastProvider, useToast };","map":{"version":3,"sources":["../../src/toast/toast-context.tsx"],"names":["toastCounter","ToastControllerContext","createContext","QUEUE_TOAST","REMOVE_TOAST","action","toasts","state","id","InternalToastProvider","children","dispatch","useReducer","addToast","useCallback","type","payload","props","removeToast","value","ToastProvider","currentContext","useContext","React","useToast"],"mappings":";;;;AAOA,IAAIA,YAAY,GAAhB,CAAA;AAEA,IAAMC,sBAAsB,GAAA,aAAGC,aAAa,CAA5C,IAA4C,CAA5C;AAEA,IAAMC,WAAW,GAAjB,CAAA;AACA,IAAMC,YAAY,GAAlB,CAAA;;AAMA,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAAA;AACE,UAAQC,MAAM,CAAd,IAAA;AACE,SAAA,WAAA;AAAkB;AAChB,eAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEC,UAAAA,MAAM,EAAA,GAAA,MAAA,CAAMC,KAAK,CAAX,MAAA,EAAA,CAAoBF,MAAM,CAA1B,OAAA,CAAA;AAFR,SAAA,CAAA;AAID;;AAED,SAAA,YAAA;AAAmB;AACjB,YAAMC,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,MAAA,CAAoB,UAAA,IAAA,EAAA;AAAA,cAAGE,EAAH,GAAA,IAAA,CAAA,EAAA;AAAA,iBAAYA,EAAE,KAAKH,MAAM,CAAzB,OAAA;AAAnC,SAAe,CAAf;AAEA,eAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEC,UAAAA,MAAM,EAANA;AAFF,SAAA,CAAA;AAID;AAfH;;AAkBA,SAAA,KAAA;AACD;;AAED,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,KAAA,EAAA;MAAGC,QAAAA,GAAAA,KAAAA,CAAAA,Q;;oBACAE,UAAU,CAAA,OAAA,EAAU;AACjDN,IAAAA,MAAM,EAAE;AADyC,GAAV,C;MAAhCA,MAAAA,GAAAA,WAAAA,CAAAA,CAAAA,CAAAA,CAAAA,M;MAAUK,QAAAA,GAAAA,WAAAA,CAAAA,CAAAA,C;;AAInB,MAAME,QAAQ,GAAGC,WAAW,CAC1B,UAAA,KAAA,EAAA;AAAA,WAAsBH,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAN,WAAA;AAAqBC,MAAAA,OAAO,EAAEC;AAA9B,KAAD,CAA9B;AAD0B,GAAA,EAA5B,EAA4B,CAA5B;AAKA,MAAMC,WAAW,GAAGJ,WAAW,CAC7B,UAAA,EAAA,EAAA;AAAA,WAAgBH,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAN,YAAA;AAAsBC,MAAAA,OAAO,EAAER;AAA/B,KAAD,CAAxB;AAD6B,GAAA,EAA/B,EAA+B,CAA/B;AAKA,SACE,cAAA,CAAA,aAAA,CAACP,sBAAsB,CAAvB,QAAA,EAAA;AAAiCkB,IAAAA,KAAK,EAAEN;AAAxC,GAAA,EAAA,QAAA,EAEE,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACE,cAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAASP,IAAAA,MAAM,EAAEA,MAAjB;AAAyBY,IAAAA,WAAW,EAAEA;AAAtC,GAAA,CADF,CAFF,CADF;AAfF,CAAA;;IAyBaE,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAA;MAAGV,QAAAA,GAAAA,KAAAA,CAAAA,Q;AAC9B,MAAMW,cAAc,GAAGC,UAAU,CAAjC,sBAAiC,CAAjC;;AAEA,MAAID,cAAc,KAAlB,IAAA,EAA6B;AAE3B,WAAOE,cAAAA,CAAAA,aAAAA,CAAAA,cAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAP,QAAOA,CAAP;AACD;;AAED,SAAOA,cAAAA,CAAAA,aAAAA,CAAAA,qBAAAA,EAAAA,IAAAA,EAAP,QAAOA,CAAP;AACD,C;;IAEYC,QAAQ,GAAG,SAAXA,QAAW,GAAA;AACtB,MAAMX,QAAQ,GAAGS,UAAU,CAA3B,sBAA2B,CAA3B;;AAEA,MAAIT,QAAQ,KAAZ,IAAA,EAAuB;AACrB,UAAM,IAAA,KAAA,CAAN,+BAAM,CAAN;AACD;;AAED,SAAOC,WAAW,CAChB,UAAA,KAAA,EAAA;AAAA,WAAkCD,QAAQ,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAaL,MAAAA,EAAE,EAAA,KAAKR,YAAY;AAAhC,KAAA,CAAA,CAA1C;AADgB,GAAA,EAEhB,CAFF,QAEE,CAFgB,CAAlB;AAID,C","sourcesContent":["import React, { useContext, createContext, useReducer, useCallback } from 'react';\n\nimport { Portal } from '../portal';\nimport { Toaster } from './toaster';\n\nimport { ToastType, AddToast, ToastState, ToastProviderProps } from './types';\n\nlet toastCounter = 0;\n\nconst ToastControllerContext = createContext<AddToast | null>(null);\n\nconst QUEUE_TOAST = 0;\nconst REMOVE_TOAST = 1;\n\ntype Actions =\n  | { type: typeof QUEUE_TOAST; payload: ToastType }\n  | { type: typeof REMOVE_TOAST; payload: string };\n\nfunction reducer(state: ToastState, action: Actions): ToastState {\n  switch (action.type) {\n    case QUEUE_TOAST: {\n      return {\n        ...state,\n        toasts: [...state.toasts, action.payload],\n      };\n    }\n\n    case REMOVE_TOAST: {\n      const toasts = state.toasts.filter(({ id }) => id !== action.payload);\n\n      return {\n        ...state,\n        toasts,\n      };\n    }\n  }\n\n  return state;\n}\n\nconst InternalToastProvider = ({ children }: ToastProviderProps) => {\n  const [{ toasts }, dispatch] = useReducer(reducer, {\n    toasts: [],\n  });\n\n  const addToast = useCallback(\n    (props: ToastType) => dispatch({ type: QUEUE_TOAST, payload: props }),\n    []\n  );\n\n  const removeToast = useCallback(\n    (id: string) => dispatch({ type: REMOVE_TOAST, payload: id }),\n    []\n  );\n\n  return (\n    <ToastControllerContext.Provider value={addToast}>\n      {children}\n      <Portal>\n        <Toaster toasts={toasts} removeToast={removeToast} />\n      </Portal>\n    </ToastControllerContext.Provider>\n  );\n};\n\nexport const ToastProvider = ({ children }: ToastProviderProps) => {\n  const currentContext = useContext(ToastControllerContext);\n\n  if (currentContext !== null) {\n    // Bail early as \"ToastProvider\" is already setup\n    return <>{children}</>;\n  }\n\n  return <InternalToastProvider>{children}</InternalToastProvider>;\n};\n\nexport const useToast = () => {\n  const addToast = useContext(ToastControllerContext);\n\n  if (addToast === null) {\n    throw new Error('No \"ToastProvider\" configured');\n  }\n\n  return useCallback(\n    (props: Omit<ToastType, 'id'>) => addToast({ ...props, id: `${toastCounter++}` }),\n    [addToast]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}