{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\nfunction useLatestRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport { useLatestRef };","map":{"version":3,"sources":["../../src/hooks/use-latest-ref.ts"],"names":["useLatestRef","value","ref","React"],"mappings":";;SAQgBA,Y,CAAgBC,K,EAAAA;AAC9B,MAAMC,GAAG,GAAGC,MAAAA,CAAZ,KAAYA,CAAZ;AAEAA,EAAAA,SAAAA,CAAgB,YAAA;AACdD,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA,EAEG,CAFHA,KAEG,CAFHA,CAAAA;AAIA,SAAA,GAAA;AACD","sourcesContent":["import * as React from 'react';\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n */\nexport function useLatestRef<T>(value: T) {\n  const ref = React.useRef(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}