{"ast":null,"code":"import mock from'../mock';/*eslint-disable */var previousDay=new Date(new Date().getTime()-24*60*60*1000);var dayBeforePreviousDay=new Date(new Date().getTime()-24*60*60*1000*2);var data={profileUser:{id:11,avatar:require('@src/assets/images/portrait/small/avatar-s-8.jpg').default,fullName:'InstaFriend - Blackboy',role:'Tour Guide',about:'Hi! Blackboy here. I can help you with place navigation, location tips and tricks and screen validation. Just tell me what you need and boom! Tour charge: 10 STX, Location Video charge: 5 STX.',status:'online',settings:{isTwoStepAuthVerificationEnabled:true,isNotificationsOn:false}},contacts:[{id:1,fullName:'FlowerPower',role:'Auditor',about:'Bitfari Auditor, ready to take pictures of your ads running so you can double check foot traffic at any hour of the day. Location Video charge: 7 STX.',avatar:require('@src/assets/images/portrait/small/avatar-s-2.jpg').default,status:'offline'},{id:2,fullName:'VirtualNeighbor',role:'Local Friend',about:'For 5 STX you get 15 mins to ask me anything about the place. General inquiries also welcome. Glad to help!',avatar:require('@src/assets/images/portrait/small/avatar-s-1.jpg').default,status:'busy'}],chats:[{id:1,userId:1,unseenMsgs:0,chat:[{message:'Hi, this is an InstaFriend Preview üëç',time:'Mon Aug 20 2021 07:45:00 GMT+0000 (GMT)',senderId:11},{message:'Bitfari users gather here to talk about the place!',time:'Mon Aug 20 2021 07:45:15 GMT+0000 (GMT)',senderId:2},{message:'They can book tours, gain location insights and even see their ads running in realtime via InstaFriend',time:'Mon Aug 20 2021 07:46:10 GMT+0000 (GMT)',senderId:11},{message:'InstaFriend goes live with the Parra release!!',time:'Mon Dec 11 2018 07:45:15 GMT+0000 (GMT)',senderId:2}]}]};/*eslint-enable */ // ------------------------------------------------\n// GET: Return Chats Contacts and Contacts\n// ------------------------------------------------\nmock.onGet('/apps/chat/chats-and-contacts').reply(function(){var chatsContacts=data.chats.map(function(chat){var contact=data.contacts.find(function(c){return c.id===chat.userId;});contact.chat={id:chat.id,unseenMsgs:chat.unseenMsgs,lastMessage:chat.chat[chat.chat.length-1]};return contact;});var profileUserData={id:data.profileUser.id,avatar:data.profileUser.avatar,fullName:data.profileUser.fullName,status:data.profileUser.status};return[200,{chatsContacts:chatsContacts,contacts:data.contacts,profileUser:profileUserData}];});// ------------------------------------------------\n// GET: Return User Profile\n// ------------------------------------------------\nmock.onGet('/apps/chat/users/profile-user').reply(function(){return[200,data.profileUser];});// ------------------------------------------------\n// GET: Return Single Chat\n// ------------------------------------------------\nmock.onGet('/apps/chat/get-chat').reply(function(config){// Get event id from URL\nvar userId=config.id;//  Convert Id to number\nuserId=Number(userId);var chat=data.chats.find(function(c){return c.id===userId;});if(chat)chat.unseenMsgs=0;var contact=data.contacts.find(function(c){return c.id===userId;});if(contact.chat)contact.chat.unseenMsgs=0;return[200,{chat:chat,contact:contact}];});// ------------------------------------------------\n// POST: Add new chat message\n// ------------------------------------------------\nmock.onPost('/apps/chat/send-msg').reply(function(config){// Get event from post data\nvar _JSON$parse=JSON.parse(config.data),obj=_JSON$parse.obj;var activeChat=data.chats.find(function(chat){return chat.userId===obj.contact.id;});var newMessageData={message:obj.message,time:new Date(),senderId:11};// If there's new chat for user create one\nvar isNewChat=false;if(activeChat===undefined){isNewChat=true;// const { length } = data.chats\n// const lastId = data.chats[length - 1].id\ndata.chats.push({id:obj.contact.id,userId:obj.contact.id,unseenMsgs:0,chat:[newMessageData]});activeChat=data.chats[data.chats.length-1];}else{activeChat.chat.push(newMessageData);}var response={newMessageData:newMessageData,id:obj.contact.id};if(isNewChat)response.chat=activeChat;return[201,{response:response}];});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/src/@fake-db/apps/chat.js"],"names":["mock","previousDay","Date","getTime","dayBeforePreviousDay","data","profileUser","id","avatar","require","default","fullName","role","about","status","settings","isTwoStepAuthVerificationEnabled","isNotificationsOn","contacts","chats","userId","unseenMsgs","chat","message","time","senderId","onGet","reply","chatsContacts","map","contact","find","c","lastMessage","length","profileUserData","config","Number","onPost","JSON","parse","obj","activeChat","newMessageData","isNewChat","undefined","push","response"],"mappings":"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","sourcesContent":["import mock from '../mock'\r\n/*eslint-disable */\r\nconst previousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000)\r\nconst dayBeforePreviousDay = new Date(new Date().getTime() - 24 * 60 * 60 * 1000 * 2)\r\n\r\nconst data = {\r\n  profileUser: {\r\n    id: 11,\r\n    avatar: require('@src/assets/images/portrait/small/avatar-s-8.jpg').default,\r\n    fullName: 'InstaFriend - Blackboy',\r\n    role: 'Tour Guide',\r\n    about:\r\n      'Hi! Blackboy here. I can help you with place navigation, location tips and tricks and screen validation. Just tell me what you need and boom! Tour charge: 10 STX, Location Video charge: 5 STX.',\r\n    status: 'online',\r\n    settings: {\r\n      isTwoStepAuthVerificationEnabled: true,\r\n      isNotificationsOn: false\r\n    }\r\n  },\r\n  contacts: [\r\n    {\r\n      id: 1,\r\n      fullName: 'FlowerPower',\r\n      role: 'Auditor',\r\n      about: 'Bitfari Auditor, ready to take pictures of your ads running so you can double check foot traffic at any hour of the day. Location Video charge: 7 STX.',\r\n\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-2.jpg').default,\r\n      status: 'offline'\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'VirtualNeighbor',\r\n      role: 'Local Friend',\r\n      about:\r\n        'For 5 STX you get 15 mins to ask me anything about the place. General inquiries also welcome. Glad to help!',\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-1.jpg').default,\r\n      status: 'busy'\r\n    }\r\n  ],\r\n  chats: [\r\n    {\r\n      id: 1,\r\n      userId: 1,\r\n      unseenMsgs: 0,\r\n      chat: [\r\n        {\r\n          message: 'Hi, this is an InstaFriend Preview üëç',\r\n          time: 'Mon Aug 20 2021 07:45:00 GMT+0000 (GMT)',\r\n          senderId: 11\r\n        },\r\n        {\r\n          message: 'Bitfari users gather here to talk about the place!',\r\n          time: 'Mon Aug 20 2021 07:45:15 GMT+0000 (GMT)',\r\n          senderId: 2\r\n        },\r\n        {\r\n          message: 'They can book tours, gain location insights and even see their ads running in realtime via InstaFriend',\r\n          time: 'Mon Aug 20 2021 07:46:10 GMT+0000 (GMT)',\r\n          senderId: 11\r\n        },\r\n        {\r\n          message: 'InstaFriend goes live with the Parra release!!',\r\n          time: 'Mon Dec 11 2018 07:45:15 GMT+0000 (GMT)',\r\n          senderId: 2\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n/*eslint-enable */\r\n// ------------------------------------------------\r\n// GET: Return Chats Contacts and Contacts\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/chats-and-contacts').reply(() => {\r\n  const chatsContacts = data.chats.map(chat => {\r\n    const contact = data.contacts.find(c => c.id === chat.userId)\r\n    contact.chat = { id: chat.id, unseenMsgs: chat.unseenMsgs, lastMessage: chat.chat[chat.chat.length - 1] }\r\n    return contact\r\n  })\r\n  const profileUserData = {\r\n    id: data.profileUser.id,\r\n    avatar: data.profileUser.avatar,\r\n    fullName: data.profileUser.fullName,\r\n    status: data.profileUser.status\r\n  }\r\n  return [200, { chatsContacts, contacts: data.contacts, profileUser: profileUserData }]\r\n})\r\n\r\n// ------------------------------------------------\r\n// GET: Return User Profile\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/users/profile-user').reply(() => [200, data.profileUser])\r\n\r\n// ------------------------------------------------\r\n// GET: Return Single Chat\r\n// ------------------------------------------------\r\nmock.onGet('/apps/chat/get-chat').reply(config => {\r\n  // Get event id from URL\r\n\r\n  let userId = config.id\r\n\r\n  //  Convert Id to number\r\n  userId = Number(userId)\r\n\r\n  const chat = data.chats.find(c => c.id === userId)\r\n  if (chat) chat.unseenMsgs = 0\r\n  const contact = data.contacts.find(c => c.id === userId)\r\n  if (contact.chat) contact.chat.unseenMsgs = 0\r\n  return [200, { chat, contact }]\r\n})\r\n\r\n// ------------------------------------------------\r\n// POST: Add new chat message\r\n// ------------------------------------------------\r\nmock.onPost('/apps/chat/send-msg').reply(config => {\r\n  // Get event from post data\r\n  const { obj } = JSON.parse(config.data)\r\n\r\n  let activeChat = data.chats.find(chat => chat.userId === obj.contact.id)\r\n\r\n  const newMessageData = {\r\n    message: obj.message,\r\n    time: new Date(),\r\n    senderId: 11\r\n  }\r\n  // If there's new chat for user create one\r\n  let isNewChat = false\r\n  if (activeChat === undefined) {\r\n    isNewChat = true\r\n\r\n    // const { length } = data.chats\r\n    // const lastId = data.chats[length - 1].id\r\n\r\n    data.chats.push({\r\n      id: obj.contact.id,\r\n      userId: obj.contact.id,\r\n      unseenMsgs: 0,\r\n      chat: [newMessageData]\r\n    })\r\n    activeChat = data.chats[data.chats.length - 1]\r\n  } else {\r\n    activeChat.chat.push(newMessageData)\r\n  }\r\n\r\n  const response = { newMessageData, id: obj.contact.id }\r\n  if (isNewChat) response.chat = activeChat\r\n\r\n  return [201, { response }]\r\n})\r\n"]},"metadata":{},"sourceType":"module"}