{"ast":null,"code":"import { css } from 'styled-components';\nimport Color from 'color';\n\nvar get = function get(color, hue) {\n  return color + \".\" + hue;\n};\n\nvar addOpacity = function addOpacity(color, opacity) {\n  return Color(color).fade(1 - opacity).rgb().string();\n};\n\nvar addWhite = function addWhite(color, opacity) {\n  return Color(color).mix(Color('#fff'), opacity).hex();\n};\n\nvar addBlack = function addBlack(color, opacity) {\n  return Color(color).mix(Color('#000'), opacity).hex();\n};\n\nvar isDarkColor = function isDarkColor(color) {\n  return Color(color).isDark();\n};\n\nvar generateAlphaColors = function generateAlphaColors(color) {\n  return {\n    900: addOpacity(color, 0.92),\n    800: addOpacity(color, 0.8),\n    700: addOpacity(color, 0.6),\n    600: addOpacity(color, 0.48),\n    500: addOpacity(color, 0.38),\n    400: addOpacity(color, 0.24),\n    300: addOpacity(color, 0.16),\n    200: addOpacity(color, 0.12),\n    100: addOpacity(color, 0.08),\n    50: addOpacity(color, 0.04)\n  };\n};\n\nvar colorEmphasis = function colorEmphasis(color, emphasis) {\n  switch (emphasis) {\n    case 'high':\n      return color;\n\n    case 'medium':\n      return generateAlphaColors(color)[700];\n\n    case 'low':\n      return generateAlphaColors(color)[500];\n\n    case 'lowest':\n      return generateAlphaColors(color)[300];\n\n    default:\n      return undefined;\n  }\n};\n\nvar generateStripe = function generateStripe(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? '1rem' : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'rgba(255, 255, 255, 0.15)' : _ref$color;\n  return css([\"background-image:linear-gradient( 45deg,\", \" 25%,transparent 25%,transparent 50%,\", \" 50%,\", \" 75%,transparent 75%,transparent );background-size:\", \" \", \";\"], color, color, color, size, size);\n};\n\nexport { addBlack, addOpacity, addWhite, colorEmphasis, generateAlphaColors, generateStripe, get, isDarkColor };","map":{"version":3,"sources":["../../src/theme/colors-utils.ts"],"names":["get","color","addOpacity","Color","addWhite","addBlack","isDarkColor","generateAlphaColors","colorEmphasis","generateStripe","size","css"],"mappings":";;;IAGaA,GAAG,GAAG,SAANA,GAAM,CAAA,KAAA,EAAA,GAAA,EAAA;AAAA,SAAmCC,KAAnC,GAAA,GAAmCA,GAAnC,GAAA;AAAA,C;;IAENC,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA,OAAA,EAAA;AAAA,SACxBC,KAAK,CAALA,KAAK,CAALA,CAAAA,IAAAA,CACQ,IADRA,OAAAA,EAAAA,GAAAA,GADwB,MACxBA,EADwB;AAAA,C;;IAMbC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA,OAAA,EAAA;AACtB,SAAOD,KAAK,CAALA,KAAK,CAALA,CAAAA,GAAAA,CAAiBA,KAAK,CAAtBA,MAAsB,CAAtBA,EAAAA,OAAAA,EAAP,GAAOA,EAAP;AACD,C;;IAEYE,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA,OAAA,EAAA;AAAA,SACtBF,KAAK,CAALA,KAAK,CAALA,CAAAA,GAAAA,CAAiBA,KAAK,CAAtBA,MAAsB,CAAtBA,EAAAA,OAAAA,EADsB,GACtBA,EADsB;AAAA,C;;IAGXG,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;AAAA,SAAmBH,KAAK,CAALA,KAAK,CAALA,CAAnB,MAAmBA,EAAnB;AAAA,C;;IAEdI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,KAAA,EAAA;AAAA,SAAoB;AACrD,SAAKL,UAAU,CAAA,KAAA,EADsC,IACtC,CADsC;AAErD,SAAKA,UAAU,CAAA,KAAA,EAFsC,GAEtC,CAFsC;AAGrD,SAAKA,UAAU,CAAA,KAAA,EAHsC,GAGtC,CAHsC;AAIrD,SAAKA,UAAU,CAAA,KAAA,EAJsC,IAItC,CAJsC;AAKrD,SAAKA,UAAU,CAAA,KAAA,EALsC,IAKtC,CALsC;AAMrD,SAAKA,UAAU,CAAA,KAAA,EANsC,IAMtC,CANsC;AAOrD,SAAKA,UAAU,CAAA,KAAA,EAPsC,IAOtC,CAPsC;AAQrD,SAAKA,UAAU,CAAA,KAAA,EARsC,IAQtC,CARsC;AASrD,SAAKA,UAAU,CAAA,KAAA,EATsC,IAStC,CATsC;AAUrD,QAAIA,UAAU,CAAA,KAAA,EAAA,IAAA;AAVuC,GAApB;AAAA,C;;IAetBM,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAA,QAAA,EAAA;AAC3B,UAAA,QAAA;AACE,SAAA,MAAA;AACE,aAAA,KAAA;;AACF,SAAA,QAAA;AACE,aAAOD,mBAAmB,CAAnBA,KAAmB,CAAnBA,CAAP,GAAOA,CAAP;;AACF,SAAA,KAAA;AACE,aAAOA,mBAAmB,CAAnBA,KAAmB,CAAnBA,CAAP,GAAOA,CAAP;;AACF,SAAA,QAAA;AACE,aAAOA,mBAAmB,CAAnBA,KAAmB,CAAnBA,CAAP,GAAOA,CAAP;;AACF;AACE,aAAA,SAAA;AAVJ;AAYD,C;;IAEYE,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA;AAAA,MAAA,SAAA,GAAA,IAAA,CAAA,IAAA;AAAA,MAAGC,IAAH,GAAA,SAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,SAAA;AAAA,MAAA,UAAA,GAAA,IAAA,CAAA,KAAA;AAAA,MAAkBT,KAAlB,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,2BAAA,GAAA,UAAA;AAAA,SAA4DU,GAA5D,CAAA,CAAA,0CAAA,EAAA,uCAAA,EAAA,OAAA,EAAA,qDAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAA;AAAA,C","sourcesContent":["import { css } from 'styled-components';\nimport Color from 'color';\n\nexport const get = (color: string, hue: string) => `${color}.${hue}`;\n\nexport const addOpacity = (color: string, opacity: number) =>\n  Color(color)\n    .fade(1 - opacity)\n    .rgb()\n    .string();\n\nexport const addWhite = (color: string, opacity: number) => {\n  return Color(color).mix(Color('#fff'), opacity).hex();\n};\n\nexport const addBlack = (color: string, opacity: number) =>\n  Color(color).mix(Color('#000'), opacity).hex();\n\nexport const isDarkColor = (color: string) => Color(color).isDark();\n\nexport const generateAlphaColors = (color: string) => ({\n  900: addOpacity(color, 0.92),\n  800: addOpacity(color, 0.8),\n  700: addOpacity(color, 0.6),\n  600: addOpacity(color, 0.48),\n  500: addOpacity(color, 0.38),\n  400: addOpacity(color, 0.24),\n  300: addOpacity(color, 0.16),\n  200: addOpacity(color, 0.12),\n  100: addOpacity(color, 0.08),\n  50: addOpacity(color, 0.04),\n});\n\nexport type Emphasis = 'high' | 'medium' | 'low' | 'lowest';\n\nexport const colorEmphasis = (color: string, emphasis: Emphasis) => {\n  switch (emphasis) {\n    case 'high':\n      return color;\n    case 'medium':\n      return generateAlphaColors(color)[700];\n    case 'low':\n      return generateAlphaColors(color)[500];\n    case 'lowest':\n      return generateAlphaColors(color)[300];\n    default:\n      return undefined;\n  }\n};\n\nexport const generateStripe = ({ size = '1rem', color = 'rgba(255, 255, 255, 0.15)' }) => css`\n  background-image: linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  );\n  background-size: ${size} ${size};\n`;\n"]},"metadata":{},"sourceType":"module"}