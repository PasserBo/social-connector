{"ast":null,"code":"import _classCallCheck from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jvledesma/Downloads/vuexy-admin-v8.0.0/react-version/Bootstrap5/full-version/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer } from '@stacks/common';\nimport { SmartBuffer } from 'smart-buffer';\n\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable).filter(function (v) {\n    return typeof v === 'number';\n  });\n  var enumValueSet = new Set(enumValues);\n  return function (value) {\n    return enumValueSet.has(value);\n  };\n}\n\nvar enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n  var checker = enumCheckFunctions.get(enumVariable);\n\n  if (checker !== undefined) {\n    return checker(value);\n  }\n\n  var newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\nexport var BufferReader = /*#__PURE__*/function () {\n  function BufferReader(options) {\n    _classCallCheck(this, BufferReader);\n\n    if (Buffer.isBuffer(options)) {\n      this.smartBuffer = new SmartBuffer({\n        buff: options\n      });\n    } else {\n      this.smartBuffer = new SmartBuffer(options);\n    }\n  }\n\n  _createClass(BufferReader, [{\n    key: \"readBuffer\",\n    value: function readBuffer(length) {\n      return this.smartBuffer.readBuffer(length);\n    }\n  }, {\n    key: \"readUInt32BE\",\n    value: function readUInt32BE(offset) {\n      return this.smartBuffer.readUInt32BE(offset);\n    }\n  }, {\n    key: \"readUInt8\",\n    value: function readUInt8() {\n      return this.smartBuffer.readUInt8();\n    }\n  }, {\n    key: \"readUInt16BE\",\n    value: function readUInt16BE() {\n      return this.smartBuffer.readUInt16BE();\n    }\n  }, {\n    key: \"readBigUIntLE\",\n    value: function readBigUIntLE(length) {\n      var buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n      var hex = buffer.toString();\n      var num = BigInt(\"0x\".concat(hex));\n      return num;\n    }\n  }, {\n    key: \"readBigUIntBE\",\n    value: function readBigUIntBE(length) {\n      var buffer = this.smartBuffer.readBuffer(length);\n      var hex = buffer.toString('hex');\n      var num = BigInt(\"0x\".concat(hex));\n      return num;\n    }\n  }, {\n    key: \"readBigUInt64BE\",\n    value: function readBigUInt64BE() {\n      return this.smartBuffer.readBigUInt64BE();\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(arg, encoding) {\n      return this.smartBuffer.readString(arg, encoding);\n    }\n  }, {\n    key: \"readOffset\",\n    get: function get() {\n      return this.smartBuffer.readOffset;\n    },\n    set: function set(val) {\n      this.smartBuffer.readOffset = val;\n    }\n  }, {\n    key: \"internalBuffer\",\n    get: function get() {\n      return this.smartBuffer.internalBuffer;\n    }\n  }, {\n    key: \"readUInt8Enum\",\n    value: function readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n      var num = this.smartBuffer.readUInt8();\n\n      if (isEnum(enumVariable, num)) {\n        return num;\n      } else {\n        throw invalidEnumErrorFormatter(num);\n      }\n    }\n  }], [{\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer) {\n      return new BufferReader({\n        buff: buffer\n      });\n    }\n  }]);\n\n  return BufferReader;\n}();","map":{"version":3,"sources":["../../src/bufferReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { SmartBuffer } from 'smart-buffer';\nfunction createEnumChecker(enumVariable) {\n    const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n    const enumValueSet = new Set(enumValues);\n    return (value) => enumValueSet.has(value);\n}\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n    const checker = enumCheckFunctions.get(enumVariable);\n    if (checker !== undefined) {\n        return checker(value);\n    }\n    const newChecker = createEnumChecker(enumVariable);\n    enumCheckFunctions.set(enumVariable, newChecker);\n    return isEnum(enumVariable, value);\n}\nexport class BufferReader {\n    constructor(options) {\n        if (Buffer.isBuffer(options)) {\n            this.smartBuffer = new SmartBuffer({ buff: options });\n        }\n        else {\n            this.smartBuffer = new SmartBuffer(options);\n        }\n    }\n    static fromBuffer(buffer) {\n        return new BufferReader({ buff: buffer });\n    }\n    readBuffer(length) {\n        return this.smartBuffer.readBuffer(length);\n    }\n    readUInt32BE(offset) {\n        return this.smartBuffer.readUInt32BE(offset);\n    }\n    readUInt8() {\n        return this.smartBuffer.readUInt8();\n    }\n    readUInt16BE() {\n        return this.smartBuffer.readUInt16BE();\n    }\n    readBigUIntLE(length) {\n        const buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n        const hex = buffer.toString();\n        const num = BigInt(`0x${hex}`);\n        return num;\n    }\n    readBigUIntBE(length) {\n        const buffer = this.smartBuffer.readBuffer(length);\n        const hex = buffer.toString('hex');\n        const num = BigInt(`0x${hex}`);\n        return num;\n    }\n    readBigUInt64BE() {\n        return this.smartBuffer.readBigUInt64BE();\n    }\n    readString(arg, encoding) {\n        return this.smartBuffer.readString(arg, encoding);\n    }\n    get readOffset() {\n        return this.smartBuffer.readOffset;\n    }\n    set readOffset(val) {\n        this.smartBuffer.readOffset = val;\n    }\n    get internalBuffer() {\n        return this.smartBuffer.internalBuffer;\n    }\n    readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n        const num = this.smartBuffer.readUInt8();\n        if (isEnum(enumVariable, num)) {\n            return num;\n        }\n        else {\n            throw invalidEnumErrorFormatter(num);\n        }\n    }\n}\n//# sourceMappingURL=bufferReader.js.map"]},"metadata":{},"sourceType":"module"}