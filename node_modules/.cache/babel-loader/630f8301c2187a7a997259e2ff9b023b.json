{"ast":null,"code":"import { taggedTemplateLiteralLoose as _taggedTemplateLiteralLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport styled, { createGlobalStyle, css } from 'styled-components';\nimport { theme } from '../theme/theme.esm.js';\nimport preflight from './preflight.esm.js';\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  *,\\n  *::before,\\n  *::after {\\n    box-sizing: border-box;\\n    border-color: \", \";\\n  }\\n\\n  input:-ms-input-placeholder,\\n  textarea:-ms-input-placeholder {\\n    color: \", \";\\n  }\\n\\n  input::-ms-input-placeholder,\\n  textarea::-ms-input-placeholder {\\n    color: \", \";\\n  }\\n\\n  input::placeholder,\\n  textarea::placeholder {\\n    color: \", \";\\n  }\\n\\n  body,\\n  div,\\n  span {\\n    text-align: initial;\\n    font-family: \", \";\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar defaultConfig = function defaultConfig(theme) {\n  return {\n    light: {\n      color: theme.colors.ink[900],\n      bg: undefined,\n      borderColor: '#E5E5EC',\n      placeholderColor: theme.colors.ink[400]\n    },\n    dark: {\n      color: 'white',\n      bg: theme.colors.ink[900],\n      borderColor: theme.colors.ink[600],\n      placeholderColor: theme.colors.ink[500]\n    }\n  };\n};\n\nvar _defaultConfig$light = /*#__PURE__*/defaultConfig(theme).light,\n    color = _defaultConfig$light.color,\n    bg = _defaultConfig$light.bg,\n    borderColor = _defaultConfig$light.borderColor,\n    placeholderColor = _defaultConfig$light.placeholderColor;\nvar cssReset = /*#__PURE__*/css([\"\", \";html{line-height:1.5;color:\", \";background-color:\", \";font-family:\", \";}*,*::before,*::after{box-sizing:border-box;border-width:0;border-style:solid;border-color:\", \";}input:-ms-input-placeholder,textarea:-ms-input-placeholder{color:\", \";}input::-ms-input-placeholder,textarea::-ms-input-placeholder{color:\", \";}input::placeholder,textarea::placeholder{color:\", \";}\"], preflight, color, bg, theme && theme.fonts && theme.fonts.body, borderColor, placeholderColor, placeholderColor, placeholderColor);\nvar CSSReset = /*#__PURE__*/createGlobalStyle( /*#__PURE__*/_templateObject(), cssReset);\nvar ScopedCSSReset = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject2(), borderColor, placeholderColor, placeholderColor, placeholderColor, theme && theme.fonts && theme.fonts.body);\nexport { CSSReset, ScopedCSSReset };","map":{"version":3,"sources":["../../src/css-reset/index.tsx"],"names":["defaultConfig","light","color","theme","bg","borderColor","placeholderColor","dark","cssReset","css","CSSReset","createGlobalStyle","ScopedCSSReset","styled"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAA;AAAA,SAAiB;AACrCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEC,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CADF,GACEA,CADF;AAELC,MAAAA,EAAE,EAFG,SAAA;AAGLC,MAAAA,WAAW,EAHN,SAAA;AAILC,MAAAA,gBAAgB,EAAEH,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA;AAJb,KAD8B;AAOrCI,IAAAA,IAAI,EAAE;AACJL,MAAAA,KAAK,EADD,OAAA;AAEJE,MAAAA,EAAE,EAAED,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAFA,GAEAA,CAFA;AAGJE,MAAAA,WAAW,EAAEF,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAHT,GAGSA,CAHT;AAIJG,MAAAA,gBAAgB,EAAEH,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA;AAJd;AAP+B,GAAjB;AAAtB,CAAA;;wCAeqDH,aAAa,CAAbA,KAAa,CAAbA,CAAqBC,K;IAAlEC,KAAAA,GAAAA,oBAAAA,CAAAA,K;IAAOE,EAAAA,GAAAA,oBAAAA,CAAAA,E;IAAIC,WAAAA,GAAAA,oBAAAA,CAAAA,W;IAAaC,gBAAAA,GAAAA,oBAAAA,CAAAA,gB;AAEhC,IAAME,QAAQ,GAAA,aAAGC,GAAH,CAAA,CAAA,EAAA,EAAA,8BAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,8FAAA,EAAA,qEAAA,EAAA,uEAAA,EAAA,mDAAA,EAAA,IAAA,CAAA,EAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAOKN,KAAK,IAAIA,KAAK,CAAdA,KAAAA,IAAwBA,KAAK,CAALA,KAAAA,CAP7B,IAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,gBAAA,EAAd,gBAAc,CAAd;IAmCMO,QAAQ,GAAA,aAAGC,iBAAH,EAAA,aAAA,eAAA,EAAA,EAAA,QAAA,C;IAERC,cAAc,GAAA,aAAGC,MAAM,CAAT,GAAGA,EAAH,aAAA,gBAAA,EAAGA,EAAH,WAAGA,EAAH,gBAAGA,EAAH,gBAAGA,EAAH,gBAAGA,EA2BJV,KAAK,IAAIA,KAAK,CAAdA,KAAAA,IAAwBA,KAAK,CAALA,KAAAA,CA3BvB,IAAGU,C","sourcesContent":["import styled, { createGlobalStyle, css } from 'styled-components';\nimport preflight from './preflight';\nimport { theme } from '../theme/theme';\n\n// Should type as theme here, however this type\n// has optional properties. Need to enforce type to ensure\n// these values are defined\nconst defaultConfig = (theme: any) => ({\n  light: {\n    color: theme.colors.ink[900],\n    bg: undefined as any,\n    borderColor: '#E5E5EC', // TODO: replace this with theme color\n    placeholderColor: theme.colors.ink[400],\n  },\n  dark: {\n    color: 'white',\n    bg: theme.colors.ink[900],\n    borderColor: theme.colors.ink[600],\n    placeholderColor: theme.colors.ink[500],\n  },\n});\n\nconst { color, bg, borderColor, placeholderColor } = defaultConfig(theme).light;\n\nconst cssReset = css`\n  ${preflight};\n\n  html {\n    line-height: 1.5;\n    color: ${color};\n    background-color: ${bg};\n    font-family: ${theme && theme.fonts && theme.fonts.body};\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    border-width: 0;\n    border-style: solid;\n    border-color: ${borderColor};\n  }\n\n  input:-ms-input-placeholder,\n  textarea:-ms-input-placeholder {\n    color: ${placeholderColor};\n  }\n\n  input::-ms-input-placeholder,\n  textarea::-ms-input-placeholder {\n    color: ${placeholderColor};\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${placeholderColor};\n  }\n`;\n\nconst CSSReset = createGlobalStyle`${cssReset}`;\n\nconst ScopedCSSReset = styled.div`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    border-color: ${borderColor};\n  }\n\n  input:-ms-input-placeholder,\n  textarea:-ms-input-placeholder {\n    color: ${placeholderColor};\n  }\n\n  input::-ms-input-placeholder,\n  textarea::-ms-input-placeholder {\n    color: ${placeholderColor};\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${placeholderColor};\n  }\n\n  body,\n  div,\n  span {\n    text-align: initial;\n    font-family: ${theme && theme.fonts && theme.fonts.body};\n  }\n`;\n\nexport { CSSReset, ScopedCSSReset };\n"]},"metadata":{},"sourceType":"module"}