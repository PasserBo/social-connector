{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { Children, cloneElement, createElement, Fragment } from 'react';\nimport { Box } from '../box/index.esm.js';\nimport { VisuallyHidden } from '../visually-hidden/index.esm.js';\nimport { isString, omit, pick } from '../utils/index.esm.js';\nimport { Portal } from '../portal/index.esm.js';\nimport { useTooltip } from './hooks.esm.js';\n\nfunction Tooltip(props) {\n  var children = props.children,\n      label = props.label,\n      shouldWrapChildren = props.shouldWrapChildren,\n      ariaLabel = props['aria-label'],\n      hasArrow = props.hasArrow,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\"]);\n\n  if (!label || label === '') {\n    var child = Children.only(children);\n    return cloneElement(child, _objectSpread2({}, child.props, {}, rest));\n  }\n\n  var _useTooltip = useTooltip(props),\n      isOpen = _useTooltip.isOpen,\n      getTriggerProps = _useTooltip.getTriggerProps,\n      getTooltipProps = _useTooltip.getTooltipProps,\n      getArrowProps = _useTooltip.getArrowProps;\n\n  var trigger;\n\n  if (isString(children) || shouldWrapChildren) {\n    trigger = createElement(Box, Object.assign({\n      as: \"span\",\n      tabIndex: 0\n    }, getTriggerProps()), children);\n  } else {\n    var _child = Children.only(children);\n\n    trigger = cloneElement(_child, getTriggerProps(_child.props));\n  }\n\n  var hasAriaLabel = Boolean(ariaLabel);\n  var baseTooltipProps = getTooltipProps(rest);\n\n  var _ref = hasAriaLabel ? omit(baseTooltipProps, ['role', 'id']) : baseTooltipProps,\n      style = _ref.style,\n      tooltipProps = _objectWithoutPropertiesLoose(_ref, [\"style\"]);\n\n  var hiddenProps = pick(baseTooltipProps, ['role', 'id']);\n  return createElement(Fragment, null, trigger, isOpen && createElement(Portal, null, createElement(Box, Object.assign({\n    paddingX: \"8px\",\n    paddingY: \"tight\",\n    bg: \"ink\",\n    color: \"white\",\n    borderRadius: \"6px\",\n    textStyle: \"caption.medium\",\n    maxWidth: \"320px\"\n  }, tooltipProps, {\n    style: _objectSpread2({}, style, {\n      useSelect: 'none'\n    })\n  }), label, hasAriaLabel && createElement(VisuallyHidden, Object.assign({}, hiddenProps), ariaLabel), hasArrow && createElement(Box, Object.assign({\n    \"data-arrow\": \"\",\n    bg: \"inherit\"\n  }, getArrowProps())))));\n}\n\nexport { Tooltip };","map":{"version":3,"sources":["../../src/tooltip/index.tsx"],"names":["Tooltip","props","children","label","shouldWrapChildren","ariaLabel","hasArrow","rest","child","React","isOpen","getTriggerProps","getTooltipProps","getArrowProps","useTooltip","isString","trigger","as","tabIndex","hasAriaLabel","Boolean","baseTooltipProps","style","tooltipProps","omit","hiddenProps","pick","paddingX","paddingY","bg","color","borderRadius","textStyle","maxWidth","useSelect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Box, PropsOf } from '../box';\nimport { useTooltip, UseTooltipProps } from './hooks';\nimport { Portal } from '../portal';\nimport { isString, omit, pick } from '../utils';\nimport { VisuallyHidden } from '../visually-hidden';\n\nexport type TooltipProps = PropsOf<typeof Box> &\n  UseTooltipProps & {\n    /**\n     * The react component to use as the\n     * trigger for the tooltip\n     */\n    children?: React.ReactNode;\n    /**\n     * The label of the tooltip\n     */\n    label?: string;\n    /**\n     * The accessible, human friendly label to use for\n     * screen readers.\n     *\n     * If passed, tooltip will show the content `label`\n     * but expose only `aria-label` to assistive technologies\n     */\n    'aria-label'?: string;\n    /**\n     * If `true`, the tooltip will wrap it's children\n     * in a `<span/>` with `tabIndex=0`\n     */\n    shouldWrapChildren?: boolean;\n    /**\n     * If `true`, the tooltip will show an arrow tip\n     */\n    hasArrow?: boolean;\n  };\n\nexport function Tooltip(props: TooltipProps) {\n  const { children, label, shouldWrapChildren, 'aria-label': ariaLabel, hasArrow, ...rest } = props;\n\n  if (!label || label === '') {\n    const child = React.Children.only(children) as React.ReactElement;\n    return React.cloneElement(child, { ...child.props, ...rest });\n  }\n\n  const { isOpen, getTriggerProps, getTooltipProps, getArrowProps } = useTooltip(props);\n\n  let trigger: React.ReactElement;\n\n  if (isString(children) || shouldWrapChildren) {\n    trigger = (\n      <Box as=\"span\" tabIndex={0} {...getTriggerProps()}>\n        {children}\n      </Box>\n    );\n  } else {\n    // ensure tooltip has only one child node\n    const child = React.Children.only(children) as React.ReactElement;\n    trigger = React.cloneElement(child, getTriggerProps(child.props));\n  }\n\n  const hasAriaLabel = Boolean(ariaLabel);\n\n  const baseTooltipProps = getTooltipProps(rest);\n\n  const { style, ...tooltipProps } = hasAriaLabel\n    ? omit(baseTooltipProps, ['role', 'id'])\n    : baseTooltipProps;\n\n  const hiddenProps = pick(baseTooltipProps, ['role', 'id']);\n\n  return (\n    <React.Fragment>\n      {trigger}\n      {isOpen && (\n        <Portal>\n          <Box\n            paddingX=\"8px\"\n            paddingY=\"tight\"\n            bg=\"ink\"\n            color=\"white\"\n            borderRadius=\"6px\"\n            textStyle=\"caption.medium\"\n            maxWidth=\"320px\"\n            {...tooltipProps}\n            style={{\n              ...style,\n              useSelect: 'none',\n            }}\n          >\n            {label}\n            {hasAriaLabel && <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>}\n            {hasArrow && <Box data-arrow=\"\" bg=\"inherit\" {...getArrowProps()} />}\n          </Box>\n        </Portal>\n      )}\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}