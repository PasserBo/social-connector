{"ast":null,"code":"import mock from'../mock';import jwt from'jsonwebtoken';const data={users:[{id:1,fullName:'John Doe',username:'johndoe',password:'admin',avatar:require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,email:'admin@demo.com',role:'admin',ability:[{action:'manage',subject:'all'}],extras:{eCommerceCartItemsCount:1}}]};const email='admin@demo.com';const username='johndoe';const password='admin';// credentials hard wired to bypass jwt auth and just keep stacks auth\nconst user=data.users.find(u=>u.email===email&&u.password===password);// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig={secret:'dd5f3089-40c3-403d-af14-d0c228b05cb4',refreshTokenSecret:'7c4c1c50-3230-45bf-9eae-c9b2e401c767',expireTime:'10m',refreshTokenExpireTime:'10m'};mock.onPost('/jwt/login').reply(request=>{const{username}=JSON.parse(request.data);const accessToken=jwt.sign({id:user.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});const refreshToken=jwt.sign({id:user.id},jwtConfig.refreshTokenSecret,{expiresIn:jwtConfig.refreshTokenExpireTime});const userData={...user};delete userData.password;const response={userData,username,accessToken,refreshToken};return[200,response];});mock.onPost('/jwt/register').reply(request=>{if(request.data.length>0){const isEmailAlreadyInUse=data.users.find(user=>user.email===email);const isUsernameAlreadyInUse=data.users.find(user=>user.username===username);const error={email:isEmailAlreadyInUse?'This email is already in use.':null,username:isUsernameAlreadyInUse?'This username is already in use.':null};if(!error.username&&!error.email){const userData={email,password,username,fullName:'Bitfari SC',avatar:null,role:'admin',ability:[{action:'manage',subject:'all'}]};// Add user id\nconst length=data.users.length;let lastIndex=0;if(length){lastIndex=data.users[length-1].id;}userData.id=lastIndex+1;data.users.push(userData);const accessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});const user=Object.assign({},userData);delete user['password'];const response={user,accessToken};return[200,response];}else{return[200,{error}];}}});mock.onPost('/jwt/refresh-token').reply(request=>{const{refreshToken}=JSON.parse(request.data);try{const{id}=jwt.verify(refreshToken,jwtConfig.refreshTokenSecret);const userData={...data.users.find(user=>user.id===id)};const newAccessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expiresIn});const newRefreshToken=jwt.sign({id:userData.id},jwtConfig.refreshTokenSecret,{expiresIn:jwtConfig.refreshTokenExpireTime});delete userData.password;const response={userData,accessToken:newAccessToken,refreshToken:newRefreshToken};return[200,response];}catch(e){const error='Invalid refresh token';return[401,{error}];}});","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/@local-db/jwt/index.js"],"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","user","find","u","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","accessToken","sign","expiresIn","refreshToken","userData","response","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","error","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken","e"],"mappings":"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","sourcesContent":["import mock from '../mock'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst data = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      fullName: 'John Doe',\r\n      username: 'johndoe',\r\n      password: 'admin',\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\r\n      email: 'admin@demo.com',\r\n      role: 'admin',\r\n      ability: [\r\n        {\r\n          action: 'manage',\r\n          subject: 'all'\r\n        }\r\n      ],\r\n      extras: {\r\n        eCommerceCartItemsCount: 1\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nconst email = 'admin@demo.com'\r\nconst username = 'johndoe'\r\nconst password = 'admin'\r\n\r\n// credentials hard wired to bypass jwt auth and just keep stacks auth\r\nconst user = data.users.find(u => u.email === email && u.password === password)\r\n\r\n// ! These two secrets shall be in .env file and not in any other file\r\nconst jwtConfig = {\r\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\r\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\r\n  expireTime: '10m',\r\n  refreshTokenExpireTime: '10m'\r\n}\r\n\r\nmock.onPost('/jwt/login').reply(request => {\r\n  const { username } = JSON.parse(request.data)\r\n \r\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\r\n        expiresIn: jwtConfig.refreshTokenExpireTime })\r\n\r\n      const userData = { ...user }\r\n      delete userData.password\r\n      const response = {\r\n        userData,\r\n        username,\r\n        accessToken,\r\n        refreshToken\r\n      }\r\n\r\n      return [200, response]\r\n    }\r\n  )\r\n\r\nmock.onPost('/jwt/register').reply(request => {\r\n  if (request.data.length > 0) {\r\n\r\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\r\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\r\n    const error = {\r\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\r\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\r\n    }\r\n\r\n    if (!error.username && !error.email) {\r\n      const userData = {\r\n        email,\r\n        password,\r\n        username,\r\n        fullName: 'Bitfari SC',\r\n        avatar: null,\r\n        role: 'admin',\r\n        ability: [\r\n          {\r\n            action: 'manage',\r\n            subject: 'all'\r\n          }\r\n        ]\r\n      }\r\n\r\n      // Add user id\r\n      const length = data.users.length\r\n      let lastIndex = 0\r\n      if (length) {\r\n        lastIndex = data.users[length - 1].id\r\n      }\r\n      userData.id = lastIndex + 1\r\n\r\n      data.users.push(userData)\r\n\r\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n\r\n      const user = Object.assign({}, userData)\r\n      delete user['password']\r\n      const response = { user, accessToken }\r\n\r\n      return [200, response]\r\n    } else {\r\n      return [200, { error }]\r\n    }\r\n  }\r\n})\r\n\r\nmock.onPost('/jwt/refresh-token').reply(request => {\r\n  const { refreshToken } = JSON.parse(request.data)\r\n\r\n  try {\r\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\r\n    const userData = { ...data.users.find(user => user.id === id) }\r\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\r\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\r\n      expiresIn: jwtConfig.refreshTokenExpireTime\r\n    })\r\n\r\n    delete userData.password\r\n    const response = {\r\n      userData,\r\n      accessToken: newAccessToken,\r\n      refreshToken: newRefreshToken\r\n    }\r\n\r\n    return [200, response]\r\n  } catch (e) {\r\n    const error = 'Invalid refresh token'\r\n    return [401, { error }]\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}