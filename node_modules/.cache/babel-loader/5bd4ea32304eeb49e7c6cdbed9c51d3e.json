{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { forwardRef } from 'react';\nimport { Box } from '../box/index.esm.js';\n\nvar assumeTextStyle = function assumeTextStyle(as) {\n  switch (as) {\n    case 'h1':\n      return 'display.large';\n\n    case 'h2':\n      return 'display.small';\n\n    case 'h3':\n      return 'body.large.medium';\n\n    default:\n      return undefined;\n  }\n};\n\nvar Text = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var textStyle = _ref.textStyle,\n      _ref$as = _ref.as,\n      as = _ref$as === void 0 ? 'span' : _ref$as,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"textStyle\", \"as\"]);\n\n  return React__default.createElement(Box, Object.assign({\n    ref: ref,\n    as: as,\n    whiteSpace: \"unset\",\n    display: \"inline\",\n    textStyle: textStyle || assumeTextStyle(as)\n  }, rest));\n});\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"sources":["../../src/text/index.tsx"],"names":["assumeTextStyle","Text","forwardRef","textStyle","as","rest","React","ref","whiteSpace","display"],"mappings":";;;;AAIA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,EAAA,EAAA;AACtB,UAAA,EAAA;AACE,SAAA,IAAA;AACE,aAAA,eAAA;;AACF,SAAA,IAAA;AACE,aAAA,eAAA;;AACF,SAAA,IAAA;AACE,aAAA,mBAAA;;AACF;AACE,aAAA,SAAA;AARJ;AADF,CAAA;;IAYMC,IAAI,GAAA,aAAGC,UAAU,CAAsB,UAAA,IAAA,EAAA,GAAA,EAAA;MAAGC,SAAAA,GAAAA,IAAAA,CAAAA,S;qBAAWC,E;MAAAA,EAAAA,GAAAA,OAAAA,KAAAA,KAAAA,CAAAA,GAAK,MAALA,GAAK,O;MAAWC,IAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,WAAAA,EAAAA,IAAAA,CAAAA,C;;AACzE,SACEC,cAAAA,CAAAA,aAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACEC,IAAAA,GAAG,EAAEA,GADPD;AAEEF,IAAAA,EAAE,EAAEA,EAFNE;AAGEE,IAAAA,UAAU,EAAC,OAHbF;AAIEG,IAAAA,OAAO,EAAC,QAJVH;AAKEH,IAAAA,SAAS,EAAEA,SAAS,IAAIH,eAAe,CAAA,EAAA;AALzCM,GAAAA,EADF,IACEA,CAAAA,CADF;AADqB,CAAA,C;AAavBL,IAAI,CAAJA,WAAAA,GAAAA,MAAAA","sourcesContent":["import React, { forwardRef } from 'react';\nimport { PseudoBox, PseudoBoxProps } from '../pseudo-box';\n\n// if nothing is passed for the prop `textStyle`, we will assume styles for various dom elements\nconst assumeTextStyle = (as: string | React.ElementType) => {\n  switch (as) {\n    case 'h1':\n      return 'display.large';\n    case 'h2':\n      return 'display.small';\n    case 'h3':\n      return 'body.large.medium';\n    default:\n      return undefined;\n  }\n};\nconst Text = forwardRef<any, PseudoBoxProps>(({ textStyle, as = 'span', ...rest }, ref) => {\n  return (\n    <PseudoBox\n      ref={ref}\n      as={as}\n      whiteSpace=\"unset\"\n      display=\"inline\"\n      textStyle={textStyle || assumeTextStyle(as)}\n      {...rest}\n    />\n  );\n});\n\nText.displayName = 'Text';\n\nexport { Text };\n"]},"metadata":{},"sourceType":"module"}