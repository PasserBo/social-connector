{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useContext, forwardRef, createContext } from 'react';\nimport { Box } from '../box/index.esm.js';\nvar FormControlContext = /*#__PURE__*/createContext({});\n\nvar useFormControlContext = function useFormControlContext() {\n  return useContext(FormControlContext);\n};\n\nvar useFormControl = function useFormControl(props) {\n  var context = useFormControlContext();\n\n  if (!context) {\n    return props;\n  }\n\n  var keys = Object.keys(context);\n  return keys.reduce(function (acc, prop) {\n    acc[prop] = props[prop];\n\n    if (context) {\n      if (props[prop] == null) {\n        acc[prop] = context[prop];\n      }\n    }\n\n    return acc;\n  }, {});\n};\n\nvar FormControl = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var isInvalid = _ref.isInvalid,\n      isRequired = _ref.isRequired,\n      isDisabled = _ref.isDisabled,\n      isReadOnly = _ref.isReadOnly,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isInvalid\", \"isRequired\", \"isDisabled\", \"isReadOnly\"]);\n\n  var context = {\n    isRequired: isRequired,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  };\n  return React__default.createElement(FormControlContext.Provider, {\n    value: context\n  }, React__default.createElement(Box, Object.assign({\n    role: \"group\",\n    ref: ref\n  }, rest)));\n});\nFormControl.displayName = 'FormControl';\nexport { FormControl, useFormControl, useFormControlContext };","map":{"version":3,"sources":["../../src/form-control/index.tsx"],"names":["FormControlContext","createContext","useFormControlContext","useContext","useFormControl","context","keys","Object","acc","props","FormControl","forwardRef","isInvalid","isRequired","isDisabled","isReadOnly","rest","value","React","role","ref"],"mappings":";;;AAQA,IAAMA,kBAAkB,GAAA,aAAGC,aAAa,CAAxC,EAAwC,CAAxC;;IAEaC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAA;AAAA,SAAMC,UAAU,CAAhB,kBAAgB,CAAhB;AAAA,C;;IAExBC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAAA;AAC5B,MAAMC,OAAO,GAAGH,qBAAhB,EAAA;;AACA,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,KAAA;AACD;;AACD,MAAMI,IAAI,GAAGC,MAAM,CAANA,IAAAA,CAAb,OAAaA,CAAb;AACA,SAAO,IAAI,CAAJ,MAAA,CAAY,UAAA,GAAA,EAAA,IAAA,EAAA;AAEjBC,IAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAYC,KAAK,CAAjBD,IAAiB,CAAjBA;;AAEA,QAAA,OAAA,EAAa;AACX,UAAIC,KAAK,CAALA,IAAK,CAALA,IAAJ,IAAA,EAAyB;AACvBD,QAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAYH,OAAO,CAAnBG,IAAmB,CAAnBA;AACD;AACF;;AAED,WAAA,GAAA;AAVK,GAAA,EAAP,EAAO,CAAP;AAYD,C;;IAKKE,WAAW,GAAA,aAAGC,UAAU,CAC5B,UAAA,IAAA,EAAA,GAAA,EAAA;MAAGC,SAAAA,GAAAA,IAAAA,CAAAA,S;MAAWC,UAAAA,GAAAA,IAAAA,CAAAA,U;MAAYC,UAAAA,GAAAA,IAAAA,CAAAA,U;MAAYC,UAAAA,GAAAA,IAAAA,CAAAA,U;MAAeC,IAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,WAAAA,EAAAA,YAAAA,EAAAA,YAAAA,EAAAA,YAAAA,CAAAA,C;;AACnD,MAAMX,OAAO,GAAG;AACdQ,IAAAA,UAAU,EADI,UAAA;AAEdC,IAAAA,UAAU,EAFI,UAAA;AAGdF,IAAAA,SAAS,EAHK,SAAA;AAIdG,IAAAA,UAAU,EAAVA;AAJc,GAAhB;AAOA,SACE,cAAA,CAAA,aAAA,CAACf,kBAAkB,CAAnB,QAAA,EAAA;AAA6BiB,IAAAA,KAAK,EAAEZ;AAApC,GAAA,EACEa,cAAAA,CAAAA,aAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAAKC,IAAAA,IAAI,EAAC,OAAVD;AAAkBE,IAAAA,GAAG,EAAEA;AAAvBF,GAAAA,EAFJ,IAEIA,CAAAA,CADF,CADF;AAT0B,CAAA,C;AAiB9BR,WAAW,CAAXA,WAAAA,GAAAA,aAAAA","sourcesContent":["import React, { createContext, useContext, forwardRef } from 'react';\nimport { Box } from '../box';\nimport { FormControlProps } from './types';\n\ninterface NormalObject {\n  [key: string]: any;\n}\n\nconst FormControlContext = createContext<NormalObject>({});\n\nexport const useFormControlContext = () => useContext(FormControlContext);\n\nexport const useFormControl = (props: any) => {\n  const context = useFormControlContext();\n  if (!context) {\n    return props;\n  }\n  const keys = Object.keys(context);\n  return keys.reduce((acc: NormalObject, prop) => {\n    /** Giving precedence to `props` over `context` */\n    acc[prop] = props[prop];\n\n    if (context) {\n      if (props[prop] == null) {\n        acc[prop] = context[prop];\n      }\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * FormControl provides context such as `isInvalid`, `isRequired`, `isDisabled` to it's children.\n */\nconst FormControl = forwardRef<any, FormControlProps>(\n  ({ isInvalid, isRequired, isDisabled, isReadOnly, ...rest }, ref) => {\n    const context = {\n      isRequired,\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n    };\n\n    return (\n      <FormControlContext.Provider value={context}>\n        <Box role=\"group\" ref={ref} {...rest} />\n      </FormControlContext.Provider>\n    );\n  }\n);\n\nFormControl.displayName = 'FormControl';\n\nexport { FormControl };\n"]},"metadata":{},"sourceType":"module"}