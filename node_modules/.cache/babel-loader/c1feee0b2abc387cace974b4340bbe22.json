{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { PostConditionType, StacksMessageType } from './constants';\nimport { parseAssetInfoString, parsePrincipalString } from './postcondition-types';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false)\n  };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo\n  };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName\n  };\n}","map":{"version":3,"sources":["../../src/postcondition.ts"],"names":[],"mappings":"AAAA,SAAsB,WAAtB,QAAyC,gBAAzC;AACA,SACE,iBADF,EAIE,iBAJF,QAKO,aALP;AAOA,SAGE,oBAHF,EAIE,oBAJF,QAQO,uBARP;AAYA,OAAM,SAAU,sBAAV,CACJ,SADI,EAEJ,aAFI,EAGJ,MAHI,EAGe;AAEnB,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAhC;AACD;;AAED,SAAO;AACL,IAAA,IAAI,EAAE,iBAAiB,CAAC,aADnB;AAEL,IAAA,aAAa,EAAE,iBAAiB,CAAC,GAF5B;AAGL,IAAA,SAHK;AAIL,IAAA,aAJK;AAKL,IAAA,MAAM,EAAE,WAAW,CAAC,MAAD,EAAS,KAAT;AALd,GAAP;AAOD;AAED,OAAM,SAAU,2BAAV,CACJ,SADI,EAEJ,aAFI,EAGJ,MAHI,EAIJ,SAJI,EAIyB;AAE7B,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAhC;AACD;;AACD,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAhC;AACD;;AAED,SAAO;AACL,IAAA,IAAI,EAAE,iBAAiB,CAAC,aADnB;AAEL,IAAA,aAAa,EAAE,iBAAiB,CAAC,QAF5B;AAGL,IAAA,SAHK;AAIL,IAAA,aAJK;AAKL,IAAA,MAAM,EAAE,WAAW,CAAC,MAAD,EAAS,KAAT,CALd;AAML,IAAA;AANK,GAAP;AAQD;AAED,OAAM,SAAU,8BAAV,CACJ,SADI,EAEJ,aAFI,EAGJ,SAHI,EAIJ,SAJI,EAImB;AAEvB,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAhC;AACD;;AACD,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAAhC;AACD;;AAED,SAAO;AACL,IAAA,IAAI,EAAE,iBAAiB,CAAC,aADnB;AAEL,IAAA,aAAa,EAAE,iBAAiB,CAAC,WAF5B;AAGL,IAAA,SAHK;AAIL,IAAA,aAJK;AAKL,IAAA,SALK;AAML,IAAA;AANK,GAAP;AAQD","sourceRoot":"","sourcesContent":["import { intToBigInt } from '@stacks/common';\nimport { PostConditionType, StacksMessageType, } from './constants';\nimport { parseAssetInfoString, parsePrincipalString, } from './postcondition-types';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount: intToBigInt(amount, false),\n    };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    if (typeof assetInfo === 'string') {\n        assetInfo = parseAssetInfoString(assetInfo);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount: intToBigInt(amount, false),\n        assetInfo,\n    };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n    if (typeof principal === 'string') {\n        principal = parsePrincipalString(principal);\n    }\n    if (typeof assetInfo === 'string') {\n        assetInfo = parseAssetInfoString(assetInfo);\n    }\n    return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n    };\n}\n//# sourceMappingURL=postcondition.js.map"]},"metadata":{},"sourceType":"module"}