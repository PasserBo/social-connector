{"ast":null,"code":"// ** Redux Imports\nimport{createSlice,createAsyncThunk}from'@reduxjs/toolkit';// ** Axios Imports\nimport axios from'axios';export const getUserProfile=createAsyncThunk('appChat/getTasks',async()=>{const response=await axios.get('/apps/chat/users/profile-user');return response.data;});export const getChatContacts=createAsyncThunk('appChat/getChatContacts',async()=>{const response=await axios.get('/apps/chat/chats-and-contacts');return response.data;});export const selectChat=createAsyncThunk('appChat/selectChat',async(id,_ref)=>{let{dispatch}=_ref;const response=await axios.get('/apps/chat/get-chat',{id});await dispatch(getChatContacts());return response.data;});export const sendMsg=createAsyncThunk('appChat/sendMsg',async(obj,_ref2)=>{let{dispatch}=_ref2;const response=await axios.post('/apps/chat/send-msg',{obj});await dispatch(selectChat(obj.contact.id));return response.data;});export const appChatSlice=createSlice({name:'appChat',initialState:{chats:[],contacts:[],userProfile:{},selectedUser:{}},reducers:{},extraReducers:builder=>{builder.addCase(getUserProfile.fulfilled,(state,action)=>{state.userProfile=action.payload;}).addCase(getChatContacts.fulfilled,(state,action)=>{state.chats=action.payload.chatsContacts;state.contacts=action.payload.contacts;}).addCase(selectChat.fulfilled,(state,action)=>{state.selectedUser=action.payload;});}});export default appChatSlice.reducer;","map":{"version":3,"sources":["/Users/jvledesma/Downloads/react-version/full-version/src/views/apps/chat/store/index.js"],"names":["createSlice","createAsyncThunk","axios","getUserProfile","response","get","data","getChatContacts","selectChat","id","dispatch","sendMsg","obj","post","contact","appChatSlice","name","initialState","chats","contacts","userProfile","selectedUser","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","chatsContacts","reducer"],"mappings":"AAAA;AACA,OAASA,WAAT,CAAsBC,gBAAtB,KAA8C,kBAA9C,CAEA;AACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,MAAMC,CAAAA,cAAc,CAAGF,gBAAgB,CAAC,kBAAD,CAAqB,SAAY,CAC7E,KAAMG,CAAAA,QAAQ,CAAG,KAAMF,CAAAA,KAAK,CAACG,GAAN,CAAU,+BAAV,CAAvB,CACA,MAAOD,CAAAA,QAAQ,CAACE,IAAhB,CACD,CAH6C,CAAvC,CAKP,MAAO,MAAMC,CAAAA,eAAe,CAAGN,gBAAgB,CAAC,yBAAD,CAA4B,SAAY,CACrF,KAAMG,CAAAA,QAAQ,CAAG,KAAMF,CAAAA,KAAK,CAACG,GAAN,CAAU,+BAAV,CAAvB,CACA,MAAOD,CAAAA,QAAQ,CAACE,IAAhB,CACD,CAH8C,CAAxC,CAKP,MAAO,MAAME,CAAAA,UAAU,CAAGP,gBAAgB,CAAC,oBAAD,CAAuB,MAAOQ,EAAP,QAA4B,IAAjB,CAAEC,QAAF,CAAiB,MAC3F,KAAMN,CAAAA,QAAQ,CAAG,KAAMF,CAAAA,KAAK,CAACG,GAAN,CAAU,qBAAV,CAAiC,CAAEI,EAAF,CAAjC,CAAvB,CACA,KAAMC,CAAAA,QAAQ,CAACH,eAAe,EAAhB,CAAd,CACA,MAAOH,CAAAA,QAAQ,CAACE,IAAhB,CACD,CAJyC,CAAnC,CAMP,MAAO,MAAMK,CAAAA,OAAO,CAAGV,gBAAgB,CAAC,iBAAD,CAAoB,MAAOW,GAAP,SAA6B,IAAjB,CAAEF,QAAF,CAAiB,OACtF,KAAMN,CAAAA,QAAQ,CAAG,KAAMF,CAAAA,KAAK,CAACW,IAAN,CAAW,qBAAX,CAAkC,CAAED,GAAF,CAAlC,CAAvB,CACA,KAAMF,CAAAA,QAAQ,CAACF,UAAU,CAACI,GAAG,CAACE,OAAJ,CAAYL,EAAb,CAAX,CAAd,CACA,MAAOL,CAAAA,QAAQ,CAACE,IAAhB,CACD,CAJsC,CAAhC,CAMP,MAAO,MAAMS,CAAAA,YAAY,CAAGf,WAAW,CAAC,CACtCgB,IAAI,CAAE,SADgC,CAEtCC,YAAY,CAAE,CACZC,KAAK,CAAE,EADK,CAEZC,QAAQ,CAAE,EAFE,CAGZC,WAAW,CAAE,EAHD,CAIZC,YAAY,CAAE,EAJF,CAFwB,CAQtCC,QAAQ,CAAE,EAR4B,CAStCC,aAAa,CAAEC,OAAO,EAAI,CACxBA,OAAO,CACJC,OADH,CACWtB,cAAc,CAACuB,SAD1B,CACqC,CAACC,KAAD,CAAQC,MAAR,GAAmB,CACpDD,KAAK,CAACP,WAAN,CAAoBQ,MAAM,CAACC,OAA3B,CACD,CAHH,EAIGJ,OAJH,CAIWlB,eAAe,CAACmB,SAJ3B,CAIsC,CAACC,KAAD,CAAQC,MAAR,GAAmB,CACrDD,KAAK,CAACT,KAAN,CAAcU,MAAM,CAACC,OAAP,CAAeC,aAA7B,CACAH,KAAK,CAACR,QAAN,CAAiBS,MAAM,CAACC,OAAP,CAAeV,QAAhC,CACD,CAPH,EAQGM,OARH,CAQWjB,UAAU,CAACkB,SARtB,CAQiC,CAACC,KAAD,CAAQC,MAAR,GAAmB,CAChDD,KAAK,CAACN,YAAN,CAAqBO,MAAM,CAACC,OAA5B,CACD,CAVH,EAWD,CArBqC,CAAD,CAAhC,CAwBP,cAAed,CAAAA,YAAY,CAACgB,OAA5B","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\n\r\nexport const getUserProfile = createAsyncThunk('appChat/getTasks', async () => {\r\n  const response = await axios.get('/apps/chat/users/profile-user')\r\n  return response.data\r\n})\r\n\r\nexport const getChatContacts = createAsyncThunk('appChat/getChatContacts', async () => {\r\n  const response = await axios.get('/apps/chat/chats-and-contacts')\r\n  return response.data\r\n})\r\n\r\nexport const selectChat = createAsyncThunk('appChat/selectChat', async (id, { dispatch }) => {\r\n  const response = await axios.get('/apps/chat/get-chat', { id })\r\n  await dispatch(getChatContacts())\r\n  return response.data\r\n})\r\n\r\nexport const sendMsg = createAsyncThunk('appChat/sendMsg', async (obj, { dispatch }) => {\r\n  const response = await axios.post('/apps/chat/send-msg', { obj })\r\n  await dispatch(selectChat(obj.contact.id))\r\n  return response.data\r\n})\r\n\r\nexport const appChatSlice = createSlice({\r\n  name: 'appChat',\r\n  initialState: {\r\n    chats: [],\r\n    contacts: [],\r\n    userProfile: {},\r\n    selectedUser: {}\r\n  },\r\n  reducers: {},\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getUserProfile.fulfilled, (state, action) => {\r\n        state.userProfile = action.payload\r\n      })\r\n      .addCase(getChatContacts.fulfilled, (state, action) => {\r\n        state.chats = action.payload.chatsContacts\r\n        state.contacts = action.payload.contacts\r\n      })\r\n      .addCase(selectChat.fulfilled, (state, action) => {\r\n        state.selectedUser = action.payload\r\n      })\r\n  }\r\n})\r\n\r\nexport default appChatSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}